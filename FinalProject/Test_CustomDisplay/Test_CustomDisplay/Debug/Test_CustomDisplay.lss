
Test_CustomDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008df  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000035e  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000165  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030e  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000151  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ca  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001523  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	2c d0       	rcall	.+88     	; 0xf2 <main>
  9a:	34 c0       	rjmp	.+104    	; 0x104 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <delay_ms>:
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	5c f0       	brlt	.+22     	; 0xba <delay_ms+0x1c>
  a4:	08 95       	ret
  a6:	00 00       	nop
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	31 09       	sbc	r19, r1
  ac:	e1 f7       	brne	.-8      	; 0xa6 <delay_ms+0x8>
  ae:	4f 5f       	subi	r20, 0xFF	; 255
  b0:	5f 4f       	sbci	r21, 0xFF	; 255
  b2:	48 17       	cp	r20, r24
  b4:	59 07       	cpc	r21, r25
  b6:	29 f4       	brne	.+10     	; 0xc2 <delay_ms+0x24>
  b8:	08 95       	ret
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	67 e0       	ldi	r22, 0x07	; 7
  c0:	73 e0       	ldi	r23, 0x03	; 3
  c2:	9b 01       	movw	r18, r22
  c4:	f0 cf       	rjmp	.-32     	; 0xa6 <delay_ms+0x8>

000000c6 <LCD_WriteCommand>:
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	5f 9a       	sbi	0x0b, 7	; 11
  cc:	00 00       	nop
  ce:	5f 98       	cbi	0x0b, 7	; 11
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	e4 cf       	rjmp	.-56     	; 0x9e <delay_ms>

000000d6 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
  d6:	84 e6       	ldi	r24, 0x64	; 100
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	e1 df       	rcall	.-62     	; 0x9e <delay_ms>
	LCD_WriteCommand(0x38);
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	f3 df       	rcall	.-26     	; 0xc6 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
  e0:	86 e0       	ldi	r24, 0x06	; 6
  e2:	f1 df       	rcall	.-30     	; 0xc6 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
  e4:	8f e0       	ldi	r24, 0x0F	; 15
  e6:	ef df       	rcall	.-34     	; 0xc6 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	ed df       	rcall	.-38     	; 0xc6 <LCD_WriteCommand>
	delay_ms(10);						 
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	d6 cf       	rjmp	.-84     	; 0x9e <delay_ms>

000000f2 <main>:
#include <avr/io.h>
#include "io.h"

int main(void)
{
	DDRA = 0xF0; PORTA = 0x0F;
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	81 b9       	out	0x01, r24	; 1
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	84 b9       	out	0x04, r24	; 4
  fe:	15 b8       	out	0x05, r1	; 5
	LCD_init();
 100:	ea df       	rcall	.-44     	; 0xd6 <LCD_init>
 102:	ff cf       	rjmp	.-2      	; 0x102 <main+0x10>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
