
Test_EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000210  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000840  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000181  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000c45  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001fa  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000102  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000322  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010f  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006b  00000000  00000000  000013ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	50 d0       	rcall	.+160    	; 0x13a <main>
  9a:	b8 c0       	rjmp	.+368    	; 0x20c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <GetKeypadKey>:
#define KEYPADPORT PORTA


unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
  9e:	8f ee       	ldi	r24, 0xEF	; 239
  a0:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
  a2:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
  a4:	00 9b       	sbis	0x00, 0	; 0
  a6:	29 c0       	rjmp	.+82     	; 0xfa <GetKeypadKey+0x5c>
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
  a8:	01 9b       	sbis	0x00, 1	; 0
  aa:	29 c0       	rjmp	.+82     	; 0xfe <GetKeypadKey+0x60>
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
  ac:	02 9b       	sbis	0x00, 2	; 0
  ae:	29 c0       	rjmp	.+82     	; 0x102 <GetKeypadKey+0x64>
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
  b0:	03 9b       	sbis	0x00, 3	; 0
  b2:	29 c0       	rjmp	.+82     	; 0x106 <GetKeypadKey+0x68>
	
	KEYPADPORT = 0xDF;
  b4:	8f ed       	ldi	r24, 0xDF	; 223
  b6:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
  b8:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
  ba:	00 9b       	sbis	0x00, 0	; 0
  bc:	26 c0       	rjmp	.+76     	; 0x10a <GetKeypadKey+0x6c>
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
  be:	01 9b       	sbis	0x00, 1	; 0
  c0:	26 c0       	rjmp	.+76     	; 0x10e <GetKeypadKey+0x70>
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
  c2:	02 9b       	sbis	0x00, 2	; 0
  c4:	26 c0       	rjmp	.+76     	; 0x112 <GetKeypadKey+0x74>
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
  c6:	03 9b       	sbis	0x00, 3	; 0
  c8:	26 c0       	rjmp	.+76     	; 0x116 <GetKeypadKey+0x78>

	KEYPADPORT = 0xBF;
  ca:	8f eb       	ldi	r24, 0xBF	; 191
  cc:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
  ce:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
  d0:	00 9b       	sbis	0x00, 0	; 0
  d2:	23 c0       	rjmp	.+70     	; 0x11a <GetKeypadKey+0x7c>
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
  d4:	01 9b       	sbis	0x00, 1	; 0
  d6:	23 c0       	rjmp	.+70     	; 0x11e <GetKeypadKey+0x80>
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
  d8:	02 9b       	sbis	0x00, 2	; 0
  da:	23 c0       	rjmp	.+70     	; 0x122 <GetKeypadKey+0x84>
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
  dc:	03 9b       	sbis	0x00, 3	; 0
  de:	23 c0       	rjmp	.+70     	; 0x126 <GetKeypadKey+0x88>
	
	KEYPADPORT = 0x7F;
  e0:	8f e7       	ldi	r24, 0x7F	; 127
  e2:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
  e4:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
  e6:	00 9b       	sbis	0x00, 0	; 0
  e8:	20 c0       	rjmp	.+64     	; 0x12a <GetKeypadKey+0x8c>
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
  ea:	01 9b       	sbis	0x00, 1	; 0
  ec:	20 c0       	rjmp	.+64     	; 0x12e <GetKeypadKey+0x90>
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
  ee:	02 9b       	sbis	0x00, 2	; 0
  f0:	20 c0       	rjmp	.+64     	; 0x132 <GetKeypadKey+0x94>
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
  f2:	03 99       	sbic	0x00, 3	; 0
  f4:	20 c0       	rjmp	.+64     	; 0x136 <GetKeypadKey+0x98>
  f6:	84 e4       	ldi	r24, 0x44	; 68
  f8:	08 95       	ret

unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
  fa:	81 e3       	ldi	r24, 0x31	; 49
  fc:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
  fe:	84 e3       	ldi	r24, 0x34	; 52
 100:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
 102:	87 e3       	ldi	r24, 0x37	; 55
 104:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
 106:	8a e2       	ldi	r24, 0x2A	; 42
 108:	08 95       	ret
	
	KEYPADPORT = 0xDF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
 10a:	82 e3       	ldi	r24, 0x32	; 50
 10c:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
 10e:	85 e3       	ldi	r24, 0x35	; 53
 110:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
 116:	80 e3       	ldi	r24, 0x30	; 48
 118:	08 95       	ret

	KEYPADPORT = 0xBF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
 11a:	83 e3       	ldi	r24, 0x33	; 51
 11c:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
 11e:	86 e3       	ldi	r24, 0x36	; 54
 120:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
 122:	89 e3       	ldi	r24, 0x39	; 57
 124:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
 126:	83 e2       	ldi	r24, 0x23	; 35
 128:	08 95       	ret
	
	KEYPADPORT = 0x7F;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
 12e:	82 e4       	ldi	r24, 0x42	; 66
 130:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
 132:	83 e4       	ldi	r24, 0x43	; 67
 134:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
	
	
	return '\0';
 136:	80 e0       	ldi	r24, 0x00	; 0
}
 138:	08 95       	ret

0000013a <main>:

enum EEPROM_Addresses {First, Second, Third, Fourth};
	
int main(void)
{
	DDRA = 0xF0; PORTA = 0x0F;
 13a:	80 ef       	ldi	r24, 0xF0	; 240
 13c:	81 b9       	out	0x01, r24	; 1
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	84 b9       	out	0x04, r24	; 4
 146:	15 b8       	out	0x05, r1	; 5
					PORTB = 0x01;
				}
				break;
			case '2':
				if(eeprom_read_byte((uint8_t*)Second) == 'B'){
					PORTB = 0x02;
 148:	02 e0       	ldi	r16, 0x02	; 2
				}
				break;
			case '3':
				if(eeprom_read_byte((uint8_t*)Third) == 'C'){
					PORTB = 0x04;
 14a:	14 e0       	ldi	r17, 0x04	; 4
    {
        bInput = GetKeypadKey();
		switch(bInput){
			case '1':
				if(eeprom_read_byte((uint8_t*)First) == 'A'){
					PORTB = 0x01;
 14c:	d1 e0       	ldi	r29, 0x01	; 1
					PORTB = 0x04;
				}
				break;
			case '4':
				if(eeprom_read_byte((uint8_t*)Fourth) == 'D'){
					PORTB = 0x08;
 14e:	c8 e0       	ldi	r28, 0x08	; 8
	DDRA = 0xF0; PORTA = 0x0F;
	DDRB = 0xFF; PORTB = 0x00;
	unsigned char bInput;
    while(1)
    {
        bInput = GetKeypadKey();
 150:	a6 df       	rcall	.-180    	; 0x9e <GetKeypadKey>
		switch(bInput){
 152:	84 33       	cpi	r24, 0x34	; 52
 154:	41 f1       	breq	.+80     	; 0x1a6 <main+0x6c>
 156:	38 f4       	brcc	.+14     	; 0x166 <main+0x2c>
 158:	82 33       	cpi	r24, 0x32	; 50
 15a:	b9 f0       	breq	.+46     	; 0x18a <main+0x50>
 15c:	e8 f4       	brcc	.+58     	; 0x198 <main+0x5e>
 15e:	81 33       	cpi	r24, 0x31	; 49
 160:	09 f0       	breq	.+2      	; 0x164 <main+0x2a>
 162:	3c c0       	rjmp	.+120    	; 0x1dc <main+0xa2>
 164:	0b c0       	rjmp	.+22     	; 0x17c <main+0x42>
 166:	82 34       	cpi	r24, 0x42	; 66
 168:	51 f1       	breq	.+84     	; 0x1be <main+0x84>
 16a:	18 f4       	brcc	.+6      	; 0x172 <main+0x38>
 16c:	81 34       	cpi	r24, 0x41	; 65
 16e:	b1 f5       	brne	.+108    	; 0x1dc <main+0xa2>
 170:	21 c0       	rjmp	.+66     	; 0x1b4 <main+0x7a>
 172:	83 34       	cpi	r24, 0x43	; 67
 174:	49 f1       	breq	.+82     	; 0x1c8 <main+0x8e>
 176:	84 34       	cpi	r24, 0x44	; 68
 178:	89 f5       	brne	.+98     	; 0x1dc <main+0xa2>
 17a:	2b c0       	rjmp	.+86     	; 0x1d2 <main+0x98>
			case '1':
				if(eeprom_read_byte((uint8_t*)First) == 'A'){
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	2f d0       	rcall	.+94     	; 0x1e0 <__eerd_byte_m1284>
 182:	81 34       	cpi	r24, 0x41	; 65
 184:	29 f7       	brne	.-54     	; 0x150 <main+0x16>
					PORTB = 0x01;
 186:	d5 b9       	out	0x05, r29	; 5
 188:	e3 cf       	rjmp	.-58     	; 0x150 <main+0x16>
				}
				break;
			case '2':
				if(eeprom_read_byte((uint8_t*)Second) == 'B'){
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	28 d0       	rcall	.+80     	; 0x1e0 <__eerd_byte_m1284>
 190:	82 34       	cpi	r24, 0x42	; 66
 192:	f1 f6       	brne	.-68     	; 0x150 <main+0x16>
					PORTB = 0x02;
 194:	05 b9       	out	0x05, r16	; 5
 196:	dc cf       	rjmp	.-72     	; 0x150 <main+0x16>
				}
				break;
			case '3':
				if(eeprom_read_byte((uint8_t*)Third) == 'C'){
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	21 d0       	rcall	.+66     	; 0x1e0 <__eerd_byte_m1284>
 19e:	83 34       	cpi	r24, 0x43	; 67
 1a0:	b9 f6       	brne	.-82     	; 0x150 <main+0x16>
					PORTB = 0x04;
 1a2:	15 b9       	out	0x05, r17	; 5
 1a4:	d5 cf       	rjmp	.-86     	; 0x150 <main+0x16>
				}
				break;
			case '4':
				if(eeprom_read_byte((uint8_t*)Fourth) == 'D'){
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	1a d0       	rcall	.+52     	; 0x1e0 <__eerd_byte_m1284>
 1ac:	84 34       	cpi	r24, 0x44	; 68
 1ae:	81 f6       	brne	.-96     	; 0x150 <main+0x16>
					PORTB = 0x08;
 1b0:	c5 b9       	out	0x05, r28	; 5
 1b2:	ce cf       	rjmp	.-100    	; 0x150 <main+0x16>
				}
				break;
			case 'A':
				eeprom_write_byte((uint8_t*)First, 'A');
 1b4:	61 e4       	ldi	r22, 0x41	; 65
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	1a d0       	rcall	.+52     	; 0x1f0 <__eewr_byte_m1284>
				break;
 1bc:	c9 cf       	rjmp	.-110    	; 0x150 <main+0x16>
			case 'B':
				eeprom_write_byte((uint8_t*)Second, 'B');
 1be:	62 e4       	ldi	r22, 0x42	; 66
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	15 d0       	rcall	.+42     	; 0x1f0 <__eewr_byte_m1284>
				break;
 1c6:	c4 cf       	rjmp	.-120    	; 0x150 <main+0x16>
			case 'C':
				eeprom_write_byte((uint8_t*)Third, 'C');
 1c8:	63 e4       	ldi	r22, 0x43	; 67
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	10 d0       	rcall	.+32     	; 0x1f0 <__eewr_byte_m1284>
				break;
 1d0:	bf cf       	rjmp	.-130    	; 0x150 <main+0x16>
			case 'D':
				eeprom_write_byte((uint8_t*)Fourth, 'D');
 1d2:	64 e4       	ldi	r22, 0x44	; 68
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0b d0       	rcall	.+22     	; 0x1f0 <__eewr_byte_m1284>
				break;
 1da:	ba cf       	rjmp	.-140    	; 0x150 <main+0x16>
			default:
				PORTB = 0x00;
 1dc:	15 b8       	out	0x05, r1	; 5
				break;	
 1de:	b8 cf       	rjmp	.-144    	; 0x150 <main+0x16>

000001e0 <__eerd_byte_m1284>:
 1e0:	f9 99       	sbic	0x1f, 1	; 31
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <__eerd_byte_m1284>
 1e4:	92 bd       	out	0x22, r25	; 34
 1e6:	81 bd       	out	0x21, r24	; 33
 1e8:	f8 9a       	sbi	0x1f, 0	; 31
 1ea:	99 27       	eor	r25, r25
 1ec:	80 b5       	in	r24, 0x20	; 32
 1ee:	08 95       	ret

000001f0 <__eewr_byte_m1284>:
 1f0:	26 2f       	mov	r18, r22

000001f2 <__eewr_r18_m1284>:
 1f2:	f9 99       	sbic	0x1f, 1	; 31
 1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <__eewr_r18_m1284>
 1f6:	1f ba       	out	0x1f, r1	; 31
 1f8:	92 bd       	out	0x22, r25	; 34
 1fa:	81 bd       	out	0x21, r24	; 33
 1fc:	20 bd       	out	0x20, r18	; 32
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	fa 9a       	sbi	0x1f, 2	; 31
 204:	f9 9a       	sbi	0x1f, 1	; 31
 206:	0f be       	out	0x3f, r0	; 63
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
