
Module_Alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  0000125e  000012f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000125e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  0080014c  0080014c  0000133e  2**0
                  ALLOC
  3 .stab         00001d70  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008bf  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000396f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  0000399e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001060  00000000  00000000  00003ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000046d  00000000  00000000  00004b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000fc2  00000000  00000000  00004f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f8  00000000  00000000  00005f60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000add  00000000  00000000  00006258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b03  00000000  00000000  00006d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000110  00000000  00000000  00007838  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	78 c0       	rjmp	.+240    	; 0xf2 <__ctors_end>
       2:	00 00       	nop
       4:	94 c0       	rjmp	.+296    	; 0x12e <__bad_interrupt>
       6:	00 00       	nop
       8:	92 c0       	rjmp	.+292    	; 0x12e <__bad_interrupt>
       a:	00 00       	nop
       c:	90 c0       	rjmp	.+288    	; 0x12e <__bad_interrupt>
       e:	00 00       	nop
      10:	8e c0       	rjmp	.+284    	; 0x12e <__bad_interrupt>
      12:	00 00       	nop
      14:	8c c0       	rjmp	.+280    	; 0x12e <__bad_interrupt>
      16:	00 00       	nop
      18:	8a c0       	rjmp	.+276    	; 0x12e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	88 c0       	rjmp	.+272    	; 0x12e <__bad_interrupt>
      1e:	00 00       	nop
      20:	86 c0       	rjmp	.+268    	; 0x12e <__bad_interrupt>
      22:	00 00       	nop
      24:	84 c0       	rjmp	.+264    	; 0x12e <__bad_interrupt>
      26:	00 00       	nop
      28:	82 c0       	rjmp	.+260    	; 0x12e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	80 c0       	rjmp	.+256    	; 0x12e <__bad_interrupt>
      2e:	00 00       	nop
      30:	7e c0       	rjmp	.+252    	; 0x12e <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c1       	rjmp	.+750    	; 0x324 <__vector_13>
      36:	00 00       	nop
      38:	7a c0       	rjmp	.+244    	; 0x12e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	78 c0       	rjmp	.+240    	; 0x12e <__bad_interrupt>
      3e:	00 00       	nop
      40:	76 c0       	rjmp	.+236    	; 0x12e <__bad_interrupt>
      42:	00 00       	nop
      44:	74 c0       	rjmp	.+232    	; 0x12e <__bad_interrupt>
      46:	00 00       	nop
      48:	72 c0       	rjmp	.+228    	; 0x12e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	70 c0       	rjmp	.+224    	; 0x12e <__bad_interrupt>
      4e:	00 00       	nop
      50:	6e c0       	rjmp	.+220    	; 0x12e <__bad_interrupt>
      52:	00 00       	nop
      54:	6c c0       	rjmp	.+216    	; 0x12e <__bad_interrupt>
      56:	00 00       	nop
      58:	6a c0       	rjmp	.+212    	; 0x12e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	68 c0       	rjmp	.+208    	; 0x12e <__bad_interrupt>
      5e:	00 00       	nop
      60:	66 c0       	rjmp	.+204    	; 0x12e <__bad_interrupt>
      62:	00 00       	nop
      64:	64 c0       	rjmp	.+200    	; 0x12e <__bad_interrupt>
      66:	00 00       	nop
      68:	62 c0       	rjmp	.+196    	; 0x12e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	60 c0       	rjmp	.+192    	; 0x12e <__bad_interrupt>
      6e:	00 00       	nop
      70:	5e c0       	rjmp	.+188    	; 0x12e <__bad_interrupt>
      72:	00 00       	nop
      74:	5c c0       	rjmp	.+184    	; 0x12e <__bad_interrupt>
      76:	00 00       	nop
      78:	5a c0       	rjmp	.+180    	; 0x12e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	58 c0       	rjmp	.+176    	; 0x12e <__bad_interrupt>
      7e:	00 00       	nop
      80:	56 c0       	rjmp	.+172    	; 0x12e <__bad_interrupt>
      82:	00 00       	nop
      84:	54 c0       	rjmp	.+168    	; 0x12e <__bad_interrupt>
      86:	00 00       	nop
      88:	52 c0       	rjmp	.+164    	; 0x12e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ba 03       	fmulsu	r19, r18
      8e:	dd 03       	fmulsu	r21, r21
      90:	cf 03       	fmulsu	r20, r23
      92:	e3 03       	fmuls	r22, r19
      94:	e9 03       	fmulsu	r22, r17
      96:	f1 03       	fmuls	r23, r17
      98:	11 04       	cpc	r1, r1
      9a:	02 04       	cpc	r0, r2
      9c:	17 04       	cpc	r1, r7
      9e:	1d 04       	cpc	r1, r13
      a0:	25 04       	cpc	r2, r5
      a2:	36 04       	cpc	r3, r6
      a4:	30 04       	cpc	r3, r0
      a6:	a0 04       	cpc	r10, r0
      a8:	d7 04       	cpc	r13, r7
      aa:	4d 04       	cpc	r4, r13
      ac:	78 04       	cpc	r7, r8
      ae:	72 04       	cpc	r7, r2
      b0:	9a 04       	cpc	r9, r10
      b2:	a6 04       	cpc	r10, r6
      b4:	b6 04       	cpc	r11, r6
      b6:	c9 04       	cpc	r12, r9
      b8:	b0 04       	cpc	r11, r0
      ba:	c4 04       	cpc	r12, r4
      bc:	d2 04       	cpc	r13, r2
      be:	1f 06       	cpc	r1, r31
      c0:	fb 05       	cpc	r31, r11
      c2:	00 06       	cpc	r0, r16
      c4:	fb 05       	cpc	r31, r11
      c6:	00 06       	cpc	r0, r16
      c8:	1f 06       	cpc	r1, r31
      ca:	06 06       	cpc	r0, r22
      cc:	0b 06       	cpc	r0, r27
      ce:	06 06       	cpc	r0, r22
      d0:	0b 06       	cpc	r0, r27
      d2:	1f 06       	cpc	r1, r31
      d4:	10 06       	cpc	r1, r16
      d6:	15 06       	cpc	r1, r21
      d8:	10 06       	cpc	r1, r16
      da:	15 06       	cpc	r1, r21
      dc:	1f 06       	cpc	r1, r31
      de:	15 06       	cpc	r1, r21
      e0:	15 06       	cpc	r1, r21
      e2:	15 06       	cpc	r1, r21
      e4:	15 06       	cpc	r1, r21
      e6:	1f 06       	cpc	r1, r31
      e8:	1f 06       	cpc	r1, r31
      ea:	1f 06       	cpc	r1, r31
      ec:	1f 06       	cpc	r1, r31
      ee:	1f 06       	cpc	r1, r31
      f0:	1f 06       	cpc	r1, r31

000000f2 <__ctors_end>:
      f2:	11 24       	eor	r1, r1
      f4:	1f be       	out	0x3f, r1	; 63
      f6:	cf ef       	ldi	r28, 0xFF	; 255
      f8:	d0 e4       	ldi	r29, 0x40	; 64
      fa:	de bf       	out	0x3e, r29	; 62
      fc:	cd bf       	out	0x3d, r28	; 61

000000fe <__do_copy_data>:
      fe:	11 e0       	ldi	r17, 0x01	; 1
     100:	a0 e0       	ldi	r26, 0x00	; 0
     102:	b1 e0       	ldi	r27, 0x01	; 1
     104:	ee e5       	ldi	r30, 0x5E	; 94
     106:	f2 e1       	ldi	r31, 0x12	; 18
     108:	00 e0       	ldi	r16, 0x00	; 0
     10a:	0b bf       	out	0x3b, r16	; 59
     10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x14>
     10e:	07 90       	elpm	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	ac 34       	cpi	r26, 0x4C	; 76
     114:	b1 07       	cpc	r27, r17
     116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0x10>

00000118 <__do_clear_bss>:
     118:	21 e0       	ldi	r18, 0x01	; 1
     11a:	ac e4       	ldi	r26, 0x4C	; 76
     11c:	b1 e0       	ldi	r27, 0x01	; 1
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	ae 3e       	cpi	r26, 0xEE	; 238
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
     128:	be d5       	rcall	.+2940   	; 0xca6 <main>
     12a:	0c 94 2d 09 	jmp	0x125a	; 0x125a <_exit>

0000012e <__bad_interrupt>:
     12e:	68 cf       	rjmp	.-304    	; 0x0 <__vectors>

00000130 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     130:	18 16       	cp	r1, r24
     132:	19 06       	cpc	r1, r25
     134:	5c f0       	brlt	.+22     	; 0x14c <delay_ms+0x1c>
     136:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
     138:	00 00       	nop
     13a:	21 50       	subi	r18, 0x01	; 1
     13c:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
     13e:	e1 f7       	brne	.-8      	; 0x138 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     140:	4f 5f       	subi	r20, 0xFF	; 255
     142:	5f 4f       	sbci	r21, 0xFF	; 255
     144:	48 17       	cp	r20, r24
     146:	59 07       	cpc	r21, r25
     148:	29 f4       	brne	.+10     	; 0x154 <delay_ms+0x24>
     14a:	08 95       	ret
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	50 e0       	ldi	r21, 0x00	; 0



void delay_ms(int miliSec) //for 8 Mhz crystal

{
     150:	67 e0       	ldi	r22, 0x07	; 7
     152:	73 e0       	ldi	r23, 0x03	; 3
     154:	9b 01       	movw	r18, r22
     156:	f0 cf       	rjmp	.-32     	; 0x138 <delay_ms+0x8>

00000158 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
     158:	5e 9a       	sbi	0x0b, 6	; 11
   DATA_BUS = Data;
     15a:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
     15c:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
     15e:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     160:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	e4 cf       	rjmp	.-56     	; 0x130 <delay_ms>

00000168 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
     168:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
     16a:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
     16c:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
     16e:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     170:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	dc cf       	rjmp	.-72     	; 0x130 <delay_ms>

00000178 <LCD_Cursor>:
   asm("nop");
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}	
void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x1 LCD: column < 9
     178:	81 31       	cpi	r24, 0x11	; 17
     17a:	10 f4       	brcc	.+4      	; 0x180 <LCD_Cursor+0x8>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
     17c:	81 58       	subi	r24, 0x81	; 129
     17e:	f4 cf       	rjmp	.-24     	; 0x168 <LCD_WriteCommand>
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     180:	81 55       	subi	r24, 0x51	; 81
     182:	f2 cf       	rjmp	.-28     	; 0x168 <LCD_WriteCommand>

00000184 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	f0 cf       	rjmp	.-32     	; 0x168 <LCD_WriteCommand>

00000188 <LCD_DisplayString>:
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
		// 16x2 LCD: column - 9
	}
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	18 2f       	mov	r17, r24
     190:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
     192:	f8 df       	rcall	.-16     	; 0x184 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
     194:	98 81       	ld	r25, Y
     196:	99 23       	and	r25, r25
     198:	51 f0       	breq	.+20     	; 0x1ae <LCD_DisplayString+0x26>
		// 16x2 LCD: column - 9
	}
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
     19a:	81 2f       	mov	r24, r17
   while(*string) {
      LCD_Cursor(c++);
     19c:	18 2f       	mov	r17, r24
     19e:	1f 5f       	subi	r17, 0xFF	; 255
     1a0:	eb df       	rcall	.-42     	; 0x178 <LCD_Cursor>
      LCD_WriteData(*string++);
     1a2:	89 91       	ld	r24, Y+
     1a4:	d9 df       	rcall	.-78     	; 0x158 <LCD_WriteData>
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
     1a6:	81 2f       	mov	r24, r17
	}
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
     1a8:	98 81       	ld	r25, Y
     1aa:	91 11       	cpse	r25, r1
     1ac:	f7 cf       	rjmp	.-18     	; 0x19c <LCD_DisplayString+0x14>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
	LCD_Cursor(32);
     1ae:	80 e2       	ldi	r24, 0x20	; 32
     1b0:	e3 df       	rcall	.-58     	; 0x178 <LCD_Cursor>
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	08 95       	ret

000001ba <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
     1ba:	84 e6       	ldi	r24, 0x64	; 100
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	b8 df       	rcall	.-144    	; 0x130 <delay_ms>
	LCD_WriteCommand(0x38);
     1c0:	88 e3       	ldi	r24, 0x38	; 56
     1c2:	d2 df       	rcall	.-92     	; 0x168 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
     1c4:	86 e0       	ldi	r24, 0x06	; 6
     1c6:	d0 df       	rcall	.-96     	; 0x168 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
     1c8:	8f e0       	ldi	r24, 0x0F	; 15
     1ca:	ce df       	rcall	.-100    	; 0x168 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	cc df       	rcall	.-104    	; 0x168 <LCD_WriteCommand>
	delay_ms(10);						 
     1d0:	8a e0       	ldi	r24, 0x0A	; 10
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	ad cf       	rjmp	.-166    	; 0x130 <delay_ms>

000001d6 <TimeCrunchSMTick>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
     1d6:	88 23       	and	r24, r24
     1d8:	71 f0       	breq	.+28     	; 0x1f6 <TimeCrunchSMTick+0x20>
     1da:	8b e0       	ldi	r24, 0x0B	; 11
     1dc:	80 93 d4 01 	sts	0x01D4, r24
     1e0:	8a e3       	ldi	r24, 0x3A	; 58
     1e2:	80 93 d5 01 	sts	0x01D5, r24
     1e6:	82 e3       	ldi	r24, 0x32	; 50
     1e8:	80 93 d6 01 	sts	0x01D6, r24
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	80 93 d7 01 	sts	0x01D7, r24
     1f2:	10 92 91 01 	sts	0x0191, r1
     1f6:	80 91 d6 01 	lds	r24, 0x01D6
     1fa:	8b 33       	cpi	r24, 0x3B	; 59
     1fc:	31 f5       	brne	.+76     	; 0x24a <TimeCrunchSMTick+0x74>
     1fe:	80 91 d5 01 	lds	r24, 0x01D5
     202:	8b 33       	cpi	r24, 0x3B	; 59
     204:	c9 f4       	brne	.+50     	; 0x238 <TimeCrunchSMTick+0x62>
     206:	80 91 d4 01 	lds	r24, 0x01D4
     20a:	8b 30       	cpi	r24, 0x0B	; 11
     20c:	51 f4       	brne	.+20     	; 0x222 <TimeCrunchSMTick+0x4c>
     20e:	90 91 d7 01 	lds	r25, 0x01D7
     212:	99 23       	and	r25, r25
     214:	11 f0       	breq	.+4      	; 0x21a <TimeCrunchSMTick+0x44>
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	01 c0       	rjmp	.+2      	; 0x21c <TimeCrunchSMTick+0x46>
     21a:	9f ef       	ldi	r25, 0xFF	; 255
     21c:	90 93 d7 01 	sts	0x01D7, r25
     220:	05 c0       	rjmp	.+10     	; 0x22c <TimeCrunchSMTick+0x56>
     222:	8c 30       	cpi	r24, 0x0C	; 12
     224:	19 f4       	brne	.+6      	; 0x22c <TimeCrunchSMTick+0x56>
     226:	10 92 d4 01 	sts	0x01D4, r1
     22a:	03 c0       	rjmp	.+6      	; 0x232 <TimeCrunchSMTick+0x5c>
     22c:	8f 5f       	subi	r24, 0xFF	; 255
     22e:	80 93 d4 01 	sts	0x01D4, r24
     232:	10 92 d5 01 	sts	0x01D5, r1
     236:	03 c0       	rjmp	.+6      	; 0x23e <TimeCrunchSMTick+0x68>
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	80 93 d5 01 	sts	0x01D5, r24
     23e:	8f ef       	ldi	r24, 0xFF	; 255
     240:	80 93 91 01 	sts	0x0191, r24
     244:	10 92 d6 01 	sts	0x01D6, r1
     248:	03 c0       	rjmp	.+6      	; 0x250 <TimeCrunchSMTick+0x7a>
     24a:	8f 5f       	subi	r24, 0xFF	; 255
     24c:	80 93 d6 01 	sts	0x01D6, r24
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	08 95       	ret

00000254 <findGCD>:
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	b6 2f       	mov	r27, r22
     25e:	a7 2f       	mov	r26, r23
     260:	f8 2f       	mov	r31, r24
     262:	e9 2f       	mov	r30, r25
     264:	02 2f       	mov	r16, r18
     266:	13 2f       	mov	r17, r19
     268:	d4 2f       	mov	r29, r20
     26a:	c5 2f       	mov	r28, r21
     26c:	04 c0       	rjmp	.+8      	; 0x276 <findGCD+0x22>
     26e:	05 2f       	mov	r16, r21
     270:	14 2f       	mov	r17, r20
     272:	d3 2f       	mov	r29, r19
     274:	c2 2f       	mov	r28, r18
     276:	6b 2f       	mov	r22, r27
     278:	7a 2f       	mov	r23, r26
     27a:	8f 2f       	mov	r24, r31
     27c:	9e 2f       	mov	r25, r30
     27e:	20 2f       	mov	r18, r16
     280:	31 2f       	mov	r19, r17
     282:	4d 2f       	mov	r20, r29
     284:	5c 2f       	mov	r21, r28
     286:	97 d7       	rcall	.+3886   	; 0x11b6 <__udivmodsi4>
     288:	b0 2f       	mov	r27, r16
     28a:	a1 2f       	mov	r26, r17
     28c:	fd 2f       	mov	r31, r29
     28e:	ec 2f       	mov	r30, r28
     290:	56 2f       	mov	r21, r22
     292:	47 2f       	mov	r20, r23
     294:	38 2f       	mov	r19, r24
     296:	29 2f       	mov	r18, r25
     298:	67 2b       	or	r22, r23
     29a:	68 2b       	or	r22, r24
     29c:	69 2b       	or	r22, r25
     29e:	39 f7       	brne	.-50     	; 0x26e <findGCD+0x1a>
     2a0:	60 2f       	mov	r22, r16
     2a2:	71 2f       	mov	r23, r17
     2a4:	8d 2f       	mov	r24, r29
     2a6:	9c 2f       	mov	r25, r28
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	1f 91       	pop	r17
     2ae:	0f 91       	pop	r16
     2b0:	08 95       	ret

000002b2 <TimerSet>:
     2b2:	60 93 00 01 	sts	0x0100, r22
     2b6:	70 93 01 01 	sts	0x0101, r23
     2ba:	80 93 02 01 	sts	0x0102, r24
     2be:	90 93 03 01 	sts	0x0103, r25
     2c2:	60 93 4c 01 	sts	0x014C, r22
     2c6:	70 93 4d 01 	sts	0x014D, r23
     2ca:	80 93 4e 01 	sts	0x014E, r24
     2ce:	90 93 4f 01 	sts	0x014F, r25
     2d2:	08 95       	ret

000002d4 <TimerOn>:
     2d4:	8b e0       	ldi	r24, 0x0B	; 11
     2d6:	80 93 81 00 	sts	0x0081, r24
     2da:	8d e7       	ldi	r24, 0x7D	; 125
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	90 93 89 00 	sts	0x0089, r25
     2e2:	80 93 88 00 	sts	0x0088, r24
     2e6:	82 e0       	ldi	r24, 0x02	; 2
     2e8:	80 93 6f 00 	sts	0x006F, r24
     2ec:	10 92 85 00 	sts	0x0085, r1
     2f0:	10 92 84 00 	sts	0x0084, r1
     2f4:	80 91 00 01 	lds	r24, 0x0100
     2f8:	90 91 01 01 	lds	r25, 0x0101
     2fc:	a0 91 02 01 	lds	r26, 0x0102
     300:	b0 91 03 01 	lds	r27, 0x0103
     304:	80 93 4c 01 	sts	0x014C, r24
     308:	90 93 4d 01 	sts	0x014D, r25
     30c:	a0 93 4e 01 	sts	0x014E, r26
     310:	b0 93 4f 01 	sts	0x014F, r27
     314:	8f b7       	in	r24, 0x3f	; 63
     316:	80 68       	ori	r24, 0x80	; 128
     318:	8f bf       	out	0x3f, r24	; 63
     31a:	08 95       	ret

0000031c <TimerISR>:
}

void TimerISR() {
	TimerFlag = 1;
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	80 93 50 01 	sts	0x0150, r24
     322:	08 95       	ret

00000324 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	0b b6       	in	r0, 0x3b	; 59
     330:	0f 92       	push	r0
     332:	2f 93       	push	r18
     334:	3f 93       	push	r19
     336:	4f 93       	push	r20
     338:	5f 93       	push	r21
     33a:	6f 93       	push	r22
     33c:	7f 93       	push	r23
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	af 93       	push	r26
     344:	bf 93       	push	r27
     346:	ef 93       	push	r30
     348:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     34a:	80 91 4c 01 	lds	r24, 0x014C
     34e:	90 91 4d 01 	lds	r25, 0x014D
     352:	a0 91 4e 01 	lds	r26, 0x014E
     356:	b0 91 4f 01 	lds	r27, 0x014F
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	a1 09       	sbc	r26, r1
     35e:	b1 09       	sbc	r27, r1
     360:	80 93 4c 01 	sts	0x014C, r24
     364:	90 93 4d 01 	sts	0x014D, r25
     368:	a0 93 4e 01 	sts	0x014E, r26
     36c:	b0 93 4f 01 	sts	0x014F, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     370:	89 2b       	or	r24, r25
     372:	8a 2b       	or	r24, r26
     374:	8b 2b       	or	r24, r27
     376:	89 f4       	brne	.+34     	; 0x39a <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
     378:	d1 df       	rcall	.-94     	; 0x31c <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     37a:	80 91 00 01 	lds	r24, 0x0100
     37e:	90 91 01 01 	lds	r25, 0x0101
     382:	a0 91 02 01 	lds	r26, 0x0102
     386:	b0 91 03 01 	lds	r27, 0x0103
     38a:	80 93 4c 01 	sts	0x014C, r24
     38e:	90 93 4d 01 	sts	0x014D, r25
     392:	a0 93 4e 01 	sts	0x014E, r26
     396:	b0 93 4f 01 	sts	0x014F, r27
	}
}
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	bf 91       	pop	r27
     3a0:	af 91       	pop	r26
     3a2:	9f 91       	pop	r25
     3a4:	8f 91       	pop	r24
     3a6:	7f 91       	pop	r23
     3a8:	6f 91       	pop	r22
     3aa:	5f 91       	pop	r21
     3ac:	4f 91       	pop	r20
     3ae:	3f 91       	pop	r19
     3b0:	2f 91       	pop	r18
     3b2:	0f 90       	pop	r0
     3b4:	0b be       	out	0x3b, r0	; 59
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <GetKeypadKey>:
#define KEYPADPORT PORTA


unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
     3c0:	8f ee       	ldi	r24, 0xEF	; 239
     3c2:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
     3c4:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
     3c6:	00 9b       	sbis	0x00, 0	; 0
     3c8:	29 c0       	rjmp	.+82     	; 0x41c <GetKeypadKey+0x5c>
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
     3ca:	01 9b       	sbis	0x00, 1	; 0
     3cc:	29 c0       	rjmp	.+82     	; 0x420 <GetKeypadKey+0x60>
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
     3ce:	02 9b       	sbis	0x00, 2	; 0
     3d0:	29 c0       	rjmp	.+82     	; 0x424 <GetKeypadKey+0x64>
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
     3d2:	03 9b       	sbis	0x00, 3	; 0
     3d4:	29 c0       	rjmp	.+82     	; 0x428 <GetKeypadKey+0x68>
	
	KEYPADPORT = 0xDF;
     3d6:	8f ed       	ldi	r24, 0xDF	; 223
     3d8:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
     3da:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
     3dc:	00 9b       	sbis	0x00, 0	; 0
     3de:	26 c0       	rjmp	.+76     	; 0x42c <GetKeypadKey+0x6c>
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
     3e0:	01 9b       	sbis	0x00, 1	; 0
     3e2:	26 c0       	rjmp	.+76     	; 0x430 <GetKeypadKey+0x70>
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
     3e4:	02 9b       	sbis	0x00, 2	; 0
     3e6:	26 c0       	rjmp	.+76     	; 0x434 <GetKeypadKey+0x74>
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
     3e8:	03 9b       	sbis	0x00, 3	; 0
     3ea:	26 c0       	rjmp	.+76     	; 0x438 <GetKeypadKey+0x78>

	KEYPADPORT = 0xBF;
     3ec:	8f eb       	ldi	r24, 0xBF	; 191
     3ee:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
     3f0:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
     3f2:	00 9b       	sbis	0x00, 0	; 0
     3f4:	23 c0       	rjmp	.+70     	; 0x43c <GetKeypadKey+0x7c>
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
     3f6:	01 9b       	sbis	0x00, 1	; 0
     3f8:	23 c0       	rjmp	.+70     	; 0x440 <GetKeypadKey+0x80>
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
     3fa:	02 9b       	sbis	0x00, 2	; 0
     3fc:	23 c0       	rjmp	.+70     	; 0x444 <GetKeypadKey+0x84>
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
     3fe:	03 9b       	sbis	0x00, 3	; 0
     400:	23 c0       	rjmp	.+70     	; 0x448 <GetKeypadKey+0x88>
	
	KEYPADPORT = 0x7F;
     402:	8f e7       	ldi	r24, 0x7F	; 127
     404:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
     406:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
     408:	00 9b       	sbis	0x00, 0	; 0
     40a:	20 c0       	rjmp	.+64     	; 0x44c <GetKeypadKey+0x8c>
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
     40c:	01 9b       	sbis	0x00, 1	; 0
     40e:	20 c0       	rjmp	.+64     	; 0x450 <GetKeypadKey+0x90>
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
     410:	02 9b       	sbis	0x00, 2	; 0
     412:	20 c0       	rjmp	.+64     	; 0x454 <GetKeypadKey+0x94>
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
     414:	03 99       	sbic	0x00, 3	; 0
     416:	20 c0       	rjmp	.+64     	; 0x458 <GetKeypadKey+0x98>
     418:	84 e4       	ldi	r24, 0x44	; 68
     41a:	08 95       	ret

unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
     41c:	81 e3       	ldi	r24, 0x31	; 49
     41e:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
     420:	84 e3       	ldi	r24, 0x34	; 52
     422:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
     424:	87 e3       	ldi	r24, 0x37	; 55
     426:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
     428:	8a e2       	ldi	r24, 0x2A	; 42
     42a:	08 95       	ret
	
	KEYPADPORT = 0xDF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
     42c:	82 e3       	ldi	r24, 0x32	; 50
     42e:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
     430:	85 e3       	ldi	r24, 0x35	; 53
     432:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
     434:	88 e3       	ldi	r24, 0x38	; 56
     436:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
     438:	80 e3       	ldi	r24, 0x30	; 48
     43a:	08 95       	ret

	KEYPADPORT = 0xBF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
     43c:	83 e3       	ldi	r24, 0x33	; 51
     43e:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
     440:	86 e3       	ldi	r24, 0x36	; 54
     442:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
     444:	89 e3       	ldi	r24, 0x39	; 57
     446:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
     448:	83 e2       	ldi	r24, 0x23	; 35
     44a:	08 95       	ret
	
	KEYPADPORT = 0x7F;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
     44c:	81 e4       	ldi	r24, 0x41	; 65
     44e:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
     450:	82 e4       	ldi	r24, 0x42	; 66
     452:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
     454:	83 e4       	ldi	r24, 0x43	; 67
     456:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
	
	
	return '\0';
     458:	80 e0       	ldi	r24, 0x00	; 0
}
     45a:	08 95       	ret

0000045c <UpdateInputSMTick>:
	Inputs: PORTA -> Keypad
	Outputs: keyPadInput */
signed char UpdateInputSMTick (signed char state){
	state = UpdateInput_update;
	// Keypad Keys ============================================================================================================
	unsigned char tmpKeypadInput = GetKeypadKey();
     45c:	b1 df       	rcall	.-158    	; 0x3c0 <GetKeypadKey>
	// Process Menu Input keys : A B C D * #
	if(tmpKeypadInput == 'A' || tmpKeypadInput == 'B' || tmpKeypadInput == 'C' || tmpKeypadInput == 'D'
     45e:	98 2f       	mov	r25, r24
     460:	91 54       	subi	r25, 0x41	; 65
     462:	94 30       	cpi	r25, 0x04	; 4
     464:	30 f0       	brcs	.+12     	; 0x472 <UpdateInputSMTick+0x16>
		|| tmpKeypadInput == '#' || tmpKeypadInput == '*' || tmpKeypadInput == '0' ){
     466:	83 32       	cpi	r24, 0x23	; 35
     468:	21 f0       	breq	.+8      	; 0x472 <UpdateInputSMTick+0x16>
     46a:	8a 32       	cpi	r24, 0x2A	; 42
     46c:	11 f0       	breq	.+4      	; 0x472 <UpdateInputSMTick+0x16>
     46e:	80 33       	cpi	r24, 0x30	; 48
     470:	19 f4       	brne	.+6      	; 0x478 <UpdateInputSMTick+0x1c>
		menuNavigationInput = tmpKeypadInput;
     472:	80 93 d2 01 	sts	0x01D2, r24
     476:	02 c0       	rjmp	.+4      	; 0x47c <UpdateInputSMTick+0x20>
	} else {
		menuNavigationInput = 0;	
     478:	10 92 d2 01 	sts	0x01D2, r1
	}
	if(ALARMON == ALARMACTIVE && tmpKeypadInput == 'D'){
     47c:	90 91 d3 01 	lds	r25, 0x01D3
     480:	9f 3f       	cpi	r25, 0xFF	; 255
     482:	21 f4       	brne	.+8      	; 0x48c <UpdateInputSMTick+0x30>
     484:	84 34       	cpi	r24, 0x44	; 68
     486:	11 f4       	brne	.+4      	; 0x48c <UpdateInputSMTick+0x30>
		ALARMON = ALARMINACTIVE;
     488:	10 92 d3 01 	sts	0x01D3, r1
	}
	return state;
}
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret

00000490 <set_PWM>:
#ifndef PWM_H
#define PWM_H

void set_PWM(double frequency) {
     490:	cf 92       	push	r12
     492:	df 92       	push	r13
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	6b 01       	movw	r12, r22
     49a:	7c 01       	movw	r14, r24
	// Keeps track of the currently set frequency
	// Will only update the registers when the frequency
	// changes, plays music uninterrupted.
	static double current_frequency;
	if (frequency != current_frequency) {
     49c:	20 91 51 01 	lds	r18, 0x0151
     4a0:	30 91 52 01 	lds	r19, 0x0152
     4a4:	40 91 53 01 	lds	r20, 0x0153
     4a8:	50 91 54 01 	lds	r21, 0x0154
     4ac:	f8 d4       	rcall	.+2544   	; 0xe9e <__cmpsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <set_PWM+0x24>
     4b2:	52 c0       	rjmp	.+164    	; 0x558 <set_PWM+0xc8>

		if (!frequency) TCCR3B &= 0x08; //stops timer/counter
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	a9 01       	movw	r20, r18
     4ba:	c7 01       	movw	r24, r14
     4bc:	b6 01       	movw	r22, r12
     4be:	ef d4       	rcall	.+2526   	; 0xe9e <__cmpsf2>
     4c0:	81 11       	cpse	r24, r1
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <set_PWM+0x40>
     4c4:	e1 e9       	ldi	r30, 0x91	; 145
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	88 70       	andi	r24, 0x08	; 8
     4cc:	80 83       	st	Z, r24
     4ce:	05 c0       	rjmp	.+10     	; 0x4da <set_PWM+0x4a>
		else TCCR3B |= 0x03; // resumes/continues timer/counter
     4d0:	e1 e9       	ldi	r30, 0x91	; 145
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	83 60       	ori	r24, 0x03	; 3
     4d8:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) OCR3A = 0xFFFF;
     4da:	28 e5       	ldi	r18, 0x58	; 88
     4dc:	39 e3       	ldi	r19, 0x39	; 57
     4de:	44 e7       	ldi	r20, 0x74	; 116
     4e0:	5f e3       	ldi	r21, 0x3F	; 63
     4e2:	c7 01       	movw	r24, r14
     4e4:	b6 01       	movw	r22, r12
     4e6:	db d4       	rcall	.+2486   	; 0xe9e <__cmpsf2>
     4e8:	88 23       	and	r24, r24
     4ea:	3c f4       	brge	.+14     	; 0x4fa <set_PWM+0x6a>
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	9f ef       	ldi	r25, 0xFF	; 255
     4f0:	90 93 99 00 	sts	0x0099, r25
     4f4:	80 93 98 00 	sts	0x0098, r24
     4f8:	23 c0       	rjmp	.+70     	; 0x540 <set_PWM+0xb0>
		
		// prevents OCR3A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) OCR3A = 0x0000;
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	34 e2       	ldi	r19, 0x24	; 36
     4fe:	44 ef       	ldi	r20, 0xF4	; 244
     500:	56 e4       	ldi	r21, 0x46	; 70
     502:	c7 01       	movw	r24, r14
     504:	b6 01       	movw	r22, r12
     506:	dd d5       	rcall	.+3002   	; 0x10c2 <__gesf2>
     508:	18 16       	cp	r1, r24
     50a:	2c f4       	brge	.+10     	; 0x516 <set_PWM+0x86>
     50c:	10 92 99 00 	sts	0x0099, r1
     510:	10 92 98 00 	sts	0x0098, r1
     514:	15 c0       	rjmp	.+42     	; 0x540 <set_PWM+0xb0>
		
		// set OCR3A based on desired frequency
		else OCR3A = (short)(8000000 / (128 * frequency)) - 1;
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	53 e4       	ldi	r21, 0x43	; 67
     51e:	c7 01       	movw	r24, r14
     520:	b6 01       	movw	r22, r12
     522:	d3 d5       	rcall	.+2982   	; 0x10ca <__mulsf3>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	74 e2       	ldi	r23, 0x24	; 36
     52c:	84 ef       	ldi	r24, 0xF4	; 244
     52e:	9a e4       	ldi	r25, 0x4A	; 74
     530:	ba d4       	rcall	.+2420   	; 0xea6 <__divsf3>
     532:	21 d5       	rcall	.+2626   	; 0xf76 <__fixsfsi>
     534:	61 50       	subi	r22, 0x01	; 1
     536:	71 09       	sbc	r23, r1
     538:	70 93 99 00 	sts	0x0099, r23
     53c:	60 93 98 00 	sts	0x0098, r22

		TCNT3 = 0; // resets counter
     540:	10 92 95 00 	sts	0x0095, r1
     544:	10 92 94 00 	sts	0x0094, r1
		current_frequency = frequency;
     548:	c0 92 51 01 	sts	0x0151, r12
     54c:	d0 92 52 01 	sts	0x0152, r13
     550:	e0 92 53 01 	sts	0x0153, r14
     554:	f0 92 54 01 	sts	0x0154, r15
	}
}
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	df 90       	pop	r13
     55e:	cf 90       	pop	r12
     560:	08 95       	ret

00000562 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
     562:	80 e4       	ldi	r24, 0x40	; 64
     564:	80 93 90 00 	sts	0x0090, r24
	// COM3A0: Toggle PB6 on compare match between counter and OCR3A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     568:	8b e0       	ldi	r24, 0x0B	; 11
     56a:	80 93 91 00 	sts	0x0091, r24
	// WGM32: When counter (TCNT3) matches OCR3A, reset counter
	// CS31 & CS30: Set a prescaler of 64
	set_PWM(0);
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	cb 01       	movw	r24, r22
     574:	8d cf       	rjmp	.-230    	; 0x490 <set_PWM>

00000576 <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
     576:	10 92 90 00 	sts	0x0090, r1
	TCCR3B = 0x00;
     57a:	10 92 91 00 	sts	0x0091, r1
     57e:	08 95       	ret

00000580 <updateTimeString>:
eetime_t time;
unsigned char timeString[32];
unsigned char minuteTickFlag;

void updateTimeString(){
	timeString[2] = timeString[5] = ':';
     580:	8a e3       	ldi	r24, 0x3A	; 58
     582:	80 93 b7 01 	sts	0x01B7, r24
     586:	80 93 b4 01 	sts	0x01B4, r24
	if(time.Hour >= 10){// Update Hour
     58a:	80 91 d4 01 	lds	r24, 0x01D4
     58e:	8a 30       	cpi	r24, 0x0A	; 10
     590:	58 f0       	brcs	.+22     	; 0x5a8 <updateTimeString+0x28>
		timeString[HOURINDEX] = '0'+(time.Hour/10);
     592:	9d ec       	ldi	r25, 0xCD	; 205
     594:	89 9f       	mul	r24, r25
     596:	91 2d       	mov	r25, r1
     598:	11 24       	eor	r1, r1
     59a:	96 95       	lsr	r25
     59c:	96 95       	lsr	r25
     59e:	96 95       	lsr	r25
     5a0:	90 5d       	subi	r25, 0xD0	; 208
     5a2:	90 93 b2 01 	sts	0x01B2, r25
     5a6:	03 c0       	rjmp	.+6      	; 0x5ae <updateTimeString+0x2e>
		}else{
		timeString[HOURINDEX] = '0';
     5a8:	90 e3       	ldi	r25, 0x30	; 48
     5aa:	90 93 b2 01 	sts	0x01B2, r25
	}
	timeString[HOURINDEX+1] = '0'+(time.Hour % 10);
     5ae:	9d ec       	ldi	r25, 0xCD	; 205
     5b0:	89 9f       	mul	r24, r25
     5b2:	91 2d       	mov	r25, r1
     5b4:	11 24       	eor	r1, r1
     5b6:	96 95       	lsr	r25
     5b8:	96 95       	lsr	r25
     5ba:	96 95       	lsr	r25
     5bc:	99 0f       	add	r25, r25
     5be:	29 2f       	mov	r18, r25
     5c0:	22 0f       	add	r18, r18
     5c2:	22 0f       	add	r18, r18
     5c4:	92 0f       	add	r25, r18
     5c6:	89 1b       	sub	r24, r25
     5c8:	80 5d       	subi	r24, 0xD0	; 208
     5ca:	80 93 b3 01 	sts	0x01B3, r24
	if(time.Minute >= 10){// Update Minute
     5ce:	80 91 d5 01 	lds	r24, 0x01D5
     5d2:	8a 30       	cpi	r24, 0x0A	; 10
     5d4:	58 f0       	brcs	.+22     	; 0x5ec <updateTimeString+0x6c>
		timeString[MINUTEINDEX] = '0'+(time.Minute/10);
     5d6:	9d ec       	ldi	r25, 0xCD	; 205
     5d8:	89 9f       	mul	r24, r25
     5da:	91 2d       	mov	r25, r1
     5dc:	11 24       	eor	r1, r1
     5de:	96 95       	lsr	r25
     5e0:	96 95       	lsr	r25
     5e2:	96 95       	lsr	r25
     5e4:	90 5d       	subi	r25, 0xD0	; 208
     5e6:	90 93 b5 01 	sts	0x01B5, r25
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <updateTimeString+0x72>
		}else{
		timeString[MINUTEINDEX] = '0';
     5ec:	90 e3       	ldi	r25, 0x30	; 48
     5ee:	90 93 b5 01 	sts	0x01B5, r25
	}
	timeString[MINUTEINDEX+1]='0'+(time.Minute % 10);
     5f2:	9d ec       	ldi	r25, 0xCD	; 205
     5f4:	89 9f       	mul	r24, r25
     5f6:	91 2d       	mov	r25, r1
     5f8:	11 24       	eor	r1, r1
     5fa:	96 95       	lsr	r25
     5fc:	96 95       	lsr	r25
     5fe:	96 95       	lsr	r25
     600:	99 0f       	add	r25, r25
     602:	29 2f       	mov	r18, r25
     604:	22 0f       	add	r18, r18
     606:	22 0f       	add	r18, r18
     608:	92 0f       	add	r25, r18
     60a:	89 1b       	sub	r24, r25
     60c:	80 5d       	subi	r24, 0xD0	; 208
     60e:	80 93 b6 01 	sts	0x01B6, r24
	if(time.Second >= 10){// Update Second
     612:	80 91 d6 01 	lds	r24, 0x01D6
     616:	8a 30       	cpi	r24, 0x0A	; 10
     618:	58 f0       	brcs	.+22     	; 0x630 <updateTimeString+0xb0>
		timeString[SECONDINDEX] = '0'+(time.Second/10);
     61a:	9d ec       	ldi	r25, 0xCD	; 205
     61c:	89 9f       	mul	r24, r25
     61e:	91 2d       	mov	r25, r1
     620:	11 24       	eor	r1, r1
     622:	96 95       	lsr	r25
     624:	96 95       	lsr	r25
     626:	96 95       	lsr	r25
     628:	90 5d       	subi	r25, 0xD0	; 208
     62a:	90 93 b8 01 	sts	0x01B8, r25
     62e:	03 c0       	rjmp	.+6      	; 0x636 <updateTimeString+0xb6>
	}else{
		timeString[SECONDINDEX] = '0';
     630:	90 e3       	ldi	r25, 0x30	; 48
     632:	90 93 b8 01 	sts	0x01B8, r25
	}
	timeString[SECONDINDEX+1]='0'+(time.Second % 10);
     636:	9d ec       	ldi	r25, 0xCD	; 205
     638:	89 9f       	mul	r24, r25
     63a:	91 2d       	mov	r25, r1
     63c:	11 24       	eor	r1, r1
     63e:	96 95       	lsr	r25
     640:	96 95       	lsr	r25
     642:	96 95       	lsr	r25
     644:	99 0f       	add	r25, r25
     646:	29 2f       	mov	r18, r25
     648:	22 0f       	add	r18, r18
     64a:	22 0f       	add	r18, r18
     64c:	92 0f       	add	r25, r18
     64e:	89 1b       	sub	r24, r25
     650:	80 5d       	subi	r24, 0xD0	; 208
     652:	80 93 b9 01 	sts	0x01B9, r24
	
	if(time.IsAM != 0){
     656:	80 91 d7 01 	lds	r24, 0x01D7
     65a:	88 23       	and	r24, r24
     65c:	21 f0       	breq	.+8      	; 0x666 <updateTimeString+0xe6>
		timeString[AMPMINDEX] = 'A';
     65e:	81 e4       	ldi	r24, 0x41	; 65
     660:	80 93 bb 01 	sts	0x01BB, r24
     664:	08 95       	ret
	}else{
		timeString[AMPMINDEX] = 'P';
     666:	80 e5       	ldi	r24, 0x50	; 80
     668:	80 93 bb 01 	sts	0x01BB, r24
     66c:	08 95       	ret

0000066e <initializeSavedAlarms>:

volatile unsigned char ALARMON;


// zero savedAlarms should only be called on startup
void initializeSavedAlarms(){
     66e:	ec ed       	ldi	r30, 0xDC	; 220
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	80 ef       	ldi	r24, 0xF0	; 240
     674:	91 e0       	ldi	r25, 0x01	; 1
     676:	df 01       	movw	r26, r30
     678:	13 97       	sbiw	r26, 0x03	; 3
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		savedAlarms[i].Hour = 0;
     67a:	1c 92       	st	X, r1

volatile unsigned char ALARMON;


// zero savedAlarms should only be called on startup
void initializeSavedAlarms(){
     67c:	df 01       	movw	r26, r30
     67e:	12 97       	sbiw	r26, 0x02	; 2
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		savedAlarms[i].Hour = 0;
		savedAlarms[i].Minute = 0;
     680:	1c 92       	st	X, r1

volatile unsigned char ALARMON;


// zero savedAlarms should only be called on startup
void initializeSavedAlarms(){
     682:	df 01       	movw	r26, r30
     684:	11 97       	sbiw	r26, 0x01	; 1
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		savedAlarms[i].Hour = 0;
		savedAlarms[i].Minute = 0;
		savedAlarms[i].IsAM = 0;
     686:	1c 92       	st	X, r1
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
     688:	10 82       	st	Z, r1
     68a:	34 96       	adiw	r30, 0x04	; 4
volatile unsigned char ALARMON;


// zero savedAlarms should only be called on startup
void initializeSavedAlarms(){
	for(unsigned char i = 0; i < NUMALARMS; ++i){
     68c:	e8 17       	cp	r30, r24
     68e:	f9 07       	cpc	r31, r25
     690:	91 f7       	brne	.-28     	; 0x676 <initializeSavedAlarms+0x8>
		savedAlarms[i].Hour = 0;
		savedAlarms[i].Minute = 0;
		savedAlarms[i].IsAM = 0;
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
	}
}
     692:	08 95       	ret

00000694 <loadAlarmsFromEEPROM>:

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
     69c:	84 e1       	ldi	r24, 0x14	; 20
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	c6 d5       	rcall	.+2956   	; 0x122e <__eerd_byte_m1284>
     6a2:	84 31       	cpi	r24, 0x14	; 20
     6a4:	f9 f4       	brne	.+62     	; 0x6e4 <loadAlarmsFromEEPROM+0x50>
     6a6:	c3 e0       	ldi	r28, 0x03	; 3
     6a8:	d0 e0       	ldi	r29, 0x00	; 0
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
			savedAlarms[i].Hour = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i));
     6aa:	ce 01       	movw	r24, r28
     6ac:	03 97       	sbiw	r24, 0x03	; 3
     6ae:	bf d5       	rcall	.+2942   	; 0x122e <__eerd_byte_m1284>
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
	}
}

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
     6b0:	8e 01       	movw	r16, r28
     6b2:	07 52       	subi	r16, 0x27	; 39
     6b4:	1e 4f       	sbci	r17, 0xFE	; 254
     6b6:	f8 01       	movw	r30, r16
     6b8:	33 97       	sbiw	r30, 0x03	; 3
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
			savedAlarms[i].Hour = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i));
     6ba:	80 83       	st	Z, r24
			savedAlarms[i].Minute = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+1));
     6bc:	ce 01       	movw	r24, r28
     6be:	02 97       	sbiw	r24, 0x02	; 2
     6c0:	b6 d5       	rcall	.+2924   	; 0x122e <__eerd_byte_m1284>
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
	}
}

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
     6c2:	f8 01       	movw	r30, r16
     6c4:	32 97       	sbiw	r30, 0x02	; 2
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
			savedAlarms[i].Hour = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i));
			savedAlarms[i].Minute = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+1));
     6c6:	80 83       	st	Z, r24
			savedAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+2));
     6c8:	ce 01       	movw	r24, r28
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	b0 d5       	rcall	.+2912   	; 0x122e <__eerd_byte_m1284>
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
	}
}

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
     6ce:	f8 01       	movw	r30, r16
     6d0:	31 97       	sbiw	r30, 0x01	; 1
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
			savedAlarms[i].Hour = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i));
			savedAlarms[i].Minute = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+1));
			savedAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+2));
     6d2:	80 83       	st	Z, r24
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
     6d4:	ce 01       	movw	r24, r28
     6d6:	ab d5       	rcall	.+2902   	; 0x122e <__eerd_byte_m1284>
     6d8:	f8 01       	movw	r30, r16
     6da:	80 83       	st	Z, r24
     6dc:	24 96       	adiw	r28, 0x04	; 4

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
     6de:	c7 31       	cpi	r28, 0x17	; 23
     6e0:	d1 05       	cpc	r29, r1
     6e2:	19 f7       	brne	.-58     	; 0x6aa <loadAlarmsFromEEPROM+0x16>
			savedAlarms[i].Minute = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+1));
			savedAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+2));
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <saveAlarmsToEEPROM>:
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
	if (eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) != EEPROM_ALARM_TOPADDRESS){
     6f6:	84 e1       	ldi	r24, 0x14	; 20
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	99 d5       	rcall	.+2866   	; 0x122e <__eerd_byte_m1284>
     6fc:	84 31       	cpi	r24, 0x14	; 20
     6fe:	19 f1       	breq	.+70     	; 0x746 <saveAlarmsToEEPROM+0x58>
		// store EEPROM_ALARM_TOPADDRESS at memory address EEPROM_ALARM_TOPADDRESS as a flag that the memory has been saved to already.
		// This will persist through resets
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
     700:	64 e1       	ldi	r22, 0x14	; 20
     702:	84 e1       	ldi	r24, 0x14	; 20
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	9b d5       	rcall	.+2870   	; 0x123e <__eewr_byte_m1284>
     708:	1e c0       	rjmp	.+60     	; 0x746 <saveAlarmsToEEPROM+0x58>
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
     70a:	8e 01       	movw	r16, r28
     70c:	07 52       	subi	r16, 0x27	; 39
     70e:	1e 4f       	sbci	r17, 0xFE	; 254
     710:	f8 01       	movw	r30, r16
     712:	33 97       	sbiw	r30, 0x03	; 3
		// store EEPROM_ALARM_TOPADDRESS at memory address EEPROM_ALARM_TOPADDRESS as a flag that the memory has been saved to already.
		// This will persist through resets
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
	}
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i), savedAlarms[i].Hour);
     714:	60 81       	ld	r22, Z
     716:	ce 01       	movw	r24, r28
     718:	03 97       	sbiw	r24, 0x03	; 3
     71a:	91 d5       	rcall	.+2850   	; 0x123e <__eewr_byte_m1284>
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
     71c:	f8 01       	movw	r30, r16
     71e:	32 97       	sbiw	r30, 0x02	; 2
		// This will persist through resets
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
	}
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i), savedAlarms[i].Hour);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+1), savedAlarms[i].Minute);
     720:	60 81       	ld	r22, Z
     722:	ce 01       	movw	r24, r28
     724:	02 97       	sbiw	r24, 0x02	; 2
     726:	8b d5       	rcall	.+2838   	; 0x123e <__eewr_byte_m1284>
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
     728:	f8 01       	movw	r30, r16
     72a:	31 97       	sbiw	r30, 0x01	; 1
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
	}
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i), savedAlarms[i].Hour);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+1), savedAlarms[i].Minute);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+2), savedAlarms[i].IsAM);
     72c:	60 81       	ld	r22, Z
     72e:	ce 01       	movw	r24, r28
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	85 d5       	rcall	.+2826   	; 0x123e <__eewr_byte_m1284>
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+3), savedAlarms[i].IsActive);
     734:	f8 01       	movw	r30, r16
     736:	60 81       	ld	r22, Z
     738:	ce 01       	movw	r24, r28
     73a:	81 d5       	rcall	.+2818   	; 0x123e <__eewr_byte_m1284>
     73c:	24 96       	adiw	r28, 0x04	; 4
	if (eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) != EEPROM_ALARM_TOPADDRESS){
		// store EEPROM_ALARM_TOPADDRESS at memory address EEPROM_ALARM_TOPADDRESS as a flag that the memory has been saved to already.
		// This will persist through resets
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
	}
	for(unsigned char i = 0; i < NUMALARMS; ++i){
     73e:	c7 31       	cpi	r28, 0x17	; 23
     740:	d1 05       	cpc	r29, r1
     742:	19 f7       	brne	.-58     	; 0x70a <saveAlarmsToEEPROM+0x1c>
     744:	03 c0       	rjmp	.+6      	; 0x74c <saveAlarmsToEEPROM+0x5e>
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
     746:	c3 e0       	ldi	r28, 0x03	; 3
     748:	d0 e0       	ldi	r29, 0x00	; 0
     74a:	df cf       	rjmp	.-66     	; 0x70a <saveAlarmsToEEPROM+0x1c>
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i), savedAlarms[i].Hour);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+1), savedAlarms[i].Minute);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+2), savedAlarms[i].IsAM);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+3), savedAlarms[i].IsActive);
	}
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	08 95       	ret

00000756 <SystemDriverSMTick>:
#define MAXMENUTITLETIME 50 //100period ms * 50 = 5000 s seconds
#define FIRSTMENUITEM SystemDriver_timedisplaytitle
signed char SystemDriverSMTick (signed char state){
	static unsigned char stateTimer = 0;
	// Transitions
	switch(state){
     756:	48 2f       	mov	r20, r24
     758:	55 27       	eor	r21, r21
     75a:	47 fd       	sbrc	r20, 7
     75c:	50 95       	com	r21
     75e:	65 2f       	mov	r22, r21
     760:	75 2f       	mov	r23, r21
     762:	fa 01       	movw	r30, r20
     764:	31 97       	sbiw	r30, 0x01	; 1
     766:	e9 31       	cpi	r30, 0x19	; 25
     768:	f1 05       	cpc	r31, r1
     76a:	08 f0       	brcs	.+2      	; 0x76e <SystemDriverSMTick+0x18>
     76c:	25 c1       	rjmp	.+586    	; 0x9b8 <SystemDriverSMTick+0x262>
     76e:	ea 5b       	subi	r30, 0xBA	; 186
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	43 c5       	rjmp	.+2694   	; 0x11fa <__tablejump2__>
		//=================================================================
		case SystemDriver_timedisplaytitle:
			// count the Timer for 4 seconds until forced transition or else "Select button"
			stateTimer++;
     774:	90 91 58 01 	lds	r25, 0x0158
     778:	9f 5f       	subi	r25, 0xFF	; 255
     77a:	90 93 58 01 	sts	0x0158, r25
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
     77e:	92 33       	cpi	r25, 0x32	; 50
     780:	28 f4       	brcc	.+10     	; 0x78c <SystemDriverSMTick+0x36>
     782:	90 91 d2 01 	lds	r25, 0x01D2
     786:	93 34       	cpi	r25, 0x43	; 67
     788:	11 f4       	brne	.+4      	; 0x78e <SystemDriverSMTick+0x38>
     78a:	07 c0       	rjmp	.+14     	; 0x79a <SystemDriverSMTick+0x44>
				state = SystemDriver_timedisplaytitle_fall;
     78c:	83 e0       	ldi	r24, 0x03	; 3
			}
			if(menuNavigationInput == Keypad_next){
     78e:	90 91 d2 01 	lds	r25, 0x01D2
     792:	91 34       	cpi	r25, 0x41	; 65
     794:	09 f4       	brne	.+2      	; 0x798 <SystemDriverSMTick+0x42>
     796:	12 c1       	rjmp	.+548    	; 0x9bc <SystemDriverSMTick+0x266>
     798:	40 c1       	rjmp	.+640    	; 0xa1a <SystemDriverSMTick+0x2c4>
		//=================================================================
		case SystemDriver_timedisplaytitle:
			// count the Timer for 4 seconds until forced transition or else "Select button"
			stateTimer++;
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
				state = SystemDriver_timedisplaytitle_fall;
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	3e c1       	rjmp	.+636    	; 0xa1a <SystemDriverSMTick+0x2c4>
				state = SystemDriver_timedisplaytitle_nextmenuitem;
			}
			break;
		case SystemDriver_timedisplaytitle_fall:
			// consume input or else transition due to state timer
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput != Keypad_select){
     79e:	90 91 58 01 	lds	r25, 0x0158
     7a2:	92 33       	cpi	r25, 0x32	; 50
     7a4:	30 f4       	brcc	.+12     	; 0x7b2 <SystemDriverSMTick+0x5c>
     7a6:	90 91 d2 01 	lds	r25, 0x01D2
     7aa:	93 34       	cpi	r25, 0x43	; 67
     7ac:	19 f0       	breq	.+6      	; 0x7b4 <SystemDriverSMTick+0x5e>
				state = SystemDriver_timedisplay;
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <SystemDriverSMTick+0x5e>
     7b2:	82 e0       	ldi	r24, 0x02	; 2
			} else if (menuNavigationInput ==  Keypad_next){
				state = SystemDriver_alarmaddtitle;
			}
			stateTimer = 0;
     7b4:	10 92 58 01 	sts	0x0158, r1
			break;
     7b8:	30 c1       	rjmp	.+608    	; 0xa1a <SystemDriverSMTick+0x2c4>
		case SystemDriver_timedisplay:
			if(menuNavigationInput == Keypad_menu){
     7ba:	90 91 d2 01 	lds	r25, 0x01D2
     7be:	93 32       	cpi	r25, 0x23	; 35
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <SystemDriverSMTick+0x6e>
     7c2:	2b c1       	rjmp	.+598    	; 0xa1a <SystemDriverSMTick+0x2c4>
     7c4:	fd c0       	rjmp	.+506    	; 0x9c0 <SystemDriverSMTick+0x26a>
				state = SystemDriver_timedisplay_fall;
			}
			break;
		case SystemDriver_timedisplay_fall:
			if(menuNavigationInput != Keypad_menu){
     7c6:	90 91 d2 01 	lds	r25, 0x01D2
     7ca:	93 32       	cpi	r25, 0x23	; 35
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <SystemDriverSMTick+0x7a>
     7ce:	fa c0       	rjmp	.+500    	; 0x9c4 <SystemDriverSMTick+0x26e>
     7d0:	24 c1       	rjmp	.+584    	; 0xa1a <SystemDriverSMTick+0x2c4>
				state = SystemDriver_timedisplaytitle;
			}
			break;
		case SystemDriver_timedisplaytitle_nextmenuitem:
			if(menuNavigationInput !=  Keypad_next){
     7d2:	90 91 d2 01 	lds	r25, 0x01D2
     7d6:	91 34       	cpi	r25, 0x41	; 65
     7d8:	09 f0       	breq	.+2      	; 0x7dc <SystemDriverSMTick+0x86>
				state = SystemDriver_alarmaddtitle;
     7da:	86 e0       	ldi	r24, 0x06	; 6
			}
			stateTimer = 0;
     7dc:	10 92 58 01 	sts	0x0158, r1
			break;
     7e0:	1c c1       	rjmp	.+568    	; 0xa1a <SystemDriverSMTick+0x2c4>
		//=================================================================
		case SystemDriver_alarmaddtitle:
			stateTimer++;
     7e2:	90 91 58 01 	lds	r25, 0x0158
     7e6:	9f 5f       	subi	r25, 0xFF	; 255
     7e8:	90 93 58 01 	sts	0x0158, r25
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
     7ec:	92 33       	cpi	r25, 0x32	; 50
     7ee:	08 f0       	brcs	.+2      	; 0x7f2 <SystemDriverSMTick+0x9c>
     7f0:	eb c0       	rjmp	.+470    	; 0x9c8 <SystemDriverSMTick+0x272>
     7f2:	90 91 d2 01 	lds	r25, 0x01D2
     7f6:	93 34       	cpi	r25, 0x43	; 67
     7f8:	09 f4       	brne	.+2      	; 0x7fc <SystemDriverSMTick+0xa6>
     7fa:	e8 c0       	rjmp	.+464    	; 0x9cc <SystemDriverSMTick+0x276>
				state = SystemDriver_alarmaddtitle_fall;
			}else if (menuNavigationInput == Keypad_next){
     7fc:	91 34       	cpi	r25, 0x41	; 65
     7fe:	09 f0       	breq	.+2      	; 0x802 <SystemDriverSMTick+0xac>
     800:	0c c1       	rjmp	.+536    	; 0xa1a <SystemDriverSMTick+0x2c4>
     802:	e6 c0       	rjmp	.+460    	; 0x9d0 <SystemDriverSMTick+0x27a>
				state = SystemDriver_alarmaddtitle_nextmenuitem;
			}
			break;
		case SystemDriver_alarmaddtitle_fall:
			// consume input or else transition due to state timer
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput != Keypad_select){
     804:	90 91 58 01 	lds	r25, 0x0158
     808:	92 33       	cpi	r25, 0x32	; 50
     80a:	28 f4       	brcc	.+10     	; 0x816 <SystemDriverSMTick+0xc0>
     80c:	90 91 d2 01 	lds	r25, 0x01D2
     810:	93 34       	cpi	r25, 0x43	; 67
     812:	19 f4       	brne	.+6      	; 0x81a <SystemDriverSMTick+0xc4>
     814:	03 c0       	rjmp	.+6      	; 0x81c <SystemDriverSMTick+0xc6>
				state = SystemDriver_alarmaddscroll;
     816:	87 e0       	ldi	r24, 0x07	; 7
     818:	01 c0       	rjmp	.+2      	; 0x81c <SystemDriverSMTick+0xc6>
     81a:	87 e0       	ldi	r24, 0x07	; 7
			} 
			stateTimer = 0;
     81c:	10 92 58 01 	sts	0x0158, r1
			break;
     820:	fc c0       	rjmp	.+504    	; 0xa1a <SystemDriverSMTick+0x2c4>
		case SystemDriver_alarmaddscroll:
			if(menuNavigationInput == Keypad_menu){
     822:	90 91 d2 01 	lds	r25, 0x01D2
     826:	93 32       	cpi	r25, 0x23	; 35
     828:	09 f0       	breq	.+2      	; 0x82c <SystemDriverSMTick+0xd6>
     82a:	f7 c0       	rjmp	.+494    	; 0xa1a <SystemDriverSMTick+0x2c4>
     82c:	d3 c0       	rjmp	.+422    	; 0x9d4 <SystemDriverSMTick+0x27e>
				state = SystemDriver_alarmaddscroll_fall;
			}
			break;
		case SystemDriver_alarmaddscroll_fall:
			if(menuNavigationInput != Keypad_menu){
     82e:	90 91 d2 01 	lds	r25, 0x01D2
     832:	93 32       	cpi	r25, 0x23	; 35
     834:	09 f0       	breq	.+2      	; 0x838 <SystemDriverSMTick+0xe2>
     836:	d0 c0       	rjmp	.+416    	; 0x9d8 <SystemDriverSMTick+0x282>
     838:	f0 c0       	rjmp	.+480    	; 0xa1a <SystemDriverSMTick+0x2c4>
				state = SystemDriver_alarmaddtitle;
			}
			break;
		case SystemDriver_alarmaddtitle_nextmenuitem:
			if(menuNavigationInput !=  Keypad_next){
     83a:	90 91 d2 01 	lds	r25, 0x01D2
     83e:	91 34       	cpi	r25, 0x41	; 65
     840:	09 f0       	breq	.+2      	; 0x844 <SystemDriverSMTick+0xee>
				state = SystemDriver_alarmviewtitle;
     842:	8b e0       	ldi	r24, 0x0B	; 11
			}
			stateTimer = 0;
     844:	10 92 58 01 	sts	0x0158, r1
			break;
     848:	e8 c0       	rjmp	.+464    	; 0xa1a <SystemDriverSMTick+0x2c4>
		//=================================================================
		case SystemDriver_alarmviewtitle :
			if(menuNavigationInput == Keypad_select){ // c is select
     84a:	90 91 d2 01 	lds	r25, 0x01D2
     84e:	93 34       	cpi	r25, 0x43	; 67
     850:	19 f4       	brne	.+6      	; 0x858 <SystemDriverSMTick+0x102>
				// going to alarm view so load alarms from EEPROM
				loadAlarmsFromEEPROM();
     852:	20 df       	rcall	.-448    	; 0x694 <loadAlarmsFromEEPROM>
				state = SystemDriver_alarmviewtitle_fall;
     854:	8d e0       	ldi	r24, 0x0D	; 13
     856:	e1 c0       	rjmp	.+450    	; 0xa1a <SystemDriverSMTick+0x2c4>
			}else if (menuNavigationInput == Keypad_next){
     858:	91 34       	cpi	r25, 0x41	; 65
     85a:	09 f0       	breq	.+2      	; 0x85e <SystemDriverSMTick+0x108>
     85c:	de c0       	rjmp	.+444    	; 0xa1a <SystemDriverSMTick+0x2c4>
     85e:	be c0       	rjmp	.+380    	; 0x9dc <SystemDriverSMTick+0x286>
				state = SystemDriver_alarmview_nextmenuitem;
			}
			break;
		case SystemDriver_alarmviewtitle_fall:
			if(menuNavigationInput != Keypad_select){
     860:	90 91 d2 01 	lds	r25, 0x01D2
     864:	93 34       	cpi	r25, 0x43	; 67
     866:	09 f0       	breq	.+2      	; 0x86a <SystemDriverSMTick+0x114>
     868:	bb c0       	rjmp	.+374    	; 0x9e0 <SystemDriverSMTick+0x28a>
     86a:	d7 c0       	rjmp	.+430    	; 0xa1a <SystemDriverSMTick+0x2c4>
				state = SystemDriver_alarmview;
			}
			break;
		case SystemDriver_alarmview:
			if(menuNavigationInput == Keypad_menu){
     86c:	90 91 d2 01 	lds	r25, 0x01D2
     870:	93 32       	cpi	r25, 0x23	; 35
     872:	19 f4       	brne	.+6      	; 0x87a <SystemDriverSMTick+0x124>
				// leaving state so save Alarms
				saveAlarmsToEEPROM();
     874:	3c df       	rcall	.-392    	; 0x6ee <saveAlarmsToEEPROM>
				state = SystemDriver_alarmview_fall;
     876:	8e e0       	ldi	r24, 0x0E	; 14
     878:	d0 c0       	rjmp	.+416    	; 0xa1a <SystemDriverSMTick+0x2c4>
			} else if(menuNavigationInput == Keypad_select){
     87a:	93 34       	cpi	r25, 0x43	; 67
     87c:	09 f4       	brne	.+2      	; 0x880 <SystemDriverSMTick+0x12a>
     87e:	b2 c0       	rjmp	.+356    	; 0x9e4 <SystemDriverSMTick+0x28e>
				state = SystemDriver_alarmview_select;
			} else if(menuNavigationInput == Keypad_back){
     880:	92 34       	cpi	r25, 0x42	; 66
     882:	09 f4       	brne	.+2      	; 0x886 <SystemDriverSMTick+0x130>
     884:	b1 c0       	rjmp	.+354    	; 0x9e8 <SystemDriverSMTick+0x292>
				state = SystemDriver_alarmview_back;
			} else if(menuNavigationInput == Keypad_next){
     886:	91 34       	cpi	r25, 0x41	; 65
     888:	09 f4       	brne	.+2      	; 0x88c <SystemDriverSMTick+0x136>
     88a:	b0 c0       	rjmp	.+352    	; 0x9ec <SystemDriverSMTick+0x296>
				state = SystemDriver_alarmview_next;
			} else if(menuNavigationInput == Keypad_HH){
     88c:	9a 32       	cpi	r25, 0x2A	; 42
     88e:	09 f4       	brne	.+2      	; 0x892 <SystemDriverSMTick+0x13c>
     890:	af c0       	rjmp	.+350    	; 0x9f0 <SystemDriverSMTick+0x29a>
				state = SystemDriver_alarmview_HH;
			} else if(menuNavigationInput == Keypad_MM){
     892:	90 33       	cpi	r25, 0x30	; 48
     894:	09 f0       	breq	.+2      	; 0x898 <SystemDriverSMTick+0x142>
     896:	c1 c0       	rjmp	.+386    	; 0xa1a <SystemDriverSMTick+0x2c4>
     898:	ad c0       	rjmp	.+346    	; 0x9f4 <SystemDriverSMTick+0x29e>
				state = SystemDriver_alarmview_MM;
			}
			break;
		// Input HH
		case SystemDriver_alarmview_HH:
			if(savedAlarms[savedAlarmIterator].Hour < 12){
     89a:	80 91 ed 01 	lds	r24, 0x01ED
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	fc 01       	movw	r30, r24
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	e7 52       	subi	r30, 0x27	; 39
     8ac:	fe 4f       	sbci	r31, 0xFE	; 254
     8ae:	20 81       	ld	r18, Z
     8b0:	2c 30       	cpi	r18, 0x0C	; 12
     8b2:	58 f4       	brcc	.+22     	; 0x8ca <SystemDriverSMTick+0x174>
				savedAlarms[savedAlarmIterator].Hour++;
     8b4:	fc 01       	movw	r30, r24
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	ee 0f       	add	r30, r30
     8bc:	ff 1f       	adc	r31, r31
     8be:	e7 52       	subi	r30, 0x27	; 39
     8c0:	fe 4f       	sbci	r31, 0xFE	; 254
     8c2:	2f 5f       	subi	r18, 0xFF	; 255
     8c4:	20 83       	st	Z, r18
			} else {
				savedAlarms[savedAlarmIterator].Hour = 0;
				savedAlarms[savedAlarmIterator].IsAM = ~savedAlarms[savedAlarmIterator].IsAM;
			}
			state = SystemDriver_alarmview_HH_fall;
     8c6:	82 e1       	ldi	r24, 0x12	; 18
     8c8:	a8 c0       	rjmp	.+336    	; 0xa1a <SystemDriverSMTick+0x2c4>
		// Input HH
		case SystemDriver_alarmview_HH:
			if(savedAlarms[savedAlarmIterator].Hour < 12){
				savedAlarms[savedAlarmIterator].Hour++;
			} else {
				savedAlarms[savedAlarmIterator].Hour = 0;
     8ca:	fc 01       	movw	r30, r24
     8cc:	ee 0f       	add	r30, r30
     8ce:	ff 1f       	adc	r31, r31
     8d0:	ee 0f       	add	r30, r30
     8d2:	ff 1f       	adc	r31, r31
     8d4:	e7 52       	subi	r30, 0x27	; 39
     8d6:	fe 4f       	sbci	r31, 0xFE	; 254
     8d8:	10 82       	st	Z, r1
				savedAlarms[savedAlarmIterator].IsAM = ~savedAlarms[savedAlarmIterator].IsAM;
     8da:	82 81       	ldd	r24, Z+2	; 0x02
     8dc:	80 95       	com	r24
     8de:	82 83       	std	Z+2, r24	; 0x02
			}
			state = SystemDriver_alarmview_HH_fall;
     8e0:	82 e1       	ldi	r24, 0x12	; 18
     8e2:	9b c0       	rjmp	.+310    	; 0xa1a <SystemDriverSMTick+0x2c4>
			break;
		case SystemDriver_alarmview_HH_fall:
			if(menuNavigationInput != Keypad_HH){
     8e4:	90 91 d2 01 	lds	r25, 0x01D2
     8e8:	9a 32       	cpi	r25, 0x2A	; 42
     8ea:	09 f0       	breq	.+2      	; 0x8ee <SystemDriverSMTick+0x198>
     8ec:	85 c0       	rjmp	.+266    	; 0x9f8 <SystemDriverSMTick+0x2a2>
     8ee:	95 c0       	rjmp	.+298    	; 0xa1a <SystemDriverSMTick+0x2c4>
				state = SystemDriver_alarmview;
			}
			break;
		// Input MM
		case SystemDriver_alarmview_MM:
			if(savedAlarms[savedAlarmIterator].Minute < 59){
     8f0:	80 91 ed 01 	lds	r24, 0x01ED
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	fc 01       	movw	r30, r24
     8f8:	ee 0f       	add	r30, r30
     8fa:	ff 1f       	adc	r31, r31
     8fc:	ee 0f       	add	r30, r30
     8fe:	ff 1f       	adc	r31, r31
     900:	e7 52       	subi	r30, 0x27	; 39
     902:	fe 4f       	sbci	r31, 0xFE	; 254
     904:	21 81       	ldd	r18, Z+1	; 0x01
     906:	2b 33       	cpi	r18, 0x3B	; 59
     908:	58 f4       	brcc	.+22     	; 0x920 <SystemDriverSMTick+0x1ca>
				savedAlarms[savedAlarmIterator].Minute++;
     90a:	fc 01       	movw	r30, r24
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	e7 52       	subi	r30, 0x27	; 39
     916:	fe 4f       	sbci	r31, 0xFE	; 254
     918:	2f 5f       	subi	r18, 0xFF	; 255
     91a:	21 83       	std	Z+1, r18	; 0x01
			} else {
				savedAlarms[savedAlarmIterator].Minute = 0;
			}
			state = SystemDriver_alarmview_MM_fall;
     91c:	83 e1       	ldi	r24, 0x13	; 19
     91e:	7d c0       	rjmp	.+250    	; 0xa1a <SystemDriverSMTick+0x2c4>
		// Input MM
		case SystemDriver_alarmview_MM:
			if(savedAlarms[savedAlarmIterator].Minute < 59){
				savedAlarms[savedAlarmIterator].Minute++;
			} else {
				savedAlarms[savedAlarmIterator].Minute = 0;
     920:	fc 01       	movw	r30, r24
     922:	ee 0f       	add	r30, r30
     924:	ff 1f       	adc	r31, r31
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	e7 52       	subi	r30, 0x27	; 39
     92c:	fe 4f       	sbci	r31, 0xFE	; 254
     92e:	11 82       	std	Z+1, r1	; 0x01
			}
			state = SystemDriver_alarmview_MM_fall;
     930:	83 e1       	ldi	r24, 0x13	; 19
     932:	73 c0       	rjmp	.+230    	; 0xa1a <SystemDriverSMTick+0x2c4>
			break;
		case SystemDriver_alarmview_MM_fall:
			if(menuNavigationInput != Keypad_MM){
     934:	90 91 d2 01 	lds	r25, 0x01D2
     938:	90 33       	cpi	r25, 0x30	; 48
     93a:	09 f0       	breq	.+2      	; 0x93e <SystemDriverSMTick+0x1e8>
     93c:	5f c0       	rjmp	.+190    	; 0x9fc <SystemDriverSMTick+0x2a6>
     93e:	6d c0       	rjmp	.+218    	; 0xa1a <SystemDriverSMTick+0x2c4>
				state = SystemDriver_alarmview;
			}
			break;
		case SystemDriver_alarmview_fall:
			if(menuNavigationInput != Keypad_menu){
     940:	90 91 d2 01 	lds	r25, 0x01D2
     944:	93 32       	cpi	r25, 0x23	; 35
     946:	09 f0       	breq	.+2      	; 0x94a <SystemDriverSMTick+0x1f4>
     948:	5b c0       	rjmp	.+182    	; 0xa00 <SystemDriverSMTick+0x2aa>
     94a:	67 c0       	rjmp	.+206    	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			break;
		// Input NEXT
		case SystemDriver_alarmview_next:
			// increment alarm index
			if(savedAlarmIterator < NUMALARMS - 1){
     94c:	80 91 ed 01 	lds	r24, 0x01ED
     950:	84 30       	cpi	r24, 0x04	; 4
     952:	08 f0       	brcs	.+2      	; 0x956 <SystemDriverSMTick+0x200>
     954:	57 c0       	rjmp	.+174    	; 0xa04 <SystemDriverSMTick+0x2ae>
				savedAlarmIterator++;
     956:	8f 5f       	subi	r24, 0xFF	; 255
     958:	80 93 ed 01 	sts	0x01ED, r24
			}			
			state = SystemDriver_alarmview_next_fall;
     95c:	87 e1       	ldi	r24, 0x17	; 23
     95e:	5d c0       	rjmp	.+186    	; 0xa1a <SystemDriverSMTick+0x2c4>
			break;
		case SystemDriver_alarmview_next_fall:
			if(menuNavigationInput != Keypad_next){
     960:	90 91 d2 01 	lds	r25, 0x01D2
     964:	91 34       	cpi	r25, 0x41	; 65
     966:	09 f0       	breq	.+2      	; 0x96a <SystemDriverSMTick+0x214>
     968:	4f c0       	rjmp	.+158    	; 0xa08 <SystemDriverSMTick+0x2b2>
     96a:	57 c0       	rjmp	.+174    	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			break;
		// Input SELECT
		case SystemDriver_alarmview_select:
			// reverse active for alarm at index
			savedAlarms[savedAlarmIterator].IsActive = ~savedAlarms[savedAlarmIterator].IsActive;
     96c:	e0 91 ed 01 	lds	r30, 0x01ED
     970:	f0 e0       	ldi	r31, 0x00	; 0
     972:	ee 0f       	add	r30, r30
     974:	ff 1f       	adc	r31, r31
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	e7 52       	subi	r30, 0x27	; 39
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	83 81       	ldd	r24, Z+3	; 0x03
     980:	80 95       	com	r24
     982:	83 83       	std	Z+3, r24	; 0x03
			state = SystemDriver_alarmview_select_fall;
     984:	88 e1       	ldi	r24, 0x18	; 24
			break;
     986:	49 c0       	rjmp	.+146    	; 0xa1a <SystemDriverSMTick+0x2c4>
		case SystemDriver_alarmview_select_fall:
			if(menuNavigationInput != Keypad_select){
     988:	90 91 d2 01 	lds	r25, 0x01D2
     98c:	93 34       	cpi	r25, 0x43	; 67
     98e:	f1 f5       	brne	.+124    	; 0xa0c <SystemDriverSMTick+0x2b6>
     990:	44 c0       	rjmp	.+136    	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			break;
		// Input BACK
		case SystemDriver_alarmview_back:
			// decrement alarm index
			if(savedAlarmIterator > 0){
     992:	80 91 ed 01 	lds	r24, 0x01ED
     996:	88 23       	and	r24, r24
     998:	d9 f1       	breq	.+118    	; 0xa10 <SystemDriverSMTick+0x2ba>
				savedAlarmIterator--;
     99a:	81 50       	subi	r24, 0x01	; 1
     99c:	80 93 ed 01 	sts	0x01ED, r24
			}
			state = SystemDriver_alarmview_back_fall;
     9a0:	89 e1       	ldi	r24, 0x19	; 25
     9a2:	3b c0       	rjmp	.+118    	; 0xa1a <SystemDriverSMTick+0x2c4>
			break;
		case SystemDriver_alarmview_back_fall:
			if(menuNavigationInput != Keypad_back){
     9a4:	90 91 d2 01 	lds	r25, 0x01D2
     9a8:	92 34       	cpi	r25, 0x42	; 66
     9aa:	a1 f5       	brne	.+104    	; 0xa14 <SystemDriverSMTick+0x2be>
     9ac:	36 c0       	rjmp	.+108    	; 0xa1a <SystemDriverSMTick+0x2c4>
				state = SystemDriver_alarmview;
			}
			break;
		case SystemDriver_alarmview_nextmenuitem:
			if(menuNavigationInput != Keypad_next){
     9ae:	90 91 d2 01 	lds	r25, 0x01D2
     9b2:	91 34       	cpi	r25, 0x41	; 65
     9b4:	89 f5       	brne	.+98     	; 0xa18 <SystemDriverSMTick+0x2c2>
     9b6:	31 c0       	rjmp	.+98     	; 0xa1a <SystemDriverSMTick+0x2c4>
				state = FIRSTMENUITEM;
			}
			break;
		//=================================================================
		default:
			state = FIRSTMENUITEM;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	2f c0       	rjmp	.+94     	; 0xa1a <SystemDriverSMTick+0x2c4>
			stateTimer++;
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
				state = SystemDriver_timedisplaytitle_fall;
			}
			if(menuNavigationInput == Keypad_next){
				state = SystemDriver_timedisplaytitle_nextmenuitem;
     9bc:	85 e0       	ldi	r24, 0x05	; 5
     9be:	2d c0       	rjmp	.+90     	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			stateTimer = 0;
			break;
		case SystemDriver_timedisplay:
			if(menuNavigationInput == Keypad_menu){
				state = SystemDriver_timedisplay_fall;
     9c0:	84 e0       	ldi	r24, 0x04	; 4
     9c2:	2b c0       	rjmp	.+86     	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			break;
		case SystemDriver_timedisplay_fall:
			if(menuNavigationInput != Keypad_menu){
				state = SystemDriver_timedisplaytitle;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	29 c0       	rjmp	.+82     	; 0xa1a <SystemDriverSMTick+0x2c4>
			break;
		//=================================================================
		case SystemDriver_alarmaddtitle:
			stateTimer++;
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
				state = SystemDriver_alarmaddtitle_fall;
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	27 c0       	rjmp	.+78     	; 0xa1a <SystemDriverSMTick+0x2c4>
     9cc:	88 e0       	ldi	r24, 0x08	; 8
     9ce:	25 c0       	rjmp	.+74     	; 0xa1a <SystemDriverSMTick+0x2c4>
			}else if (menuNavigationInput == Keypad_next){
				state = SystemDriver_alarmaddtitle_nextmenuitem;
     9d0:	8a e0       	ldi	r24, 0x0A	; 10
     9d2:	23 c0       	rjmp	.+70     	; 0xa1a <SystemDriverSMTick+0x2c4>
			} 
			stateTimer = 0;
			break;
		case SystemDriver_alarmaddscroll:
			if(menuNavigationInput == Keypad_menu){
				state = SystemDriver_alarmaddscroll_fall;
     9d4:	89 e0       	ldi	r24, 0x09	; 9
     9d6:	21 c0       	rjmp	.+66     	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			break;
		case SystemDriver_alarmaddscroll_fall:
			if(menuNavigationInput != Keypad_menu){
				state = SystemDriver_alarmaddtitle;
     9d8:	86 e0       	ldi	r24, 0x06	; 6
     9da:	1f c0       	rjmp	.+62     	; 0xa1a <SystemDriverSMTick+0x2c4>
			if(menuNavigationInput == Keypad_select){ // c is select
				// going to alarm view so load alarms from EEPROM
				loadAlarmsFromEEPROM();
				state = SystemDriver_alarmviewtitle_fall;
			}else if (menuNavigationInput == Keypad_next){
				state = SystemDriver_alarmview_nextmenuitem;
     9dc:	8f e0       	ldi	r24, 0x0F	; 15
     9de:	1d c0       	rjmp	.+58     	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			break;
		case SystemDriver_alarmviewtitle_fall:
			if(menuNavigationInput != Keypad_select){
				state = SystemDriver_alarmview;
     9e0:	8c e0       	ldi	r24, 0x0C	; 12
     9e2:	1b c0       	rjmp	.+54     	; 0xa1a <SystemDriverSMTick+0x2c4>
			if(menuNavigationInput == Keypad_menu){
				// leaving state so save Alarms
				saveAlarmsToEEPROM();
				state = SystemDriver_alarmview_fall;
			} else if(menuNavigationInput == Keypad_select){
				state = SystemDriver_alarmview_select;
     9e4:	85 e1       	ldi	r24, 0x15	; 21
     9e6:	19 c0       	rjmp	.+50     	; 0xa1a <SystemDriverSMTick+0x2c4>
			} else if(menuNavigationInput == Keypad_back){
				state = SystemDriver_alarmview_back;
     9e8:	86 e1       	ldi	r24, 0x16	; 22
     9ea:	17 c0       	rjmp	.+46     	; 0xa1a <SystemDriverSMTick+0x2c4>
			} else if(menuNavigationInput == Keypad_next){
				state = SystemDriver_alarmview_next;
     9ec:	84 e1       	ldi	r24, 0x14	; 20
     9ee:	15 c0       	rjmp	.+42     	; 0xa1a <SystemDriverSMTick+0x2c4>
			} else if(menuNavigationInput == Keypad_HH){
				state = SystemDriver_alarmview_HH;
     9f0:	80 e1       	ldi	r24, 0x10	; 16
     9f2:	13 c0       	rjmp	.+38     	; 0xa1a <SystemDriverSMTick+0x2c4>
			} else if(menuNavigationInput == Keypad_MM){
				state = SystemDriver_alarmview_MM;
     9f4:	81 e1       	ldi	r24, 0x11	; 17
     9f6:	11 c0       	rjmp	.+34     	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			state = SystemDriver_alarmview_HH_fall;
			break;
		case SystemDriver_alarmview_HH_fall:
			if(menuNavigationInput != Keypad_HH){
				state = SystemDriver_alarmview;
     9f8:	8c e0       	ldi	r24, 0x0C	; 12
     9fa:	0f c0       	rjmp	.+30     	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			state = SystemDriver_alarmview_MM_fall;
			break;
		case SystemDriver_alarmview_MM_fall:
			if(menuNavigationInput != Keypad_MM){
				state = SystemDriver_alarmview;
     9fc:	8c e0       	ldi	r24, 0x0C	; 12
     9fe:	0d c0       	rjmp	.+26     	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			break;
		case SystemDriver_alarmview_fall:
			if(menuNavigationInput != Keypad_menu){
				state = SystemDriver_alarmviewtitle;
     a00:	8b e0       	ldi	r24, 0x0B	; 11
     a02:	0b c0       	rjmp	.+22     	; 0xa1a <SystemDriverSMTick+0x2c4>
		case SystemDriver_alarmview_next:
			// increment alarm index
			if(savedAlarmIterator < NUMALARMS - 1){
				savedAlarmIterator++;
			}			
			state = SystemDriver_alarmview_next_fall;
     a04:	87 e1       	ldi	r24, 0x17	; 23
     a06:	09 c0       	rjmp	.+18     	; 0xa1a <SystemDriverSMTick+0x2c4>
			break;
		case SystemDriver_alarmview_next_fall:
			if(menuNavigationInput != Keypad_next){
				state = SystemDriver_alarmview;
     a08:	8c e0       	ldi	r24, 0x0C	; 12
     a0a:	07 c0       	rjmp	.+14     	; 0xa1a <SystemDriverSMTick+0x2c4>
			savedAlarms[savedAlarmIterator].IsActive = ~savedAlarms[savedAlarmIterator].IsActive;
			state = SystemDriver_alarmview_select_fall;
			break;
		case SystemDriver_alarmview_select_fall:
			if(menuNavigationInput != Keypad_select){
				state = SystemDriver_alarmview;
     a0c:	8c e0       	ldi	r24, 0x0C	; 12
     a0e:	05 c0       	rjmp	.+10     	; 0xa1a <SystemDriverSMTick+0x2c4>
		case SystemDriver_alarmview_back:
			// decrement alarm index
			if(savedAlarmIterator > 0){
				savedAlarmIterator--;
			}
			state = SystemDriver_alarmview_back_fall;
     a10:	89 e1       	ldi	r24, 0x19	; 25
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <SystemDriverSMTick+0x2c4>
			break;
		case SystemDriver_alarmview_back_fall:
			if(menuNavigationInput != Keypad_back){
				state = SystemDriver_alarmview;
     a14:	8c e0       	ldi	r24, 0x0C	; 12
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <SystemDriverSMTick+0x2c4>
			}
			break;
		case SystemDriver_alarmview_nextmenuitem:
			if(menuNavigationInput != Keypad_next){
				state = FIRSTMENUITEM;
     a18:	81 e0       	ldi	r24, 0x01	; 1
		//=================================================================
		default:
			state = FIRSTMENUITEM;
			break;
	}
	SYSTEMSTATE = state;
     a1a:	80 93 d8 01 	sts	0x01D8, r24
	return state;
}
     a1e:	08 95       	ret

00000a20 <disableAlarm>:

void disableAlarm(){
	ALARMON = ALARMINACTIVE;
     a20:	10 92 d3 01 	sts	0x01D3, r1
	savedAlarms[activatedAlarm].IsActive = ALARMINACTIVE;
     a24:	e0 91 90 01 	lds	r30, 0x0190
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	e7 52       	subi	r30, 0x27	; 39
     a34:	fe 4f       	sbci	r31, 0xFE	; 254
     a36:	13 82       	std	Z+3, r1	; 0x03
	saveAlarmsToEEPROM();
     a38:	5a ce       	rjmp	.-844    	; 0x6ee <saveAlarmsToEEPROM>

00000a3a <checkAlarms>:

// ensures that ALARMON will be INACTIVE until it is turned on
// While any alarm is inactive, it will return ALARMACTIVE until
// an alarm is triggered and return ALARMACTIVE. After that, it will
// return ALARMACTIVE until an outside force resets ALARMON to ALARMINACTIVE
void checkAlarms(){
     a3a:	cf 93       	push	r28
	static unsigned char i;
	if(ALARMON == ALARMINACTIVE){
     a3c:	80 91 d3 01 	lds	r24, 0x01D3
     a40:	81 11       	cpse	r24, r1
     a42:	2a c0       	rjmp	.+84     	; 0xa98 <checkAlarms+0x5e>
		for(i = 0; i < NUMALARMS; ++i){						// go through all alarms
			if(	(savedAlarms[i].IsActive == ALARMACTIVE) &&  // if active
				(savedAlarms[i].Hour == time.Hour) &&		// and matches current time,
     a44:	40 91 d4 01 	lds	r20, 0x01D4
				(savedAlarms[i].Minute == time.Minute) &&
     a48:	60 91 d5 01 	lds	r22, 0x01D5
				(savedAlarms[i].IsAM == time.IsAM)){
     a4c:	70 91 d7 01 	lds	r23, 0x01D7
     a50:	50 91 90 01 	lds	r21, 0x0190
     a54:	ec ed       	ldi	r30, 0xDC	; 220
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	20 e0       	ldi	r18, 0x00	; 0
				// ALARM!!
				ALARMON = ALARMACTIVE;						// SET ALARMON = ALARMACTIVE
     a5a:	cf ef       	ldi	r28, 0xFF	; 255
// return ALARMACTIVE until an outside force resets ALARMON to ALARMINACTIVE
void checkAlarms(){
	static unsigned char i;
	if(ALARMON == ALARMINACTIVE){
		for(i = 0; i < NUMALARMS; ++i){						// go through all alarms
			if(	(savedAlarms[i].IsActive == ALARMACTIVE) &&  // if active
     a5c:	30 81       	ld	r19, Z
     a5e:	3f 3f       	cpi	r19, 0xFF	; 255
     a60:	91 f4       	brne	.+36     	; 0xa86 <checkAlarms+0x4c>

// ensures that ALARMON will be INACTIVE until it is turned on
// While any alarm is inactive, it will return ALARMACTIVE until
// an alarm is triggered and return ALARMACTIVE. After that, it will
// return ALARMACTIVE until an outside force resets ALARMON to ALARMINACTIVE
void checkAlarms(){
     a62:	df 01       	movw	r26, r30
     a64:	13 97       	sbiw	r26, 0x03	; 3
	static unsigned char i;
	if(ALARMON == ALARMINACTIVE){
		for(i = 0; i < NUMALARMS; ++i){						// go through all alarms
			if(	(savedAlarms[i].IsActive == ALARMACTIVE) &&  // if active
     a66:	3c 91       	ld	r19, X
     a68:	34 13       	cpse	r19, r20
     a6a:	0d c0       	rjmp	.+26     	; 0xa86 <checkAlarms+0x4c>

// ensures that ALARMON will be INACTIVE until it is turned on
// While any alarm is inactive, it will return ALARMACTIVE until
// an alarm is triggered and return ALARMACTIVE. After that, it will
// return ALARMACTIVE until an outside force resets ALARMON to ALARMINACTIVE
void checkAlarms(){
     a6c:	df 01       	movw	r26, r30
     a6e:	12 97       	sbiw	r26, 0x02	; 2
	static unsigned char i;
	if(ALARMON == ALARMINACTIVE){
		for(i = 0; i < NUMALARMS; ++i){						// go through all alarms
			if(	(savedAlarms[i].IsActive == ALARMACTIVE) &&  // if active
				(savedAlarms[i].Hour == time.Hour) &&		// and matches current time,
     a70:	3c 91       	ld	r19, X
     a72:	36 13       	cpse	r19, r22
     a74:	08 c0       	rjmp	.+16     	; 0xa86 <checkAlarms+0x4c>

// ensures that ALARMON will be INACTIVE until it is turned on
// While any alarm is inactive, it will return ALARMACTIVE until
// an alarm is triggered and return ALARMACTIVE. After that, it will
// return ALARMACTIVE until an outside force resets ALARMON to ALARMINACTIVE
void checkAlarms(){
     a76:	df 01       	movw	r26, r30
     a78:	11 97       	sbiw	r26, 0x01	; 1
	static unsigned char i;
	if(ALARMON == ALARMINACTIVE){
		for(i = 0; i < NUMALARMS; ++i){						// go through all alarms
			if(	(savedAlarms[i].IsActive == ALARMACTIVE) &&  // if active
				(savedAlarms[i].Hour == time.Hour) &&		// and matches current time,
				(savedAlarms[i].Minute == time.Minute) &&
     a7a:	8c 91       	ld	r24, X
     a7c:	87 13       	cpse	r24, r23
     a7e:	03 c0       	rjmp	.+6      	; 0xa86 <checkAlarms+0x4c>
				(savedAlarms[i].IsAM == time.IsAM)){
				// ALARM!!
				ALARMON = ALARMACTIVE;						// SET ALARMON = ALARMACTIVE
     a80:	c0 93 d3 01 	sts	0x01D3, r28
				activatedAlarm = i;		
     a84:	52 2f       	mov	r21, r18
     a86:	2f 5f       	subi	r18, 0xFF	; 255
     a88:	34 96       	adiw	r30, 0x04	; 4
// an alarm is triggered and return ALARMACTIVE. After that, it will
// return ALARMACTIVE until an outside force resets ALARMON to ALARMINACTIVE
void checkAlarms(){
	static unsigned char i;
	if(ALARMON == ALARMINACTIVE){
		for(i = 0; i < NUMALARMS; ++i){						// go through all alarms
     a8a:	25 30       	cpi	r18, 0x05	; 5
     a8c:	39 f7       	brne	.-50     	; 0xa5c <checkAlarms+0x22>
     a8e:	50 93 90 01 	sts	0x0190, r21
     a92:	85 e0       	ldi	r24, 0x05	; 5
     a94:	80 93 55 01 	sts	0x0155, r24
				ALARMON = ALARMACTIVE;						// SET ALARMON = ALARMACTIVE
				activatedAlarm = i;		
			}
		}
	}
}
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <updateAlarmString>:


void updateAlarmString(){
	static Alarm* currAlarm;
	currAlarm = &savedAlarms[savedAlarmIterator];
     a9c:	80 91 ed 01 	lds	r24, 0x01ED
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	fc 01       	movw	r30, r24
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	e7 52       	subi	r30, 0x27	; 39
     aae:	fe 4f       	sbci	r31, 0xFE	; 254
     ab0:	f0 93 57 01 	sts	0x0157, r31
     ab4:	e0 93 56 01 	sts	0x0156, r30
	savedAlarmString[0] = '>';
     ab8:	2e e3       	ldi	r18, 0x3E	; 62
     aba:	20 93 92 01 	sts	0x0192, r18
	savedAlarmString[1] = 'A';
     abe:	21 e4       	ldi	r18, 0x41	; 65
     ac0:	20 93 93 01 	sts	0x0193, r18
	savedAlarmString[2] = 'L';
     ac4:	3c e4       	ldi	r19, 0x4C	; 76
     ac6:	30 93 94 01 	sts	0x0194, r19
	savedAlarmString[3] = 'A';
     aca:	20 93 95 01 	sts	0x0195, r18
	savedAlarmString[4] = 'R';
     ace:	22 e5       	ldi	r18, 0x52	; 82
     ad0:	20 93 96 01 	sts	0x0196, r18
	savedAlarmString[5] = 'M';
     ad4:	2d e4       	ldi	r18, 0x4D	; 77
     ad6:	20 93 97 01 	sts	0x0197, r18

	savedAlarmString[ALARMVIEWNUMBERINDEXTENS] = '0' + (savedAlarmIterator+1)/10;
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	6a e0       	ldi	r22, 0x0A	; 10
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	57 d3       	rcall	.+1710   	; 0x1190 <__divmodhi4>
     ae2:	60 5d       	subi	r22, 0xD0	; 208
     ae4:	60 93 99 01 	sts	0x0199, r22
	savedAlarmString[ALARMVIEWNUMBERINDEXONES] = '0' + (savedAlarmIterator+1)%10;
     ae8:	80 5d       	subi	r24, 0xD0	; 208
     aea:	80 93 9a 01 	sts	0x019A, r24
	if(currAlarm->IsActive == ALARMINACTIVE){
     aee:	83 81       	ldd	r24, Z+3	; 0x03
     af0:	81 11       	cpse	r24, r1
     af2:	09 c0       	rjmp	.+18     	; 0xb06 <updateAlarmString+0x6a>
		savedAlarmString[ALARMVIEWONOFFINDEX] = 'O';
     af4:	8f e4       	ldi	r24, 0x4F	; 79
     af6:	80 93 9e 01 	sts	0x019E, r24
		savedAlarmString[ALARMVIEWONOFFINDEX+1] = 'F';
     afa:	86 e4       	ldi	r24, 0x46	; 70
     afc:	80 93 9f 01 	sts	0x019F, r24
		savedAlarmString[ALARMVIEWONOFFINDEX+2] = 'F';
     b00:	80 93 a0 01 	sts	0x01A0, r24
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <updateAlarmString+0x7c>
		
		} else{
		savedAlarmString[ALARMVIEWONOFFINDEX] = ' ';
     b06:	80 e2       	ldi	r24, 0x20	; 32
     b08:	80 93 9e 01 	sts	0x019E, r24
		savedAlarmString[ALARMVIEWONOFFINDEX+1] = 'O';
     b0c:	8f e4       	ldi	r24, 0x4F	; 79
     b0e:	80 93 9f 01 	sts	0x019F, r24
		savedAlarmString[ALARMVIEWONOFFINDEX+2] = 'N';
     b12:	8e e4       	ldi	r24, 0x4E	; 78
     b14:	80 93 a0 01 	sts	0x01A0, r24
	}
	savedAlarmString[ALARMVIEWHOURSINDEX] = '0'+ currAlarm->Hour/10;
     b18:	e0 91 56 01 	lds	r30, 0x0156
     b1c:	f0 91 57 01 	lds	r31, 0x0157
     b20:	90 81       	ld	r25, Z
     b22:	8d ec       	ldi	r24, 0xCD	; 205
     b24:	98 9f       	mul	r25, r24
     b26:	91 2d       	mov	r25, r1
     b28:	11 24       	eor	r1, r1
     b2a:	96 95       	lsr	r25
     b2c:	96 95       	lsr	r25
     b2e:	96 95       	lsr	r25
     b30:	90 5d       	subi	r25, 0xD0	; 208
     b32:	90 93 a3 01 	sts	0x01A3, r25
	savedAlarmString[ALARMVIEWHOURSINDEX+1] = '0'+ currAlarm->Hour%10;
     b36:	90 81       	ld	r25, Z
     b38:	98 9f       	mul	r25, r24
     b3a:	21 2d       	mov	r18, r1
     b3c:	11 24       	eor	r1, r1
     b3e:	26 95       	lsr	r18
     b40:	26 95       	lsr	r18
     b42:	26 95       	lsr	r18
     b44:	22 0f       	add	r18, r18
     b46:	32 2f       	mov	r19, r18
     b48:	33 0f       	add	r19, r19
     b4a:	33 0f       	add	r19, r19
     b4c:	23 0f       	add	r18, r19
     b4e:	92 1b       	sub	r25, r18
     b50:	90 5d       	subi	r25, 0xD0	; 208
     b52:	90 93 a4 01 	sts	0x01A4, r25
	savedAlarmString[ALARMVIEWCOLONINDEX] = ':';
     b56:	9a e3       	ldi	r25, 0x3A	; 58
     b58:	90 93 a5 01 	sts	0x01A5, r25
	savedAlarmString[ALARMVIEWMINUTESINDEX] = '0'+currAlarm->Minute/10;
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	98 9f       	mul	r25, r24
     b60:	91 2d       	mov	r25, r1
     b62:	11 24       	eor	r1, r1
     b64:	96 95       	lsr	r25
     b66:	96 95       	lsr	r25
     b68:	96 95       	lsr	r25
     b6a:	90 5d       	subi	r25, 0xD0	; 208
     b6c:	90 93 a6 01 	sts	0x01A6, r25
	savedAlarmString[ALARMVIEWMINUTESINDEX+1] = '0'+currAlarm->Minute%10;
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	98 9f       	mul	r25, r24
     b74:	81 2d       	mov	r24, r1
     b76:	11 24       	eor	r1, r1
     b78:	86 95       	lsr	r24
     b7a:	86 95       	lsr	r24
     b7c:	86 95       	lsr	r24
     b7e:	88 0f       	add	r24, r24
     b80:	28 2f       	mov	r18, r24
     b82:	22 0f       	add	r18, r18
     b84:	22 0f       	add	r18, r18
     b86:	82 0f       	add	r24, r18
     b88:	98 1b       	sub	r25, r24
     b8a:	90 5d       	subi	r25, 0xD0	; 208
     b8c:	90 93 a7 01 	sts	0x01A7, r25
	if(currAlarm->IsAM == 0x00){
     b90:	82 81       	ldd	r24, Z+2	; 0x02
     b92:	81 11       	cpse	r24, r1
     b94:	04 c0       	rjmp	.+8      	; 0xb9e <updateAlarmString+0x102>
		//PM
		savedAlarmString[ALARMVIEWAMPMINDEX] = 'P';
     b96:	80 e5       	ldi	r24, 0x50	; 80
     b98:	80 93 a9 01 	sts	0x01A9, r24
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <updateAlarmString+0x108>
	}else{
		//AM
		savedAlarmString[ALARMVIEWAMPMINDEX] = 'A';
     b9e:	81 e4       	ldi	r24, 0x41	; 65
     ba0:	80 93 a9 01 	sts	0x01A9, r24
	}
	savedAlarmString[ALARMVIEWAMPMINDEX+1] = 'M';
     ba4:	8d e4       	ldi	r24, 0x4D	; 77
     ba6:	80 93 aa 01 	sts	0x01AA, r24
     baa:	08 95       	ret

00000bac <LCDDisplaySMTick>:
/*
	State Machine LCDDisplaySM
	NOTE: KEEP THIS SM IN MAIN FILE
	Inputs: eetime time
	Outputs: to HW -> LCD Display */
signed char LCDDisplaySMTick( signed char state ){
     bac:	cf 93       	push	r28
     bae:	c8 2f       	mov	r28, r24
	switch(state){
     bb0:	8f 3f       	cpi	r24, 0xFF	; 255
     bb2:	b1 f4       	brne	.+44     	; 0xbe0 <LCDDisplaySMTick+0x34>
     bb4:	e2 eb       	ldi	r30, 0xB2	; 178
     bb6:	f1 e0       	ldi	r31, 0x01	; 1
/*
	State Machine LCDDisplaySM
	NOTE: KEEP THIS SM IN MAIN FILE
	Inputs: eetime time
	Outputs: to HW -> LCD Display */
signed char LCDDisplaySMTick( signed char state ){
     bb8:	82 ed       	ldi	r24, 0xD2	; 210
     bba:	91 e0       	ldi	r25, 0x01	; 1
		case -1:
			state = LCDDisplay_updatelcd; 
			// initialize anything that is going to be displayed and such
			// initializations for clockview			
			for(unsigned char i = 0; i < 32; ++i){
				timeString[i] = ' ';
     bbc:	20 e2       	ldi	r18, 0x20	; 32
     bbe:	21 93       	st	Z+, r18
			break;
		case -1:
			state = LCDDisplay_updatelcd; 
			// initialize anything that is going to be displayed and such
			// initializations for clockview			
			for(unsigned char i = 0; i < 32; ++i){
     bc0:	e8 17       	cp	r30, r24
     bc2:	f9 07       	cpc	r31, r25
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <LCDDisplaySMTick+0x12>
				timeString[i] = ' ';
			}
			//initializations for Alarms
			savedAlarmIterator = 0;
     bc6:	10 92 ed 01 	sts	0x01ED, r1
     bca:	e2 e9       	ldi	r30, 0x92	; 146
     bcc:	f1 e0       	ldi	r31, 0x01	; 1
/*
	State Machine LCDDisplaySM
	NOTE: KEEP THIS SM IN MAIN FILE
	Inputs: eetime time
	Outputs: to HW -> LCD Display */
signed char LCDDisplaySMTick( signed char state ){
     bce:	82 eb       	ldi	r24, 0xB2	; 178
     bd0:	91 e0       	ldi	r25, 0x01	; 1
				timeString[i] = ' ';
			}
			//initializations for Alarms
			savedAlarmIterator = 0;
			for(unsigned char i = 0; i < 32; ++i){
				savedAlarmString[i] = ' ';
     bd2:	20 e2       	ldi	r18, 0x20	; 32
     bd4:	21 93       	st	Z+, r18
			for(unsigned char i = 0; i < 32; ++i){
				timeString[i] = ' ';
			}
			//initializations for Alarms
			savedAlarmIterator = 0;
			for(unsigned char i = 0; i < 32; ++i){
     bd6:	e8 17       	cp	r30, r24
     bd8:	f9 07       	cpc	r31, r25
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <LCDDisplaySMTick+0x28>
signed char LCDDisplaySMTick( signed char state ){
	switch(state){
		case LCDDisplay_updatelcd:
			break;
		case -1:
			state = LCDDisplay_updatelcd; 
     bdc:	c0 e0       	ldi	r28, 0x00	; 0
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <LCDDisplaySMTick+0x38>
				savedAlarmString[i] = ' ';
			}
			break;
	}

	switch(state){
     be0:	81 11       	cpse	r24, r1
     be2:	2d c0       	rjmp	.+90     	; 0xc3e <LCDDisplaySMTick+0x92>
		case LCDDisplay_updatelcd:
			switch(SYSTEMSTATE){
     be4:	e0 91 d8 01 	lds	r30, 0x01D8
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	ea 31       	cpi	r30, 0x1A	; 26
     bec:	f1 05       	cpc	r31, r1
     bee:	18 f5       	brcc	.+70     	; 0xc36 <LCDDisplaySMTick+0x8a>
     bf0:	e1 5a       	subi	r30, 0xA1	; 161
     bf2:	ff 4f       	sbci	r31, 0xFF	; 255
     bf4:	02 c3       	rjmp	.+1540   	; 0x11fa <__tablejump2__>
				case SystemDriver_init:
					break;
//=========================================================================================
				case SystemDriver_timedisplaytitle:
				case SystemDriver_timedisplaytitle_fall:
					LCD_DisplayString(1, "     Clock ");
     bf6:	6e e0       	ldi	r22, 0x0E	; 14
     bf8:	71 e0       	ldi	r23, 0x01	; 1
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	c5 da       	rcall	.-2678   	; 0x188 <LCD_DisplayString>
					break;
     bfe:	1f c0       	rjmp	.+62     	; 0xc3e <LCDDisplaySMTick+0x92>
				case SystemDriver_timedisplay:
				case SystemDriver_timedisplay_fall:
					updateTimeString();
     c00:	bf dc       	rcall	.-1666   	; 0x580 <updateTimeString>
					LCD_DisplayString(1, timeString);
     c02:	62 eb       	ldi	r22, 0xB2	; 178
     c04:	71 e0       	ldi	r23, 0x01	; 1
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	bf da       	rcall	.-2690   	; 0x188 <LCD_DisplayString>
					break;
     c0a:	19 c0       	rjmp	.+50     	; 0xc3e <LCDDisplaySMTick+0x92>
				case SystemDriver_timedisplaytitle_nextmenuitem:
					break;
//=========================================================================================
				case SystemDriver_alarmaddtitle:
				case SystemDriver_alarmaddtitle_fall:
					LCD_DisplayString(1, "Add Alarm");
     c0c:	6a e1       	ldi	r22, 0x1A	; 26
     c0e:	71 e0       	ldi	r23, 0x01	; 1
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	ba da       	rcall	.-2700   	; 0x188 <LCD_DisplayString>
					break;
     c14:	14 c0       	rjmp	.+40     	; 0xc3e <LCDDisplaySMTick+0x92>
				case SystemDriver_alarmaddscroll:
				case SystemDriver_alarmaddscroll_fall:
					LCD_DisplayString(1, "alarmaddscroll");
     c16:	64 e2       	ldi	r22, 0x24	; 36
     c18:	71 e0       	ldi	r23, 0x01	; 1
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	b5 da       	rcall	.-2710   	; 0x188 <LCD_DisplayString>
					break;
     c1e:	0f c0       	rjmp	.+30     	; 0xc3e <LCDDisplaySMTick+0x92>

*/
//=======================================================================================
				case SystemDriver_alarmviewtitle:
				case SystemDriver_alarmviewtitle_fall:
					LCD_DisplayString(1, "     Alarms");
     c20:	63 e3       	ldi	r22, 0x33	; 51
     c22:	71 e0       	ldi	r23, 0x01	; 1
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	b0 da       	rcall	.-2720   	; 0x188 <LCD_DisplayString>
					break;
     c28:	0a c0       	rjmp	.+20     	; 0xc3e <LCDDisplaySMTick+0x92>
				case SystemDriver_alarmview_HH_fall:
				case SystemDriver_alarmview_MM:
				case SystemDriver_alarmview_MM_fall:
				case SystemDriver_alarmview:
				case SystemDriver_alarmview_fall:
					updateAlarmString();
     c2a:	38 df       	rcall	.-400    	; 0xa9c <updateAlarmString>
					LCD_DisplayString(1, savedAlarmString);
     c2c:	62 e9       	ldi	r22, 0x92	; 146
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	aa da       	rcall	.-2732   	; 0x188 <LCD_DisplayString>
					break;
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <LCDDisplaySMTick+0x92>
				case SystemDriver_alarmview_back_fall:
					break;
				case SystemDriver_alarmview_nextmenuitem:
					break;
				default:
					LCD_DisplayString(1, "Initializing");
     c36:	6f e3       	ldi	r22, 0x3F	; 63
     c38:	71 e0       	ldi	r23, 0x01	; 1
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	a5 da       	rcall	.-2742   	; 0x188 <LCD_DisplayString>
		default: 
			break;
	}

	return state;
}
     c3e:	8c 2f       	mov	r24, r28
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <AlarmOn>:
}

void AlarmOn(){
	PWM_on();
     c44:	8e dc       	rcall	.-1764   	; 0x562 <PWM_on>
	set_PWM(261.63);
     c46:	64 ea       	ldi	r22, 0xA4	; 164
     c48:	70 ed       	ldi	r23, 0xD0	; 208
     c4a:	82 e8       	ldi	r24, 0x82	; 130
     c4c:	93 e4       	ldi	r25, 0x43	; 67
     c4e:	20 cc       	rjmp	.-1984   	; 0x490 <set_PWM>

00000c50 <AlarmOff>:
}
void AlarmOff(){
	PWM_off();
     c50:	92 cc       	rjmp	.-1756   	; 0x576 <PWM_off>
     c52:	08 95       	ret

00000c54 <CheckAlarmSMTick>:
}

enum CheckAlarmSMStates { CheckAlarm_checkcurrenttime, CheckAlarm_AlarmOn };
signed char CheckAlarmSMTick(signed char state){
     c54:	cf 93       	push	r28
     c56:	c8 2f       	mov	r28, r24
	switch(state){
     c58:	88 23       	and	r24, r24
     c5a:	19 f0       	breq	.+6      	; 0xc62 <CheckAlarmSMTick+0xe>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	e9 f4       	brne	.+58     	; 0xc9a <CheckAlarmSMTick+0x46>
     c60:	0e c0       	rjmp	.+28     	; 0xc7e <CheckAlarmSMTick+0x2a>
		case CheckAlarm_checkcurrenttime:
			if(minuteTickFlag == 0xFF){
     c62:	80 91 91 01 	lds	r24, 0x0191
     c66:	8f 3f       	cpi	r24, 0xFF	; 255
     c68:	d9 f4       	brne	.+54     	; 0xca0 <CheckAlarmSMTick+0x4c>
				checkAlarms();
     c6a:	e7 de       	rcall	.-562    	; 0xa3a <checkAlarms>
				if( ALARMON == ALARMACTIVE){
     c6c:	80 91 d3 01 	lds	r24, 0x01D3
     c70:	8f 3f       	cpi	r24, 0xFF	; 255
     c72:	11 f4       	brne	.+4      	; 0xc78 <CheckAlarmSMTick+0x24>
					// activate alarm mechanism here!
					AlarmOn();
     c74:	e7 df       	rcall	.-50     	; 0xc44 <AlarmOn>
					state = CheckAlarm_AlarmOn;
     c76:	c1 e0       	ldi	r28, 0x01	; 1
				}
				minuteTickFlag = 0x00;					// must reset minuteTickFlag
     c78:	10 92 91 01 	sts	0x0191, r1
     c7c:	11 c0       	rjmp	.+34     	; 0xca0 <CheckAlarmSMTick+0x4c>
			}
			break;
		case CheckAlarm_AlarmOn:
			if(minuteTickFlag == 0xFF){
     c7e:	80 91 91 01 	lds	r24, 0x0191
     c82:	8f 3f       	cpi	r24, 0xFF	; 255
     c84:	11 f4       	brne	.+4      	; 0xc8a <CheckAlarmSMTick+0x36>
				minuteTickFlag = 0x00;
     c86:	10 92 91 01 	sts	0x0191, r1
			}
			if(ALARMON == ALARMINACTIVE){ // ALARMON disabled by button
     c8a:	80 91 d3 01 	lds	r24, 0x01D3
     c8e:	81 11       	cpse	r24, r1
     c90:	07 c0       	rjmp	.+14     	; 0xca0 <CheckAlarmSMTick+0x4c>
				disableAlarm();			  // disable the active alarm and change state to check time
     c92:	c6 de       	rcall	.-628    	; 0xa20 <disableAlarm>
				AlarmOff();
     c94:	dd df       	rcall	.-70     	; 0xc50 <AlarmOff>
				state = CheckAlarm_checkcurrenttime;
     c96:	c0 e0       	ldi	r28, 0x00	; 0
     c98:	03 c0       	rjmp	.+6      	; 0xca0 <CheckAlarmSMTick+0x4c>
			}
			break;
		default:
			ALARMON = ALARMINACTIVE;
     c9a:	10 92 d3 01 	sts	0x01D3, r1
			state = CheckAlarm_checkcurrenttime;
     c9e:	c0 e0       	ldi	r28, 0x00	; 0
		break;
	}
	return state;
}
     ca0:	8c 2f       	mov	r24, r28
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <main>:
// End State Machine drivers
// 

// Scheduler
int main(void)
{
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	2a 97       	sbiw	r28, 0x0a	; 10
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
	// Set DDR and initialise PORTs
	//Keypad on A
	DDRA = 0xF0; PORTA = 0x0F;
     cba:	80 ef       	ldi	r24, 0xF0	; 240
     cbc:	81 b9       	out	0x01, r24	; 1
     cbe:	8f e0       	ldi	r24, 0x0F	; 15
     cc0:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
     cc2:	1f ef       	ldi	r17, 0xFF	; 255
     cc4:	14 b9       	out	0x04, r17	; 4
     cc6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
     cc8:	17 b9       	out	0x07, r17	; 7
     cca:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
     ccc:	1a b9       	out	0x0a, r17	; 10
     cce:	1b b8       	out	0x0b, r1	; 11
	unsigned long int UpdateInputSM_calc = 100; // 100ms period
	unsigned long int SystemDriverSM_calc = 100; // 100ms period
	unsigned long int CheckAlarmSM_calc = 100; // 100ms period
	// Calculate GCD	
	unsigned long int tmpGCD = 1;
	tmpGCD = findGCD(TimeCrunchSM_calc, LCDDisplaySM_calc );
     cd0:	28 ee       	ldi	r18, 0xE8	; 232
     cd2:	33 e0       	ldi	r19, 0x03	; 3
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	68 ee       	ldi	r22, 0xE8	; 232
     cda:	73 e0       	ldi	r23, 0x03	; 3
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	b9 da       	rcall	.-2702   	; 0x254 <findGCD>
	tmpGCD = findGCD(tmpGCD, UpdateInputSM_calc);
     ce2:	24 e6       	ldi	r18, 0x64	; 100
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	50 e0       	ldi	r21, 0x00	; 0
     cea:	b4 da       	rcall	.-2712   	; 0x254 <findGCD>
	tmpGCD = findGCD(tmpGCD, SystemDriverSM_calc);
     cec:	24 e6       	ldi	r18, 0x64	; 100
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	af da       	rcall	.-2722   	; 0x254 <findGCD>
	tmpGCD = findGCD(tmpGCD, CheckAlarmSM_calc);
     cf6:	24 e6       	ldi	r18, 0x64	; 100
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e0       	ldi	r20, 0x00	; 0
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	aa da       	rcall	.-2732   	; 0x254 <findGCD>
     d00:	6b 01       	movw	r12, r22
     d02:	7c 01       	movw	r14, r24
	//tmpGCD = findGCD(tmpGCD, ... );
		
	unsigned long int GCD = tmpGCD;
	
	// Recalculate GCD periods for scheduler
	unsigned long int TimeCrunchSM_period = TimeCrunchSM_calc/GCD;
     d04:	68 ee       	ldi	r22, 0xE8	; 232
     d06:	73 e0       	ldi	r23, 0x03	; 3
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	a7 01       	movw	r20, r14
     d0e:	96 01       	movw	r18, r12
     d10:	52 d2       	rcall	.+1188   	; 0x11b6 <__udivmodsi4>
     d12:	92 2e       	mov	r9, r18
     d14:	a3 2e       	mov	r10, r19
     d16:	b4 2e       	mov	r11, r20
     d18:	05 2f       	mov	r16, r21
	unsigned long int LCDDisplaySM_period = LCDDisplaySM_calc/GCD;
	unsigned long int UpdateInputSM_period = UpdateInputSM_calc/GCD;
     d1a:	64 e6       	ldi	r22, 0x64	; 100
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a7 01       	movw	r20, r14
     d24:	96 01       	movw	r18, r12
     d26:	47 d2       	rcall	.+1166   	; 0x11b6 <__udivmodsi4>
				LCDDisplaySMTask,
				UpdateInputSMTask,
				SystemDriverSMTask,
				CheckAlarmSMTask;
	// keep display at the end, checkalarm after TimeCrunchSM. keep UpdateInput in the beginning and SystemDriverSM second
	task *tasks[] = {&UpdateInputSMTask, &SystemDriverSMTask, &TimeCrunchSMTask, &CheckAlarmSMTask, &LCDDisplaySMTask}; 
     d28:	8a e0       	ldi	r24, 0x0A	; 10
     d2a:	e4 e0       	ldi	r30, 0x04	; 4
     d2c:	f1 e0       	ldi	r31, 0x01	; 1
     d2e:	de 01       	movw	r26, r28
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	01 90       	ld	r0, Z+
     d34:	0d 92       	st	X+, r0
     d36:	8a 95       	dec	r24
     d38:	e1 f7       	brne	.-8      	; 0xd32 <main+0x8c>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	//UpdateInputSM declaration
	UpdateInputSMTask.state = -1;
     d3a:	10 93 59 01 	sts	0x0159, r17
	UpdateInputSMTask.period = UpdateInputSMTask.elapsedTime = UpdateInputSM_period;
     d3e:	ee e5       	ldi	r30, 0x5E	; 94
     d40:	f1 e0       	ldi	r31, 0x01	; 1
     d42:	20 83       	st	Z, r18
     d44:	31 83       	std	Z+1, r19	; 0x01
     d46:	42 83       	std	Z+2, r20	; 0x02
     d48:	53 83       	std	Z+3, r21	; 0x03
     d4a:	ea e5       	ldi	r30, 0x5A	; 90
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	20 83       	st	Z, r18
     d50:	31 83       	std	Z+1, r19	; 0x01
     d52:	42 83       	std	Z+2, r20	; 0x02
     d54:	53 83       	std	Z+3, r21	; 0x03
	UpdateInputSMTask.TickFct = &UpdateInputSMTick;
     d56:	8e e2       	ldi	r24, 0x2E	; 46
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	90 93 63 01 	sts	0x0163, r25
     d5e:	80 93 62 01 	sts	0x0162, r24
	
	//SystemDriverSM declaration
	SystemDriverSMTask.state = -1;
     d62:	10 93 64 01 	sts	0x0164, r17
	SystemDriverSMTask.period = SystemDriverSMTask.elapsedTime = SystemDriverSM_period;
     d66:	e9 e6       	ldi	r30, 0x69	; 105
     d68:	f1 e0       	ldi	r31, 0x01	; 1
     d6a:	20 83       	st	Z, r18
     d6c:	31 83       	std	Z+1, r19	; 0x01
     d6e:	42 83       	std	Z+2, r20	; 0x02
     d70:	53 83       	std	Z+3, r21	; 0x03
     d72:	e5 e6       	ldi	r30, 0x65	; 101
     d74:	f1 e0       	ldi	r31, 0x01	; 1
     d76:	20 83       	st	Z, r18
     d78:	31 83       	std	Z+1, r19	; 0x01
     d7a:	42 83       	std	Z+2, r20	; 0x02
     d7c:	53 83       	std	Z+3, r21	; 0x03
	SystemDriverSMTask.TickFct = &SystemDriverSMTick;
     d7e:	8b ea       	ldi	r24, 0xAB	; 171
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	90 93 6e 01 	sts	0x016E, r25
     d86:	80 93 6d 01 	sts	0x016D, r24
	
	// TimeCrunchSM declaration
	TimeCrunchSMTask.state = -1;
     d8a:	10 93 6f 01 	sts	0x016F, r17
	TimeCrunchSMTask.period = TimeCrunchSMTask.elapsedTime = TimeCrunchSM_period;
     d8e:	e4 e7       	ldi	r30, 0x74	; 116
     d90:	f1 e0       	ldi	r31, 0x01	; 1
     d92:	90 82       	st	Z, r9
     d94:	a1 82       	std	Z+1, r10	; 0x01
     d96:	b2 82       	std	Z+2, r11	; 0x02
     d98:	03 83       	std	Z+3, r16	; 0x03
     d9a:	e0 e7       	ldi	r30, 0x70	; 112
     d9c:	f1 e0       	ldi	r31, 0x01	; 1
     d9e:	90 82       	st	Z, r9
     da0:	a1 82       	std	Z+1, r10	; 0x01
     da2:	b2 82       	std	Z+2, r11	; 0x02
     da4:	03 83       	std	Z+3, r16	; 0x03
	TimeCrunchSMTask.TickFct = &TimeCrunchSMTick;
     da6:	8b ee       	ldi	r24, 0xEB	; 235
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	90 93 79 01 	sts	0x0179, r25
     dae:	80 93 78 01 	sts	0x0178, r24

	//LCDDisplaySM declaration
	LCDDisplaySMTask.state = -1;
     db2:	10 93 7a 01 	sts	0x017A, r17
	LCDDisplaySMTask.period = LCDDisplaySMTask.elapsedTime = LCDDisplaySM_period;
     db6:	ef e7       	ldi	r30, 0x7F	; 127
     db8:	f1 e0       	ldi	r31, 0x01	; 1
     dba:	90 82       	st	Z, r9
     dbc:	a1 82       	std	Z+1, r10	; 0x01
     dbe:	b2 82       	std	Z+2, r11	; 0x02
     dc0:	03 83       	std	Z+3, r16	; 0x03
     dc2:	eb e7       	ldi	r30, 0x7B	; 123
     dc4:	f1 e0       	ldi	r31, 0x01	; 1
     dc6:	90 82       	st	Z, r9
     dc8:	a1 82       	std	Z+1, r10	; 0x01
     dca:	b2 82       	std	Z+2, r11	; 0x02
     dcc:	03 83       	std	Z+3, r16	; 0x03
	LCDDisplaySMTask.TickFct = &LCDDisplaySMTick;
     dce:	86 ed       	ldi	r24, 0xD6	; 214
     dd0:	95 e0       	ldi	r25, 0x05	; 5
     dd2:	90 93 84 01 	sts	0x0184, r25
     dd6:	80 93 83 01 	sts	0x0183, r24
	
	//CheckAlarmSM declaration
	CheckAlarmSMTask.state = -1;
     dda:	10 93 85 01 	sts	0x0185, r17
	CheckAlarmSMTask.period = CheckAlarmSMTask.elapsedTime = CheckAlarmSM_period;
     dde:	ea e8       	ldi	r30, 0x8A	; 138
     de0:	f1 e0       	ldi	r31, 0x01	; 1
     de2:	20 83       	st	Z, r18
     de4:	31 83       	std	Z+1, r19	; 0x01
     de6:	42 83       	std	Z+2, r20	; 0x02
     de8:	53 83       	std	Z+3, r21	; 0x03
     dea:	e6 e8       	ldi	r30, 0x86	; 134
     dec:	f1 e0       	ldi	r31, 0x01	; 1
     dee:	20 83       	st	Z, r18
     df0:	31 83       	std	Z+1, r19	; 0x01
     df2:	42 83       	std	Z+2, r20	; 0x02
     df4:	53 83       	std	Z+3, r21	; 0x03
	CheckAlarmSMTask.TickFct = &CheckAlarmSMTick;
     df6:	8a e2       	ldi	r24, 0x2A	; 42
     df8:	96 e0       	ldi	r25, 0x06	; 6
     dfa:	90 93 8f 01 	sts	0x018F, r25
     dfe:	80 93 8e 01 	sts	0x018E, r24
	// HW initializations ======================================================
	// Set timer and turn it on
	TimerSet(GCD);
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	55 da       	rcall	.-2902   	; 0x2b2 <TimerSet>
	TimerOn();
     e08:	65 da       	rcall	.-2870   	; 0x2d4 <TimerOn>
	// Start LCD
	LCD_init();
     e0a:	d7 d9       	rcall	.-3154   	; 0x1ba <LCD_init>
	// MEM initializations ======================================================
	initializeSavedAlarms(); // zero saved Alarms 
     e0c:	30 dc       	rcall	.-1952   	; 0x66e <initializeSavedAlarms>
	//loadAlarmsFromEEPROM();  // load Alarms if previously saved.
	
	unsigned short i; // for loop iterator
    while(1)
    {
		for(i=0; i<numTasks; ++i){
     e0e:	00 e0       	ldi	r16, 0x00	; 0
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	c1 2c       	mov	r12, r1
     e14:	d1 2c       	mov	r13, r1
     e16:	38 c0       	rjmp	.+112    	; 0xe88 <main+0x1e2>
			if(tasks[i]->elapsedTime == tasks[i]->period){
     e18:	f8 01       	movw	r30, r16
     e1a:	ee 0f       	add	r30, r30
     e1c:	ff 1f       	adc	r31, r31
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	8c 0f       	add	r24, r28
     e24:	9d 1f       	adc	r25, r29
     e26:	e8 0f       	add	r30, r24
     e28:	f9 1f       	adc	r31, r25
     e2a:	e0 80       	ld	r14, Z
     e2c:	f1 80       	ldd	r15, Z+1	; 0x01
     e2e:	d7 01       	movw	r26, r14
     e30:	15 96       	adiw	r26, 0x05	; 5
     e32:	4d 91       	ld	r20, X+
     e34:	5d 91       	ld	r21, X+
     e36:	6d 91       	ld	r22, X+
     e38:	7c 91       	ld	r23, X
     e3a:	18 97       	sbiw	r26, 0x08	; 8
     e3c:	11 96       	adiw	r26, 0x01	; 1
     e3e:	8d 91       	ld	r24, X+
     e40:	9d 91       	ld	r25, X+
     e42:	0d 90       	ld	r0, X+
     e44:	bc 91       	ld	r27, X
     e46:	a0 2d       	mov	r26, r0
     e48:	48 17       	cp	r20, r24
     e4a:	59 07       	cpc	r21, r25
     e4c:	6a 07       	cpc	r22, r26
     e4e:	7b 07       	cpc	r23, r27
     e50:	69 f4       	brne	.+26     	; 0xe6c <main+0x1c6>
				// tick and set next state
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
     e52:	d7 01       	movw	r26, r14
     e54:	19 96       	adiw	r26, 0x09	; 9
     e56:	ed 91       	ld	r30, X+
     e58:	fc 91       	ld	r31, X
     e5a:	1a 97       	sbiw	r26, 0x0a	; 10
     e5c:	8c 91       	ld	r24, X
     e5e:	09 95       	icall
     e60:	f7 01       	movw	r30, r14
     e62:	80 83       	st	Z, r24
				//reset elapsed time
				tasks[i]->elapsedTime = 0;
     e64:	15 82       	std	Z+5, r1	; 0x05
     e66:	16 82       	std	Z+6, r1	; 0x06
     e68:	17 82       	std	Z+7, r1	; 0x07
     e6a:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
     e6c:	f7 01       	movw	r30, r14
     e6e:	85 81       	ldd	r24, Z+5	; 0x05
     e70:	96 81       	ldd	r25, Z+6	; 0x06
     e72:	a7 81       	ldd	r26, Z+7	; 0x07
     e74:	b0 85       	ldd	r27, Z+8	; 0x08
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	a1 1d       	adc	r26, r1
     e7a:	b1 1d       	adc	r27, r1
     e7c:	85 83       	std	Z+5, r24	; 0x05
     e7e:	96 83       	std	Z+6, r25	; 0x06
     e80:	a7 83       	std	Z+7, r26	; 0x07
     e82:	b0 87       	std	Z+8, r27	; 0x08
	//loadAlarmsFromEEPROM();  // load Alarms if previously saved.
	
	unsigned short i; // for loop iterator
    while(1)
    {
		for(i=0; i<numTasks; ++i){
     e84:	0f 5f       	subi	r16, 0xFF	; 255
     e86:	1f 4f       	sbci	r17, 0xFF	; 255
     e88:	05 30       	cpi	r16, 0x05	; 5
     e8a:	11 05       	cpc	r17, r1
     e8c:	28 f2       	brcs	.-118    	; 0xe18 <main+0x172>
				//reset elapsed time
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
     e8e:	80 91 50 01 	lds	r24, 0x0150
     e92:	88 23       	and	r24, r24
     e94:	e1 f3       	breq	.-8      	; 0xe8e <main+0x1e8>
		TimerFlag = 0;
     e96:	10 92 50 01 	sts	0x0150, r1
	//loadAlarmsFromEEPROM();  // load Alarms if previously saved.
	
	unsigned short i; // for loop iterator
    while(1)
    {
		for(i=0; i<numTasks; ++i){
     e9a:	86 01       	movw	r16, r12
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
		TimerFlag = 0;
    }
     e9c:	f5 cf       	rjmp	.-22     	; 0xe88 <main+0x1e2>

00000e9e <__cmpsf2>:
     e9e:	9c d0       	rcall	.+312    	; 0xfd8 <__fp_cmp>
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <__cmpsf2+0x6>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	08 95       	ret

00000ea6 <__divsf3>:
     ea6:	0c d0       	rcall	.+24     	; 0xec0 <__divsf3x>
     ea8:	d2 c0       	rjmp	.+420    	; 0x104e <__fp_round>
     eaa:	ca d0       	rcall	.+404    	; 0x1040 <__fp_pscB>
     eac:	40 f0       	brcs	.+16     	; 0xebe <__divsf3+0x18>
     eae:	c1 d0       	rcall	.+386    	; 0x1032 <__fp_pscA>
     eb0:	30 f0       	brcs	.+12     	; 0xebe <__divsf3+0x18>
     eb2:	21 f4       	brne	.+8      	; 0xebc <__divsf3+0x16>
     eb4:	5f 3f       	cpi	r21, 0xFF	; 255
     eb6:	19 f0       	breq	.+6      	; 0xebe <__divsf3+0x18>
     eb8:	b3 c0       	rjmp	.+358    	; 0x1020 <__fp_inf>
     eba:	51 11       	cpse	r21, r1
     ebc:	fc c0       	rjmp	.+504    	; 0x10b6 <__fp_szero>
     ebe:	b6 c0       	rjmp	.+364    	; 0x102c <__fp_nan>

00000ec0 <__divsf3x>:
     ec0:	d7 d0       	rcall	.+430    	; 0x1070 <__fp_split3>
     ec2:	98 f3       	brcs	.-26     	; 0xeaa <__divsf3+0x4>

00000ec4 <__divsf3_pse>:
     ec4:	99 23       	and	r25, r25
     ec6:	c9 f3       	breq	.-14     	; 0xeba <__divsf3+0x14>
     ec8:	55 23       	and	r21, r21
     eca:	b1 f3       	breq	.-20     	; 0xeb8 <__divsf3+0x12>
     ecc:	95 1b       	sub	r25, r21
     ece:	55 0b       	sbc	r21, r21
     ed0:	bb 27       	eor	r27, r27
     ed2:	aa 27       	eor	r26, r26
     ed4:	62 17       	cp	r22, r18
     ed6:	73 07       	cpc	r23, r19
     ed8:	84 07       	cpc	r24, r20
     eda:	38 f0       	brcs	.+14     	; 0xeea <__divsf3_pse+0x26>
     edc:	9f 5f       	subi	r25, 0xFF	; 255
     ede:	5f 4f       	sbci	r21, 0xFF	; 255
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	44 1f       	adc	r20, r20
     ee6:	aa 1f       	adc	r26, r26
     ee8:	a9 f3       	breq	.-22     	; 0xed4 <__divsf3_pse+0x10>
     eea:	33 d0       	rcall	.+102    	; 0xf52 <__divsf3_pse+0x8e>
     eec:	0e 2e       	mov	r0, r30
     eee:	3a f0       	brmi	.+14     	; 0xefe <__divsf3_pse+0x3a>
     ef0:	e0 e8       	ldi	r30, 0x80	; 128
     ef2:	30 d0       	rcall	.+96     	; 0xf54 <__divsf3_pse+0x90>
     ef4:	91 50       	subi	r25, 0x01	; 1
     ef6:	50 40       	sbci	r21, 0x00	; 0
     ef8:	e6 95       	lsr	r30
     efa:	00 1c       	adc	r0, r0
     efc:	ca f7       	brpl	.-14     	; 0xef0 <__divsf3_pse+0x2c>
     efe:	29 d0       	rcall	.+82     	; 0xf52 <__divsf3_pse+0x8e>
     f00:	fe 2f       	mov	r31, r30
     f02:	27 d0       	rcall	.+78     	; 0xf52 <__divsf3_pse+0x8e>
     f04:	66 0f       	add	r22, r22
     f06:	77 1f       	adc	r23, r23
     f08:	88 1f       	adc	r24, r24
     f0a:	bb 1f       	adc	r27, r27
     f0c:	26 17       	cp	r18, r22
     f0e:	37 07       	cpc	r19, r23
     f10:	48 07       	cpc	r20, r24
     f12:	ab 07       	cpc	r26, r27
     f14:	b0 e8       	ldi	r27, 0x80	; 128
     f16:	09 f0       	breq	.+2      	; 0xf1a <__divsf3_pse+0x56>
     f18:	bb 0b       	sbc	r27, r27
     f1a:	80 2d       	mov	r24, r0
     f1c:	bf 01       	movw	r22, r30
     f1e:	ff 27       	eor	r31, r31
     f20:	93 58       	subi	r25, 0x83	; 131
     f22:	5f 4f       	sbci	r21, 0xFF	; 255
     f24:	2a f0       	brmi	.+10     	; 0xf30 <__divsf3_pse+0x6c>
     f26:	9e 3f       	cpi	r25, 0xFE	; 254
     f28:	51 05       	cpc	r21, r1
     f2a:	68 f0       	brcs	.+26     	; 0xf46 <__divsf3_pse+0x82>
     f2c:	79 c0       	rjmp	.+242    	; 0x1020 <__fp_inf>
     f2e:	c3 c0       	rjmp	.+390    	; 0x10b6 <__fp_szero>
     f30:	5f 3f       	cpi	r21, 0xFF	; 255
     f32:	ec f3       	brlt	.-6      	; 0xf2e <__divsf3_pse+0x6a>
     f34:	98 3e       	cpi	r25, 0xE8	; 232
     f36:	dc f3       	brlt	.-10     	; 0xf2e <__divsf3_pse+0x6a>
     f38:	86 95       	lsr	r24
     f3a:	77 95       	ror	r23
     f3c:	67 95       	ror	r22
     f3e:	b7 95       	ror	r27
     f40:	f7 95       	ror	r31
     f42:	9f 5f       	subi	r25, 0xFF	; 255
     f44:	c9 f7       	brne	.-14     	; 0xf38 <__divsf3_pse+0x74>
     f46:	88 0f       	add	r24, r24
     f48:	91 1d       	adc	r25, r1
     f4a:	96 95       	lsr	r25
     f4c:	87 95       	ror	r24
     f4e:	97 f9       	bld	r25, 7
     f50:	08 95       	ret
     f52:	e1 e0       	ldi	r30, 0x01	; 1
     f54:	66 0f       	add	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	88 1f       	adc	r24, r24
     f5a:	bb 1f       	adc	r27, r27
     f5c:	62 17       	cp	r22, r18
     f5e:	73 07       	cpc	r23, r19
     f60:	84 07       	cpc	r24, r20
     f62:	ba 07       	cpc	r27, r26
     f64:	20 f0       	brcs	.+8      	; 0xf6e <__divsf3_pse+0xaa>
     f66:	62 1b       	sub	r22, r18
     f68:	73 0b       	sbc	r23, r19
     f6a:	84 0b       	sbc	r24, r20
     f6c:	ba 0b       	sbc	r27, r26
     f6e:	ee 1f       	adc	r30, r30
     f70:	88 f7       	brcc	.-30     	; 0xf54 <__divsf3_pse+0x90>
     f72:	e0 95       	com	r30
     f74:	08 95       	ret

00000f76 <__fixsfsi>:
     f76:	04 d0       	rcall	.+8      	; 0xf80 <__fixunssfsi>
     f78:	68 94       	set
     f7a:	b1 11       	cpse	r27, r1
     f7c:	9c c0       	rjmp	.+312    	; 0x10b6 <__fp_szero>
     f7e:	08 95       	ret

00000f80 <__fixunssfsi>:
     f80:	7f d0       	rcall	.+254    	; 0x1080 <__fp_splitA>
     f82:	88 f0       	brcs	.+34     	; 0xfa6 <__fixunssfsi+0x26>
     f84:	9f 57       	subi	r25, 0x7F	; 127
     f86:	90 f0       	brcs	.+36     	; 0xfac <__fixunssfsi+0x2c>
     f88:	b9 2f       	mov	r27, r25
     f8a:	99 27       	eor	r25, r25
     f8c:	b7 51       	subi	r27, 0x17	; 23
     f8e:	a0 f0       	brcs	.+40     	; 0xfb8 <__fixunssfsi+0x38>
     f90:	d1 f0       	breq	.+52     	; 0xfc6 <__fixunssfsi+0x46>
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	88 1f       	adc	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	1a f0       	brmi	.+6      	; 0xfa2 <__fixunssfsi+0x22>
     f9c:	ba 95       	dec	r27
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <__fixunssfsi+0x12>
     fa0:	12 c0       	rjmp	.+36     	; 0xfc6 <__fixunssfsi+0x46>
     fa2:	b1 30       	cpi	r27, 0x01	; 1
     fa4:	81 f0       	breq	.+32     	; 0xfc6 <__fixunssfsi+0x46>
     fa6:	86 d0       	rcall	.+268    	; 0x10b4 <__fp_zero>
     fa8:	b1 e0       	ldi	r27, 0x01	; 1
     faa:	08 95       	ret
     fac:	83 c0       	rjmp	.+262    	; 0x10b4 <__fp_zero>
     fae:	67 2f       	mov	r22, r23
     fb0:	78 2f       	mov	r23, r24
     fb2:	88 27       	eor	r24, r24
     fb4:	b8 5f       	subi	r27, 0xF8	; 248
     fb6:	39 f0       	breq	.+14     	; 0xfc6 <__fixunssfsi+0x46>
     fb8:	b9 3f       	cpi	r27, 0xF9	; 249
     fba:	cc f3       	brlt	.-14     	; 0xfae <__fixunssfsi+0x2e>
     fbc:	86 95       	lsr	r24
     fbe:	77 95       	ror	r23
     fc0:	67 95       	ror	r22
     fc2:	b3 95       	inc	r27
     fc4:	d9 f7       	brne	.-10     	; 0xfbc <__fixunssfsi+0x3c>
     fc6:	3e f4       	brtc	.+14     	; 0xfd6 <__fixunssfsi+0x56>
     fc8:	90 95       	com	r25
     fca:	80 95       	com	r24
     fcc:	70 95       	com	r23
     fce:	61 95       	neg	r22
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	8f 4f       	sbci	r24, 0xFF	; 255
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	08 95       	ret

00000fd8 <__fp_cmp>:
     fd8:	99 0f       	add	r25, r25
     fda:	00 08       	sbc	r0, r0
     fdc:	55 0f       	add	r21, r21
     fde:	aa 0b       	sbc	r26, r26
     fe0:	e0 e8       	ldi	r30, 0x80	; 128
     fe2:	fe ef       	ldi	r31, 0xFE	; 254
     fe4:	16 16       	cp	r1, r22
     fe6:	17 06       	cpc	r1, r23
     fe8:	e8 07       	cpc	r30, r24
     fea:	f9 07       	cpc	r31, r25
     fec:	c0 f0       	brcs	.+48     	; 0x101e <__fp_cmp+0x46>
     fee:	12 16       	cp	r1, r18
     ff0:	13 06       	cpc	r1, r19
     ff2:	e4 07       	cpc	r30, r20
     ff4:	f5 07       	cpc	r31, r21
     ff6:	98 f0       	brcs	.+38     	; 0x101e <__fp_cmp+0x46>
     ff8:	62 1b       	sub	r22, r18
     ffa:	73 0b       	sbc	r23, r19
     ffc:	84 0b       	sbc	r24, r20
     ffe:	95 0b       	sbc	r25, r21
    1000:	39 f4       	brne	.+14     	; 0x1010 <__fp_cmp+0x38>
    1002:	0a 26       	eor	r0, r26
    1004:	61 f0       	breq	.+24     	; 0x101e <__fp_cmp+0x46>
    1006:	23 2b       	or	r18, r19
    1008:	24 2b       	or	r18, r20
    100a:	25 2b       	or	r18, r21
    100c:	21 f4       	brne	.+8      	; 0x1016 <__fp_cmp+0x3e>
    100e:	08 95       	ret
    1010:	0a 26       	eor	r0, r26
    1012:	09 f4       	brne	.+2      	; 0x1016 <__fp_cmp+0x3e>
    1014:	a1 40       	sbci	r26, 0x01	; 1
    1016:	a6 95       	lsr	r26
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	81 1d       	adc	r24, r1
    101c:	81 1d       	adc	r24, r1
    101e:	08 95       	ret

00001020 <__fp_inf>:
    1020:	97 f9       	bld	r25, 7
    1022:	9f 67       	ori	r25, 0x7F	; 127
    1024:	80 e8       	ldi	r24, 0x80	; 128
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	08 95       	ret

0000102c <__fp_nan>:
    102c:	9f ef       	ldi	r25, 0xFF	; 255
    102e:	80 ec       	ldi	r24, 0xC0	; 192
    1030:	08 95       	ret

00001032 <__fp_pscA>:
    1032:	00 24       	eor	r0, r0
    1034:	0a 94       	dec	r0
    1036:	16 16       	cp	r1, r22
    1038:	17 06       	cpc	r1, r23
    103a:	18 06       	cpc	r1, r24
    103c:	09 06       	cpc	r0, r25
    103e:	08 95       	ret

00001040 <__fp_pscB>:
    1040:	00 24       	eor	r0, r0
    1042:	0a 94       	dec	r0
    1044:	12 16       	cp	r1, r18
    1046:	13 06       	cpc	r1, r19
    1048:	14 06       	cpc	r1, r20
    104a:	05 06       	cpc	r0, r21
    104c:	08 95       	ret

0000104e <__fp_round>:
    104e:	09 2e       	mov	r0, r25
    1050:	03 94       	inc	r0
    1052:	00 0c       	add	r0, r0
    1054:	11 f4       	brne	.+4      	; 0x105a <__fp_round+0xc>
    1056:	88 23       	and	r24, r24
    1058:	52 f0       	brmi	.+20     	; 0x106e <__fp_round+0x20>
    105a:	bb 0f       	add	r27, r27
    105c:	40 f4       	brcc	.+16     	; 0x106e <__fp_round+0x20>
    105e:	bf 2b       	or	r27, r31
    1060:	11 f4       	brne	.+4      	; 0x1066 <__fp_round+0x18>
    1062:	60 ff       	sbrs	r22, 0
    1064:	04 c0       	rjmp	.+8      	; 0x106e <__fp_round+0x20>
    1066:	6f 5f       	subi	r22, 0xFF	; 255
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	08 95       	ret

00001070 <__fp_split3>:
    1070:	57 fd       	sbrc	r21, 7
    1072:	90 58       	subi	r25, 0x80	; 128
    1074:	44 0f       	add	r20, r20
    1076:	55 1f       	adc	r21, r21
    1078:	59 f0       	breq	.+22     	; 0x1090 <__fp_splitA+0x10>
    107a:	5f 3f       	cpi	r21, 0xFF	; 255
    107c:	71 f0       	breq	.+28     	; 0x109a <__fp_splitA+0x1a>
    107e:	47 95       	ror	r20

00001080 <__fp_splitA>:
    1080:	88 0f       	add	r24, r24
    1082:	97 fb       	bst	r25, 7
    1084:	99 1f       	adc	r25, r25
    1086:	61 f0       	breq	.+24     	; 0x10a0 <__fp_splitA+0x20>
    1088:	9f 3f       	cpi	r25, 0xFF	; 255
    108a:	79 f0       	breq	.+30     	; 0x10aa <__fp_splitA+0x2a>
    108c:	87 95       	ror	r24
    108e:	08 95       	ret
    1090:	12 16       	cp	r1, r18
    1092:	13 06       	cpc	r1, r19
    1094:	14 06       	cpc	r1, r20
    1096:	55 1f       	adc	r21, r21
    1098:	f2 cf       	rjmp	.-28     	; 0x107e <__fp_split3+0xe>
    109a:	46 95       	lsr	r20
    109c:	f1 df       	rcall	.-30     	; 0x1080 <__fp_splitA>
    109e:	08 c0       	rjmp	.+16     	; 0x10b0 <__fp_splitA+0x30>
    10a0:	16 16       	cp	r1, r22
    10a2:	17 06       	cpc	r1, r23
    10a4:	18 06       	cpc	r1, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	f1 cf       	rjmp	.-30     	; 0x108c <__fp_splitA+0xc>
    10aa:	86 95       	lsr	r24
    10ac:	71 05       	cpc	r23, r1
    10ae:	61 05       	cpc	r22, r1
    10b0:	08 94       	sec
    10b2:	08 95       	ret

000010b4 <__fp_zero>:
    10b4:	e8 94       	clt

000010b6 <__fp_szero>:
    10b6:	bb 27       	eor	r27, r27
    10b8:	66 27       	eor	r22, r22
    10ba:	77 27       	eor	r23, r23
    10bc:	cb 01       	movw	r24, r22
    10be:	97 f9       	bld	r25, 7
    10c0:	08 95       	ret

000010c2 <__gesf2>:
    10c2:	8a df       	rcall	.-236    	; 0xfd8 <__fp_cmp>
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <__gesf2+0x6>
    10c6:	8f ef       	ldi	r24, 0xFF	; 255
    10c8:	08 95       	ret

000010ca <__mulsf3>:
    10ca:	0b d0       	rcall	.+22     	; 0x10e2 <__mulsf3x>
    10cc:	c0 cf       	rjmp	.-128    	; 0x104e <__fp_round>
    10ce:	b1 df       	rcall	.-158    	; 0x1032 <__fp_pscA>
    10d0:	28 f0       	brcs	.+10     	; 0x10dc <__mulsf3+0x12>
    10d2:	b6 df       	rcall	.-148    	; 0x1040 <__fp_pscB>
    10d4:	18 f0       	brcs	.+6      	; 0x10dc <__mulsf3+0x12>
    10d6:	95 23       	and	r25, r21
    10d8:	09 f0       	breq	.+2      	; 0x10dc <__mulsf3+0x12>
    10da:	a2 cf       	rjmp	.-188    	; 0x1020 <__fp_inf>
    10dc:	a7 cf       	rjmp	.-178    	; 0x102c <__fp_nan>
    10de:	11 24       	eor	r1, r1
    10e0:	ea cf       	rjmp	.-44     	; 0x10b6 <__fp_szero>

000010e2 <__mulsf3x>:
    10e2:	c6 df       	rcall	.-116    	; 0x1070 <__fp_split3>
    10e4:	a0 f3       	brcs	.-24     	; 0x10ce <__mulsf3+0x4>

000010e6 <__mulsf3_pse>:
    10e6:	95 9f       	mul	r25, r21
    10e8:	d1 f3       	breq	.-12     	; 0x10de <__mulsf3+0x14>
    10ea:	95 0f       	add	r25, r21
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	55 1f       	adc	r21, r21
    10f0:	62 9f       	mul	r22, r18
    10f2:	f0 01       	movw	r30, r0
    10f4:	72 9f       	mul	r23, r18
    10f6:	bb 27       	eor	r27, r27
    10f8:	f0 0d       	add	r31, r0
    10fa:	b1 1d       	adc	r27, r1
    10fc:	63 9f       	mul	r22, r19
    10fe:	aa 27       	eor	r26, r26
    1100:	f0 0d       	add	r31, r0
    1102:	b1 1d       	adc	r27, r1
    1104:	aa 1f       	adc	r26, r26
    1106:	64 9f       	mul	r22, r20
    1108:	66 27       	eor	r22, r22
    110a:	b0 0d       	add	r27, r0
    110c:	a1 1d       	adc	r26, r1
    110e:	66 1f       	adc	r22, r22
    1110:	82 9f       	mul	r24, r18
    1112:	22 27       	eor	r18, r18
    1114:	b0 0d       	add	r27, r0
    1116:	a1 1d       	adc	r26, r1
    1118:	62 1f       	adc	r22, r18
    111a:	73 9f       	mul	r23, r19
    111c:	b0 0d       	add	r27, r0
    111e:	a1 1d       	adc	r26, r1
    1120:	62 1f       	adc	r22, r18
    1122:	83 9f       	mul	r24, r19
    1124:	a0 0d       	add	r26, r0
    1126:	61 1d       	adc	r22, r1
    1128:	22 1f       	adc	r18, r18
    112a:	74 9f       	mul	r23, r20
    112c:	33 27       	eor	r19, r19
    112e:	a0 0d       	add	r26, r0
    1130:	61 1d       	adc	r22, r1
    1132:	23 1f       	adc	r18, r19
    1134:	84 9f       	mul	r24, r20
    1136:	60 0d       	add	r22, r0
    1138:	21 1d       	adc	r18, r1
    113a:	82 2f       	mov	r24, r18
    113c:	76 2f       	mov	r23, r22
    113e:	6a 2f       	mov	r22, r26
    1140:	11 24       	eor	r1, r1
    1142:	9f 57       	subi	r25, 0x7F	; 127
    1144:	50 40       	sbci	r21, 0x00	; 0
    1146:	8a f0       	brmi	.+34     	; 0x116a <__mulsf3_pse+0x84>
    1148:	e1 f0       	breq	.+56     	; 0x1182 <__mulsf3_pse+0x9c>
    114a:	88 23       	and	r24, r24
    114c:	4a f0       	brmi	.+18     	; 0x1160 <__mulsf3_pse+0x7a>
    114e:	ee 0f       	add	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	bb 1f       	adc	r27, r27
    1154:	66 1f       	adc	r22, r22
    1156:	77 1f       	adc	r23, r23
    1158:	88 1f       	adc	r24, r24
    115a:	91 50       	subi	r25, 0x01	; 1
    115c:	50 40       	sbci	r21, 0x00	; 0
    115e:	a9 f7       	brne	.-22     	; 0x114a <__mulsf3_pse+0x64>
    1160:	9e 3f       	cpi	r25, 0xFE	; 254
    1162:	51 05       	cpc	r21, r1
    1164:	70 f0       	brcs	.+28     	; 0x1182 <__mulsf3_pse+0x9c>
    1166:	5c cf       	rjmp	.-328    	; 0x1020 <__fp_inf>
    1168:	a6 cf       	rjmp	.-180    	; 0x10b6 <__fp_szero>
    116a:	5f 3f       	cpi	r21, 0xFF	; 255
    116c:	ec f3       	brlt	.-6      	; 0x1168 <__mulsf3_pse+0x82>
    116e:	98 3e       	cpi	r25, 0xE8	; 232
    1170:	dc f3       	brlt	.-10     	; 0x1168 <__mulsf3_pse+0x82>
    1172:	86 95       	lsr	r24
    1174:	77 95       	ror	r23
    1176:	67 95       	ror	r22
    1178:	b7 95       	ror	r27
    117a:	f7 95       	ror	r31
    117c:	e7 95       	ror	r30
    117e:	9f 5f       	subi	r25, 0xFF	; 255
    1180:	c1 f7       	brne	.-16     	; 0x1172 <__mulsf3_pse+0x8c>
    1182:	fe 2b       	or	r31, r30
    1184:	88 0f       	add	r24, r24
    1186:	91 1d       	adc	r25, r1
    1188:	96 95       	lsr	r25
    118a:	87 95       	ror	r24
    118c:	97 f9       	bld	r25, 7
    118e:	08 95       	ret

00001190 <__divmodhi4>:
    1190:	97 fb       	bst	r25, 7
    1192:	07 2e       	mov	r0, r23
    1194:	16 f4       	brtc	.+4      	; 0x119a <__divmodhi4+0xa>
    1196:	00 94       	com	r0
    1198:	06 d0       	rcall	.+12     	; 0x11a6 <__divmodhi4_neg1>
    119a:	77 fd       	sbrc	r23, 7
    119c:	08 d0       	rcall	.+16     	; 0x11ae <__divmodhi4_neg2>
    119e:	33 d0       	rcall	.+102    	; 0x1206 <__udivmodhi4>
    11a0:	07 fc       	sbrc	r0, 7
    11a2:	05 d0       	rcall	.+10     	; 0x11ae <__divmodhi4_neg2>
    11a4:	3e f4       	brtc	.+14     	; 0x11b4 <__divmodhi4_exit>

000011a6 <__divmodhi4_neg1>:
    11a6:	90 95       	com	r25
    11a8:	81 95       	neg	r24
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	08 95       	ret

000011ae <__divmodhi4_neg2>:
    11ae:	70 95       	com	r23
    11b0:	61 95       	neg	r22
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255

000011b4 <__divmodhi4_exit>:
    11b4:	08 95       	ret

000011b6 <__udivmodsi4>:
    11b6:	a1 e2       	ldi	r26, 0x21	; 33
    11b8:	1a 2e       	mov	r1, r26
    11ba:	aa 1b       	sub	r26, r26
    11bc:	bb 1b       	sub	r27, r27
    11be:	fd 01       	movw	r30, r26
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <__udivmodsi4_ep>

000011c2 <__udivmodsi4_loop>:
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	ee 1f       	adc	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	a2 17       	cp	r26, r18
    11cc:	b3 07       	cpc	r27, r19
    11ce:	e4 07       	cpc	r30, r20
    11d0:	f5 07       	cpc	r31, r21
    11d2:	20 f0       	brcs	.+8      	; 0x11dc <__udivmodsi4_ep>
    11d4:	a2 1b       	sub	r26, r18
    11d6:	b3 0b       	sbc	r27, r19
    11d8:	e4 0b       	sbc	r30, r20
    11da:	f5 0b       	sbc	r31, r21

000011dc <__udivmodsi4_ep>:
    11dc:	66 1f       	adc	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	1a 94       	dec	r1
    11e6:	69 f7       	brne	.-38     	; 0x11c2 <__udivmodsi4_loop>
    11e8:	60 95       	com	r22
    11ea:	70 95       	com	r23
    11ec:	80 95       	com	r24
    11ee:	90 95       	com	r25
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
    11f4:	bd 01       	movw	r22, r26
    11f6:	cf 01       	movw	r24, r30
    11f8:	08 95       	ret

000011fa <__tablejump2__>:
    11fa:	ee 0f       	add	r30, r30
    11fc:	ff 1f       	adc	r31, r31

000011fe <__tablejump__>:
    11fe:	05 90       	lpm	r0, Z+
    1200:	f4 91       	lpm	r31, Z
    1202:	e0 2d       	mov	r30, r0
    1204:	09 94       	ijmp

00001206 <__udivmodhi4>:
    1206:	aa 1b       	sub	r26, r26
    1208:	bb 1b       	sub	r27, r27
    120a:	51 e1       	ldi	r21, 0x11	; 17
    120c:	07 c0       	rjmp	.+14     	; 0x121c <__udivmodhi4_ep>

0000120e <__udivmodhi4_loop>:
    120e:	aa 1f       	adc	r26, r26
    1210:	bb 1f       	adc	r27, r27
    1212:	a6 17       	cp	r26, r22
    1214:	b7 07       	cpc	r27, r23
    1216:	10 f0       	brcs	.+4      	; 0x121c <__udivmodhi4_ep>
    1218:	a6 1b       	sub	r26, r22
    121a:	b7 0b       	sbc	r27, r23

0000121c <__udivmodhi4_ep>:
    121c:	88 1f       	adc	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	5a 95       	dec	r21
    1222:	a9 f7       	brne	.-22     	; 0x120e <__udivmodhi4_loop>
    1224:	80 95       	com	r24
    1226:	90 95       	com	r25
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	08 95       	ret

0000122e <__eerd_byte_m1284>:
    122e:	f9 99       	sbic	0x1f, 1	; 31
    1230:	fe cf       	rjmp	.-4      	; 0x122e <__eerd_byte_m1284>
    1232:	92 bd       	out	0x22, r25	; 34
    1234:	81 bd       	out	0x21, r24	; 33
    1236:	f8 9a       	sbi	0x1f, 0	; 31
    1238:	99 27       	eor	r25, r25
    123a:	80 b5       	in	r24, 0x20	; 32
    123c:	08 95       	ret

0000123e <__eewr_byte_m1284>:
    123e:	26 2f       	mov	r18, r22

00001240 <__eewr_r18_m1284>:
    1240:	f9 99       	sbic	0x1f, 1	; 31
    1242:	fe cf       	rjmp	.-4      	; 0x1240 <__eewr_r18_m1284>
    1244:	1f ba       	out	0x1f, r1	; 31
    1246:	92 bd       	out	0x22, r25	; 34
    1248:	81 bd       	out	0x21, r24	; 33
    124a:	20 bd       	out	0x20, r18	; 32
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	fa 9a       	sbi	0x1f, 2	; 31
    1252:	f9 9a       	sbi	0x1f, 1	; 31
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	01 96       	adiw	r24, 0x01	; 1
    1258:	08 95       	ret

0000125a <_exit>:
    125a:	f8 94       	cli

0000125c <__stop_program>:
    125c:	ff cf       	rjmp	.-2      	; 0x125c <__stop_program>
