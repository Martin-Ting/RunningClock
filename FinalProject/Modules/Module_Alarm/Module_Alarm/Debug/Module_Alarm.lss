
Module_Alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  0080010a  0080010a  0000078a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000eef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000d0  00000000  00000000  00000f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000086d  00000000  00000000  00000fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000371  00000000  00000000  0000185b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000789  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e4  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003d7  00000000  00000000  0000253c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005a5  00000000  00000000  00002913  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	3c c1       	rjmp	.+632    	; 0x2ae <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 35       	cpi	r26, 0x55	; 85
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d2       	rcall	.+1108   	; 0x518 <main>
  c4:	11 c3       	rjmp	.+1570   	; 0x6e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	48 17       	cp	r20, r24
  de:	59 07       	cpc	r21, r25
  e0:	29 f4       	brne	.+10     	; 0xec <delay_ms+0x24>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  e8:	67 e0       	ldi	r22, 0x07	; 7
  ea:	73 e0       	ldi	r23, 0x03	; 3
  ec:	9b 01       	movw	r18, r22
  ee:	f0 cf       	rjmp	.-32     	; 0xd0 <delay_ms+0x8>

000000f0 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
  f0:	5e 9a       	sbi	0x0b, 6	; 11
   DATA_BUS = Data;
  f2:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
  f4:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
  f6:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
  f8:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	e4 cf       	rjmp	.-56     	; 0xc8 <delay_ms>

00000100 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 100:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
 102:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 104:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 106:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 108:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	dc cf       	rjmp	.-72     	; 0xc8 <delay_ms>

00000110 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 110:	81 31       	cpi	r24, 0x11	; 17
 112:	10 f4       	brcc	.+4      	; 0x118 <LCD_Cursor+0x8>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 114:	81 58       	subi	r24, 0x81	; 129
 116:	f4 cf       	rjmp	.-24     	; 0x100 <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 118:	81 55       	subi	r24, 0x51	; 81
 11a:	f2 cf       	rjmp	.-28     	; 0x100 <LCD_WriteCommand>

0000011c <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	f0 cf       	rjmp	.-32     	; 0x100 <LCD_WriteCommand>

00000120 <LCD_DisplayString>:
   SET_BIT(CONTROL_BUS,E);
   asm("nop");
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}	
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	18 2f       	mov	r17, r24
 128:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 12a:	f8 df       	rcall	.-16     	; 0x11c <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 12c:	98 81       	ld	r25, Y
 12e:	99 23       	and	r25, r25
 130:	51 f0       	breq	.+20     	; 0x146 <LCD_DisplayString+0x26>
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}	
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
 132:	81 2f       	mov	r24, r17
   while(*string) {
      LCD_Cursor(c++);
 134:	18 2f       	mov	r17, r24
 136:	1f 5f       	subi	r17, 0xFF	; 255
 138:	eb df       	rcall	.-42     	; 0x110 <LCD_Cursor>
      LCD_WriteData(*string++);
 13a:	89 91       	ld	r24, Y+
 13c:	d9 df       	rcall	.-78     	; 0xf0 <LCD_WriteData>
}	
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 13e:	81 2f       	mov	r24, r17
   delay_ms(1);
}	
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 140:	98 81       	ld	r25, Y
 142:	91 11       	cpse	r25, r1
 144:	f7 cf       	rjmp	.-18     	; 0x134 <LCD_DisplayString+0x14>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	08 95       	ret

0000014e <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 14e:	84 e6       	ldi	r24, 0x64	; 100
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ba df       	rcall	.-140    	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x38);
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	d4 df       	rcall	.-88     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	d2 df       	rcall	.-92     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	d0 df       	rcall	.-96     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	ce df       	rcall	.-100    	; 0x100 <LCD_WriteCommand>
	delay_ms(10);						 
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	af cf       	rjmp	.-162    	; 0xc8 <delay_ms>

0000016a <TimeCrunchSMTick>:
	Inputs: ABCD on Keypad
	Outputs: time.Hours, time.Minutes, time.Seconds */
signed char SysdemDriverSMTick (signed char state){

	return state;
}
 16a:	81 11       	cpse	r24, r1
 16c:	2b c0       	rjmp	.+86     	; 0x1c4 <TimeCrunchSMTick+0x5a>
 16e:	80 91 53 01 	lds	r24, 0x0153
 172:	8b 33       	cpi	r24, 0x3B	; 59
 174:	19 f5       	brne	.+70     	; 0x1bc <TimeCrunchSMTick+0x52>
 176:	80 91 52 01 	lds	r24, 0x0152
 17a:	8b 33       	cpi	r24, 0x3B	; 59
 17c:	c9 f4       	brne	.+50     	; 0x1b0 <TimeCrunchSMTick+0x46>
 17e:	80 91 51 01 	lds	r24, 0x0151
 182:	8b 30       	cpi	r24, 0x0B	; 11
 184:	51 f4       	brne	.+20     	; 0x19a <TimeCrunchSMTick+0x30>
 186:	90 91 54 01 	lds	r25, 0x0154
 18a:	99 23       	and	r25, r25
 18c:	11 f0       	breq	.+4      	; 0x192 <TimeCrunchSMTick+0x28>
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 c0       	rjmp	.+2      	; 0x194 <TimeCrunchSMTick+0x2a>
 192:	9f ef       	ldi	r25, 0xFF	; 255
 194:	90 93 54 01 	sts	0x0154, r25
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <TimeCrunchSMTick+0x3a>
 19a:	8c 30       	cpi	r24, 0x0C	; 12
 19c:	19 f4       	brne	.+6      	; 0x1a4 <TimeCrunchSMTick+0x3a>
 19e:	10 92 51 01 	sts	0x0151, r1
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <TimeCrunchSMTick+0x40>
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	80 93 51 01 	sts	0x0151, r24
 1aa:	10 92 52 01 	sts	0x0152, r1
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <TimeCrunchSMTick+0x4c>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	80 93 52 01 	sts	0x0152, r24
 1b6:	10 92 53 01 	sts	0x0153, r1
 1ba:	0f c0       	rjmp	.+30     	; 0x1da <TimeCrunchSMTick+0x70>
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	80 93 53 01 	sts	0x0153, r24
 1c2:	0b c0       	rjmp	.+22     	; 0x1da <TimeCrunchSMTick+0x70>
 1c4:	8b e0       	ldi	r24, 0x0B	; 11
 1c6:	80 93 51 01 	sts	0x0151, r24
 1ca:	8b e3       	ldi	r24, 0x3B	; 59
 1cc:	80 93 52 01 	sts	0x0152, r24
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	80 93 53 01 	sts	0x0153, r24
 1d6:	10 92 54 01 	sts	0x0154, r1
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	08 95       	ret

000001de <findGCD>:
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	b6 2f       	mov	r27, r22
 1e8:	a7 2f       	mov	r26, r23
 1ea:	f8 2f       	mov	r31, r24
 1ec:	e9 2f       	mov	r30, r25
 1ee:	02 2f       	mov	r16, r18
 1f0:	13 2f       	mov	r17, r19
 1f2:	d4 2f       	mov	r29, r20
 1f4:	c5 2f       	mov	r28, r21
 1f6:	04 c0       	rjmp	.+8      	; 0x200 <findGCD+0x22>
 1f8:	05 2f       	mov	r16, r21
 1fa:	14 2f       	mov	r17, r20
 1fc:	d3 2f       	mov	r29, r19
 1fe:	c2 2f       	mov	r28, r18
 200:	6b 2f       	mov	r22, r27
 202:	7a 2f       	mov	r23, r26
 204:	8f 2f       	mov	r24, r31
 206:	9e 2f       	mov	r25, r30
 208:	20 2f       	mov	r18, r16
 20a:	31 2f       	mov	r19, r17
 20c:	4d 2f       	mov	r20, r29
 20e:	5c 2f       	mov	r21, r28
 210:	49 d2       	rcall	.+1170   	; 0x6a4 <__udivmodsi4>
 212:	b0 2f       	mov	r27, r16
 214:	a1 2f       	mov	r26, r17
 216:	fd 2f       	mov	r31, r29
 218:	ec 2f       	mov	r30, r28
 21a:	56 2f       	mov	r21, r22
 21c:	47 2f       	mov	r20, r23
 21e:	38 2f       	mov	r19, r24
 220:	29 2f       	mov	r18, r25
 222:	67 2b       	or	r22, r23
 224:	68 2b       	or	r22, r24
 226:	69 2b       	or	r22, r25
 228:	39 f7       	brne	.-50     	; 0x1f8 <findGCD+0x1a>
 22a:	60 2f       	mov	r22, r16
 22c:	71 2f       	mov	r23, r17
 22e:	8d 2f       	mov	r24, r29
 230:	9c 2f       	mov	r25, r28
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <TimerSet>:
 23c:	60 93 00 01 	sts	0x0100, r22
 240:	70 93 01 01 	sts	0x0101, r23
 244:	80 93 02 01 	sts	0x0102, r24
 248:	90 93 03 01 	sts	0x0103, r25
 24c:	60 93 0a 01 	sts	0x010A, r22
 250:	70 93 0b 01 	sts	0x010B, r23
 254:	80 93 0c 01 	sts	0x010C, r24
 258:	90 93 0d 01 	sts	0x010D, r25
 25c:	08 95       	ret

0000025e <TimerOn>:
 25e:	8b e0       	ldi	r24, 0x0B	; 11
 260:	80 93 81 00 	sts	0x0081, r24
 264:	8d e7       	ldi	r24, 0x7D	; 125
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	90 93 89 00 	sts	0x0089, r25
 26c:	80 93 88 00 	sts	0x0088, r24
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	80 93 6f 00 	sts	0x006F, r24
 276:	10 92 85 00 	sts	0x0085, r1
 27a:	10 92 84 00 	sts	0x0084, r1
 27e:	80 91 00 01 	lds	r24, 0x0100
 282:	90 91 01 01 	lds	r25, 0x0101
 286:	a0 91 02 01 	lds	r26, 0x0102
 28a:	b0 91 03 01 	lds	r27, 0x0103
 28e:	80 93 0a 01 	sts	0x010A, r24
 292:	90 93 0b 01 	sts	0x010B, r25
 296:	a0 93 0c 01 	sts	0x010C, r26
 29a:	b0 93 0d 01 	sts	0x010D, r27
 29e:	8f b7       	in	r24, 0x3f	; 63
 2a0:	80 68       	ori	r24, 0x80	; 128
 2a2:	8f bf       	out	0x3f, r24	; 63
 2a4:	08 95       	ret

000002a6 <TimerISR>:
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 0e 01 	sts	0x010E, r24
 2ac:	08 95       	ret

000002ae <__vector_13>:
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	0b b6       	in	r0, 0x3b	; 59
 2ba:	0f 92       	push	r0
 2bc:	2f 93       	push	r18
 2be:	3f 93       	push	r19
 2c0:	4f 93       	push	r20
 2c2:	5f 93       	push	r21
 2c4:	6f 93       	push	r22
 2c6:	7f 93       	push	r23
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
 2cc:	af 93       	push	r26
 2ce:	bf 93       	push	r27
 2d0:	ef 93       	push	r30
 2d2:	ff 93       	push	r31
 2d4:	80 91 0a 01 	lds	r24, 0x010A
 2d8:	90 91 0b 01 	lds	r25, 0x010B
 2dc:	a0 91 0c 01 	lds	r26, 0x010C
 2e0:	b0 91 0d 01 	lds	r27, 0x010D
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	a1 09       	sbc	r26, r1
 2e8:	b1 09       	sbc	r27, r1
 2ea:	80 93 0a 01 	sts	0x010A, r24
 2ee:	90 93 0b 01 	sts	0x010B, r25
 2f2:	a0 93 0c 01 	sts	0x010C, r26
 2f6:	b0 93 0d 01 	sts	0x010D, r27
 2fa:	89 2b       	or	r24, r25
 2fc:	8a 2b       	or	r24, r26
 2fe:	8b 2b       	or	r24, r27
 300:	89 f4       	brne	.+34     	; 0x324 <__vector_13+0x76>
 302:	d1 df       	rcall	.-94     	; 0x2a6 <TimerISR>
 304:	80 91 00 01 	lds	r24, 0x0100
 308:	90 91 01 01 	lds	r25, 0x0101
 30c:	a0 91 02 01 	lds	r26, 0x0102
 310:	b0 91 03 01 	lds	r27, 0x0103
 314:	80 93 0a 01 	sts	0x010A, r24
 318:	90 93 0b 01 	sts	0x010B, r25
 31c:	a0 93 0c 01 	sts	0x010C, r26
 320:	b0 93 0d 01 	sts	0x010D, r27
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0b be       	out	0x3b, r0	; 59
 340:	0f 90       	pop	r0
 342:	0f be       	out	0x3f, r0	; 63
 344:	0f 90       	pop	r0
 346:	1f 90       	pop	r1
 348:	18 95       	reti

0000034a <updateTimeString>:
 34a:	8a e3       	ldi	r24, 0x3A	; 58
 34c:	80 93 35 01 	sts	0x0135, r24
 350:	80 93 32 01 	sts	0x0132, r24
 354:	80 91 51 01 	lds	r24, 0x0151
 358:	8a 30       	cpi	r24, 0x0A	; 10
 35a:	58 f0       	brcs	.+22     	; 0x372 <updateTimeString+0x28>
 35c:	9d ec       	ldi	r25, 0xCD	; 205
 35e:	89 9f       	mul	r24, r25
 360:	91 2d       	mov	r25, r1
 362:	11 24       	eor	r1, r1
 364:	96 95       	lsr	r25
 366:	96 95       	lsr	r25
 368:	96 95       	lsr	r25
 36a:	90 5d       	subi	r25, 0xD0	; 208
 36c:	90 93 30 01 	sts	0x0130, r25
 370:	03 c0       	rjmp	.+6      	; 0x378 <updateTimeString+0x2e>
 372:	90 e3       	ldi	r25, 0x30	; 48
 374:	90 93 30 01 	sts	0x0130, r25
 378:	9d ec       	ldi	r25, 0xCD	; 205
 37a:	89 9f       	mul	r24, r25
 37c:	91 2d       	mov	r25, r1
 37e:	11 24       	eor	r1, r1
 380:	96 95       	lsr	r25
 382:	96 95       	lsr	r25
 384:	96 95       	lsr	r25
 386:	99 0f       	add	r25, r25
 388:	29 2f       	mov	r18, r25
 38a:	22 0f       	add	r18, r18
 38c:	22 0f       	add	r18, r18
 38e:	92 0f       	add	r25, r18
 390:	89 1b       	sub	r24, r25
 392:	80 5d       	subi	r24, 0xD0	; 208
 394:	80 93 31 01 	sts	0x0131, r24
 398:	80 91 52 01 	lds	r24, 0x0152
 39c:	8a 30       	cpi	r24, 0x0A	; 10
 39e:	58 f0       	brcs	.+22     	; 0x3b6 <updateTimeString+0x6c>
 3a0:	9d ec       	ldi	r25, 0xCD	; 205
 3a2:	89 9f       	mul	r24, r25
 3a4:	91 2d       	mov	r25, r1
 3a6:	11 24       	eor	r1, r1
 3a8:	96 95       	lsr	r25
 3aa:	96 95       	lsr	r25
 3ac:	96 95       	lsr	r25
 3ae:	90 5d       	subi	r25, 0xD0	; 208
 3b0:	90 93 33 01 	sts	0x0133, r25
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <updateTimeString+0x72>
 3b6:	90 e3       	ldi	r25, 0x30	; 48
 3b8:	90 93 33 01 	sts	0x0133, r25
 3bc:	9d ec       	ldi	r25, 0xCD	; 205
 3be:	89 9f       	mul	r24, r25
 3c0:	91 2d       	mov	r25, r1
 3c2:	11 24       	eor	r1, r1
 3c4:	96 95       	lsr	r25
 3c6:	96 95       	lsr	r25
 3c8:	96 95       	lsr	r25
 3ca:	99 0f       	add	r25, r25
 3cc:	29 2f       	mov	r18, r25
 3ce:	22 0f       	add	r18, r18
 3d0:	22 0f       	add	r18, r18
 3d2:	92 0f       	add	r25, r18
 3d4:	89 1b       	sub	r24, r25
 3d6:	80 5d       	subi	r24, 0xD0	; 208
 3d8:	80 93 34 01 	sts	0x0134, r24
 3dc:	80 91 53 01 	lds	r24, 0x0153
 3e0:	8a 30       	cpi	r24, 0x0A	; 10
 3e2:	58 f0       	brcs	.+22     	; 0x3fa <updateTimeString+0xb0>
 3e4:	9d ec       	ldi	r25, 0xCD	; 205
 3e6:	89 9f       	mul	r24, r25
 3e8:	91 2d       	mov	r25, r1
 3ea:	11 24       	eor	r1, r1
 3ec:	96 95       	lsr	r25
 3ee:	96 95       	lsr	r25
 3f0:	96 95       	lsr	r25
 3f2:	90 5d       	subi	r25, 0xD0	; 208
 3f4:	90 93 36 01 	sts	0x0136, r25
 3f8:	03 c0       	rjmp	.+6      	; 0x400 <updateTimeString+0xb6>
 3fa:	90 e3       	ldi	r25, 0x30	; 48
 3fc:	90 93 36 01 	sts	0x0136, r25
 400:	9d ec       	ldi	r25, 0xCD	; 205
 402:	89 9f       	mul	r24, r25
 404:	91 2d       	mov	r25, r1
 406:	11 24       	eor	r1, r1
 408:	96 95       	lsr	r25
 40a:	96 95       	lsr	r25
 40c:	96 95       	lsr	r25
 40e:	99 0f       	add	r25, r25
 410:	29 2f       	mov	r18, r25
 412:	22 0f       	add	r18, r18
 414:	22 0f       	add	r18, r18
 416:	92 0f       	add	r25, r18
 418:	89 1b       	sub	r24, r25
 41a:	80 5d       	subi	r24, 0xD0	; 208
 41c:	80 93 37 01 	sts	0x0137, r24
 420:	80 91 54 01 	lds	r24, 0x0154
 424:	88 23       	and	r24, r24
 426:	21 f0       	breq	.+8      	; 0x430 <updateTimeString+0xe6>
 428:	81 e4       	ldi	r24, 0x41	; 65
 42a:	80 93 39 01 	sts	0x0139, r24
 42e:	08 95       	ret
 430:	80 e5       	ldi	r24, 0x50	; 80
 432:	80 93 39 01 	sts	0x0139, r24
 436:	08 95       	ret

00000438 <LCDDisplaySMTick>:
 438:	88 23       	and	r24, r24
 43a:	49 f0       	breq	.+18     	; 0x44e <LCDDisplaySMTick+0x16>
 43c:	e0 e3       	ldi	r30, 0x30	; 48
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	80 e5       	ldi	r24, 0x50	; 80
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	20 e2       	ldi	r18, 0x20	; 32
 446:	21 93       	st	Z+, r18
 448:	e8 17       	cp	r30, r24
 44a:	f9 07       	cpc	r31, r25
 44c:	e1 f7       	brne	.-8      	; 0x446 <LCDDisplaySMTick+0xe>
 44e:	7d df       	rcall	.-262    	; 0x34a <updateTimeString>
 450:	60 e3       	ldi	r22, 0x30	; 48
 452:	71 e0       	ldi	r23, 0x01	; 1
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	64 de       	rcall	.-824    	; 0x120 <LCD_DisplayString>
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret

0000045c <GetKeypadKey>:
 45c:	8f ee       	ldi	r24, 0xEF	; 239
 45e:	82 b9       	out	0x02, r24	; 2
 460:	00 00       	nop
 462:	00 9b       	sbis	0x00, 0	; 0
 464:	29 c0       	rjmp	.+82     	; 0x4b8 <GetKeypadKey+0x5c>
 466:	01 9b       	sbis	0x00, 1	; 0
 468:	29 c0       	rjmp	.+82     	; 0x4bc <GetKeypadKey+0x60>
 46a:	02 9b       	sbis	0x00, 2	; 0
 46c:	29 c0       	rjmp	.+82     	; 0x4c0 <GetKeypadKey+0x64>
 46e:	03 9b       	sbis	0x00, 3	; 0
 470:	29 c0       	rjmp	.+82     	; 0x4c4 <GetKeypadKey+0x68>
 472:	8f ed       	ldi	r24, 0xDF	; 223
 474:	82 b9       	out	0x02, r24	; 2
 476:	00 00       	nop
 478:	00 9b       	sbis	0x00, 0	; 0
 47a:	26 c0       	rjmp	.+76     	; 0x4c8 <GetKeypadKey+0x6c>
 47c:	01 9b       	sbis	0x00, 1	; 0
 47e:	26 c0       	rjmp	.+76     	; 0x4cc <GetKeypadKey+0x70>
 480:	02 9b       	sbis	0x00, 2	; 0
 482:	26 c0       	rjmp	.+76     	; 0x4d0 <GetKeypadKey+0x74>
 484:	03 9b       	sbis	0x00, 3	; 0
 486:	26 c0       	rjmp	.+76     	; 0x4d4 <GetKeypadKey+0x78>
 488:	8f eb       	ldi	r24, 0xBF	; 191
 48a:	82 b9       	out	0x02, r24	; 2
 48c:	00 00       	nop
 48e:	00 9b       	sbis	0x00, 0	; 0
 490:	23 c0       	rjmp	.+70     	; 0x4d8 <GetKeypadKey+0x7c>
 492:	01 9b       	sbis	0x00, 1	; 0
 494:	23 c0       	rjmp	.+70     	; 0x4dc <GetKeypadKey+0x80>
 496:	02 9b       	sbis	0x00, 2	; 0
 498:	23 c0       	rjmp	.+70     	; 0x4e0 <GetKeypadKey+0x84>
 49a:	03 9b       	sbis	0x00, 3	; 0
 49c:	23 c0       	rjmp	.+70     	; 0x4e4 <GetKeypadKey+0x88>
 49e:	8f e7       	ldi	r24, 0x7F	; 127
 4a0:	82 b9       	out	0x02, r24	; 2
 4a2:	00 00       	nop
 4a4:	00 9b       	sbis	0x00, 0	; 0
 4a6:	20 c0       	rjmp	.+64     	; 0x4e8 <GetKeypadKey+0x8c>
 4a8:	01 9b       	sbis	0x00, 1	; 0
 4aa:	20 c0       	rjmp	.+64     	; 0x4ec <GetKeypadKey+0x90>
 4ac:	02 9b       	sbis	0x00, 2	; 0
 4ae:	20 c0       	rjmp	.+64     	; 0x4f0 <GetKeypadKey+0x94>
 4b0:	03 99       	sbic	0x00, 3	; 0
 4b2:	20 c0       	rjmp	.+64     	; 0x4f4 <GetKeypadKey+0x98>
 4b4:	84 e4       	ldi	r24, 0x44	; 68
 4b6:	08 95       	ret
 4b8:	81 e3       	ldi	r24, 0x31	; 49
 4ba:	08 95       	ret
 4bc:	84 e3       	ldi	r24, 0x34	; 52
 4be:	08 95       	ret
 4c0:	87 e3       	ldi	r24, 0x37	; 55
 4c2:	08 95       	ret
 4c4:	8a e2       	ldi	r24, 0x2A	; 42
 4c6:	08 95       	ret
 4c8:	82 e3       	ldi	r24, 0x32	; 50
 4ca:	08 95       	ret
 4cc:	85 e3       	ldi	r24, 0x35	; 53
 4ce:	08 95       	ret
 4d0:	88 e3       	ldi	r24, 0x38	; 56
 4d2:	08 95       	ret
 4d4:	80 e3       	ldi	r24, 0x30	; 48
 4d6:	08 95       	ret
 4d8:	83 e3       	ldi	r24, 0x33	; 51
 4da:	08 95       	ret
 4dc:	86 e3       	ldi	r24, 0x36	; 54
 4de:	08 95       	ret
 4e0:	89 e3       	ldi	r24, 0x39	; 57
 4e2:	08 95       	ret
 4e4:	83 e2       	ldi	r24, 0x23	; 35
 4e6:	08 95       	ret
 4e8:	81 e4       	ldi	r24, 0x41	; 65
 4ea:	08 95       	ret
 4ec:	82 e4       	ldi	r24, 0x42	; 66
 4ee:	08 95       	ret
 4f0:	83 e4       	ldi	r24, 0x43	; 67
 4f2:	08 95       	ret
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	08 95       	ret

000004f8 <UpdateInputSMTick>:
 4f8:	b1 df       	rcall	.-158    	; 0x45c <GetKeypadKey>
 4fa:	98 2f       	mov	r25, r24
 4fc:	91 54       	subi	r25, 0x41	; 65
 4fe:	94 30       	cpi	r25, 0x04	; 4
 500:	20 f0       	brcs	.+8      	; 0x50a <UpdateInputSMTick+0x12>
 502:	83 32       	cpi	r24, 0x23	; 35
 504:	11 f0       	breq	.+4      	; 0x50a <UpdateInputSMTick+0x12>
 506:	8a 32       	cpi	r24, 0x2A	; 42
 508:	19 f4       	brne	.+6      	; 0x510 <UpdateInputSMTick+0x18>
 50a:	80 93 50 01 	sts	0x0150, r24
 50e:	02 c0       	rjmp	.+4      	; 0x514 <UpdateInputSMTick+0x1c>
 510:	10 92 50 01 	sts	0x0150, r1
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	08 95       	ret

00000518 <main>:
// End State Machine drivers
// 

// Scheduler
int main(void)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	00 d0       	rcall	.+0      	; 0x51e <main+0x6>
 51e:	00 d0       	rcall	.+0      	; 0x520 <main+0x8>
 520:	00 d0       	rcall	.+0      	; 0x522 <main+0xa>
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
	// Set DDR and initialise PORTs
	//Keypad on A
	DDRA = 0xF0; PORTA = 0x0F;
 526:	80 ef       	ldi	r24, 0xF0	; 240
 528:	81 b9       	out	0x01, r24	; 1
 52a:	8f e0       	ldi	r24, 0x0F	; 15
 52c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 52e:	1f ef       	ldi	r17, 0xFF	; 255
 530:	14 b9       	out	0x04, r17	; 4
 532:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 534:	17 b9       	out	0x07, r17	; 7
 536:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 538:	1a b9       	out	0x0a, r17	; 10
 53a:	1b b8       	out	0x0b, r1	; 11
	unsigned long int LCDDisplaySM_calc = 1000;	// 100ms period
	unsigned long int UpdateInputSM_calc = 100; // 100ms period
	//unsigned long int SystemDriverSM_calc = 100; // 100ms period
	// Calculate GCD	
	unsigned long int tmpGCD = 1;
	tmpGCD = findGCD(TimeCrunchSM_calc, LCDDisplaySM_calc );
 53c:	28 ee       	ldi	r18, 0xE8	; 232
 53e:	33 e0       	ldi	r19, 0x03	; 3
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	68 ee       	ldi	r22, 0xE8	; 232
 546:	73 e0       	ldi	r23, 0x03	; 3
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	48 de       	rcall	.-880    	; 0x1de <findGCD>
	tmpGCD = findGCD(tmpGCD, UpdateInputSM_calc);
 54e:	24 e6       	ldi	r18, 0x64	; 100
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	43 de       	rcall	.-890    	; 0x1de <findGCD>
 558:	6b 01       	movw	r12, r22
 55a:	7c 01       	movw	r14, r24
	//tmpGCD = findGCD(tmpGCD, ... );
		
	unsigned long int GCD = tmpGCD;
	
	// Recalculate GCD periods for scheduler
	unsigned long int TimeCrunchSM_period = TimeCrunchSM_calc/GCD;
 55c:	68 ee       	ldi	r22, 0xE8	; 232
 55e:	73 e0       	ldi	r23, 0x03	; 3
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	a7 01       	movw	r20, r14
 566:	96 01       	movw	r18, r12
 568:	9d d0       	rcall	.+314    	; 0x6a4 <__udivmodsi4>
 56a:	92 2e       	mov	r9, r18
 56c:	a3 2e       	mov	r10, r19
 56e:	b4 2e       	mov	r11, r20
 570:	05 2f       	mov	r16, r21
	unsigned long int LCDDisplaySM_period = LCDDisplaySM_calc/GCD;
	unsigned long int UpdateInputSM_period = UpdateInputSM_calc/GCD;
 572:	64 e6       	ldi	r22, 0x64	; 100
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	a7 01       	movw	r20, r14
 57c:	96 01       	movw	r18, r12
 57e:	92 d0       	rcall	.+292    	; 0x6a4 <__udivmodsi4>
	
	// Set up task scheduler
	static task TimeCrunchSMTask,
				LCDDisplaySMTask,
				UpdateInputSMTask;
	task *tasks[] = {&UpdateInputSMTask, &TimeCrunchSMTask, &LCDDisplaySMTask}; // keep tasks that display at the end. keep UpdateInput in the beginning and SystemDriverSM second
 580:	86 e0       	ldi	r24, 0x06	; 6
 582:	e4 e0       	ldi	r30, 0x04	; 4
 584:	f1 e0       	ldi	r31, 0x01	; 1
 586:	de 01       	movw	r26, r28
 588:	11 96       	adiw	r26, 0x01	; 1
 58a:	01 90       	ld	r0, Z+
 58c:	0d 92       	st	X+, r0
 58e:	8a 95       	dec	r24
 590:	e1 f7       	brne	.-8      	; 0x58a <main+0x72>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	//UpdateInputSM declaration
	UpdateInputSMTask.state = -1;
 592:	10 93 0f 01 	sts	0x010F, r17
	UpdateInputSMTask.period = UpdateInputSMTask.elapsedTime = UpdateInputSM_period;
 596:	e4 e1       	ldi	r30, 0x14	; 20
 598:	f1 e0       	ldi	r31, 0x01	; 1
 59a:	20 83       	st	Z, r18
 59c:	31 83       	std	Z+1, r19	; 0x01
 59e:	42 83       	std	Z+2, r20	; 0x02
 5a0:	53 83       	std	Z+3, r21	; 0x03
 5a2:	e0 e1       	ldi	r30, 0x10	; 16
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	20 83       	st	Z, r18
 5a8:	31 83       	std	Z+1, r19	; 0x01
 5aa:	42 83       	std	Z+2, r20	; 0x02
 5ac:	53 83       	std	Z+3, r21	; 0x03
	UpdateInputSMTask.TickFct = &UpdateInputSMTick;
 5ae:	8c e7       	ldi	r24, 0x7C	; 124
 5b0:	92 e0       	ldi	r25, 0x02	; 2
 5b2:	90 93 19 01 	sts	0x0119, r25
 5b6:	80 93 18 01 	sts	0x0118, r24
	/*SystemDriverSMTask.state = -1;
	SystemDriverSMTask.period = SystemDriverSMTask.elapsedtime = SystemDriverSMTask_period;
	SystemDriverSMTask.TickFct = &SystemDriverSMTick;*/
	
	// TimeCrunchSM declaration
	TimeCrunchSMTask.state = -1;
 5ba:	10 93 1a 01 	sts	0x011A, r17
	TimeCrunchSMTask.period = TimeCrunchSMTask.elapsedTime = TimeCrunchSM_period;
 5be:	ef e1       	ldi	r30, 0x1F	; 31
 5c0:	f1 e0       	ldi	r31, 0x01	; 1
 5c2:	90 82       	st	Z, r9
 5c4:	a1 82       	std	Z+1, r10	; 0x01
 5c6:	b2 82       	std	Z+2, r11	; 0x02
 5c8:	03 83       	std	Z+3, r16	; 0x03
 5ca:	eb e1       	ldi	r30, 0x1B	; 27
 5cc:	f1 e0       	ldi	r31, 0x01	; 1
 5ce:	90 82       	st	Z, r9
 5d0:	a1 82       	std	Z+1, r10	; 0x01
 5d2:	b2 82       	std	Z+2, r11	; 0x02
 5d4:	03 83       	std	Z+3, r16	; 0x03
	TimeCrunchSMTask.TickFct = &TimeCrunchSMTick;
 5d6:	85 eb       	ldi	r24, 0xB5	; 181
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	90 93 24 01 	sts	0x0124, r25
 5de:	80 93 23 01 	sts	0x0123, r24
	//LCDDisplaySM declaration
	LCDDisplaySMTask.state = -1;
 5e2:	10 93 25 01 	sts	0x0125, r17
	LCDDisplaySMTask.period = LCDDisplaySMTask.elapsedTime = LCDDisplaySM_period;
 5e6:	ea e2       	ldi	r30, 0x2A	; 42
 5e8:	f1 e0       	ldi	r31, 0x01	; 1
 5ea:	90 82       	st	Z, r9
 5ec:	a1 82       	std	Z+1, r10	; 0x01
 5ee:	b2 82       	std	Z+2, r11	; 0x02
 5f0:	03 83       	std	Z+3, r16	; 0x03
 5f2:	e6 e2       	ldi	r30, 0x26	; 38
 5f4:	f1 e0       	ldi	r31, 0x01	; 1
 5f6:	90 82       	st	Z, r9
 5f8:	a1 82       	std	Z+1, r10	; 0x01
 5fa:	b2 82       	std	Z+2, r11	; 0x02
 5fc:	03 83       	std	Z+3, r16	; 0x03
	LCDDisplaySMTask.TickFct = &LCDDisplaySMTick;
 5fe:	8c e1       	ldi	r24, 0x1C	; 28
 600:	92 e0       	ldi	r25, 0x02	; 2
 602:	90 93 2f 01 	sts	0x012F, r25
 606:	80 93 2e 01 	sts	0x012E, r24
	
	//======================================================
	// Set timer and turn it on
	TimerSet(GCD);
 60a:	c7 01       	movw	r24, r14
 60c:	b6 01       	movw	r22, r12
 60e:	16 de       	rcall	.-980    	; 0x23c <TimerSet>
	TimerOn();
 610:	26 de       	rcall	.-948    	; 0x25e <TimerOn>
	// Start LCD
	LCD_init();
 612:	9d dd       	rcall	.-1222   	; 0x14e <LCD_init>
	unsigned short i; // for loop iterator
    while(1)
    {
		for(i=0; i<numTasks; ++i){
 614:	00 e0       	ldi	r16, 0x00	; 0
 616:	10 e0       	ldi	r17, 0x00	; 0
 618:	c1 2c       	mov	r12, r1
 61a:	d1 2c       	mov	r13, r1
 61c:	38 c0       	rjmp	.+112    	; 0x68e <main+0x176>
			if(tasks[i]->elapsedTime == tasks[i]->period){
 61e:	f8 01       	movw	r30, r16
 620:	ee 0f       	add	r30, r30
 622:	ff 1f       	adc	r31, r31
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	8c 0f       	add	r24, r28
 62a:	9d 1f       	adc	r25, r29
 62c:	e8 0f       	add	r30, r24
 62e:	f9 1f       	adc	r31, r25
 630:	e0 80       	ld	r14, Z
 632:	f1 80       	ldd	r15, Z+1	; 0x01
 634:	d7 01       	movw	r26, r14
 636:	15 96       	adiw	r26, 0x05	; 5
 638:	4d 91       	ld	r20, X+
 63a:	5d 91       	ld	r21, X+
 63c:	6d 91       	ld	r22, X+
 63e:	7c 91       	ld	r23, X
 640:	18 97       	sbiw	r26, 0x08	; 8
 642:	11 96       	adiw	r26, 0x01	; 1
 644:	8d 91       	ld	r24, X+
 646:	9d 91       	ld	r25, X+
 648:	0d 90       	ld	r0, X+
 64a:	bc 91       	ld	r27, X
 64c:	a0 2d       	mov	r26, r0
 64e:	48 17       	cp	r20, r24
 650:	59 07       	cpc	r21, r25
 652:	6a 07       	cpc	r22, r26
 654:	7b 07       	cpc	r23, r27
 656:	69 f4       	brne	.+26     	; 0x672 <main+0x15a>
				// tick and set next state
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 658:	d7 01       	movw	r26, r14
 65a:	19 96       	adiw	r26, 0x09	; 9
 65c:	ed 91       	ld	r30, X+
 65e:	fc 91       	ld	r31, X
 660:	1a 97       	sbiw	r26, 0x0a	; 10
 662:	8c 91       	ld	r24, X
 664:	09 95       	icall
 666:	f7 01       	movw	r30, r14
 668:	80 83       	st	Z, r24
				//reset elapsed time
				tasks[i]->elapsedTime = 0;
 66a:	15 82       	std	Z+5, r1	; 0x05
 66c:	16 82       	std	Z+6, r1	; 0x06
 66e:	17 82       	std	Z+7, r1	; 0x07
 670:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 672:	f7 01       	movw	r30, r14
 674:	85 81       	ldd	r24, Z+5	; 0x05
 676:	96 81       	ldd	r25, Z+6	; 0x06
 678:	a7 81       	ldd	r26, Z+7	; 0x07
 67a:	b0 85       	ldd	r27, Z+8	; 0x08
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	a1 1d       	adc	r26, r1
 680:	b1 1d       	adc	r27, r1
 682:	85 83       	std	Z+5, r24	; 0x05
 684:	96 83       	std	Z+6, r25	; 0x06
 686:	a7 83       	std	Z+7, r26	; 0x07
 688:	b0 87       	std	Z+8, r27	; 0x08
	// Start LCD
	LCD_init();
	unsigned short i; // for loop iterator
    while(1)
    {
		for(i=0; i<numTasks; ++i){
 68a:	0f 5f       	subi	r16, 0xFF	; 255
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	03 30       	cpi	r16, 0x03	; 3
 690:	11 05       	cpc	r17, r1
 692:	28 f2       	brcs	.-118    	; 0x61e <main+0x106>
				//reset elapsed time
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 694:	80 91 0e 01 	lds	r24, 0x010E
 698:	88 23       	and	r24, r24
 69a:	e1 f3       	breq	.-8      	; 0x694 <main+0x17c>
		TimerFlag = 0;
 69c:	10 92 0e 01 	sts	0x010E, r1
	// Start LCD
	LCD_init();
	unsigned short i; // for loop iterator
    while(1)
    {
		for(i=0; i<numTasks; ++i){
 6a0:	86 01       	movw	r16, r12
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
		TimerFlag = 0;
    }
 6a2:	f5 cf       	rjmp	.-22     	; 0x68e <main+0x176>

000006a4 <__udivmodsi4>:
 6a4:	a1 e2       	ldi	r26, 0x21	; 33
 6a6:	1a 2e       	mov	r1, r26
 6a8:	aa 1b       	sub	r26, r26
 6aa:	bb 1b       	sub	r27, r27
 6ac:	fd 01       	movw	r30, r26
 6ae:	0d c0       	rjmp	.+26     	; 0x6ca <__udivmodsi4_ep>

000006b0 <__udivmodsi4_loop>:
 6b0:	aa 1f       	adc	r26, r26
 6b2:	bb 1f       	adc	r27, r27
 6b4:	ee 1f       	adc	r30, r30
 6b6:	ff 1f       	adc	r31, r31
 6b8:	a2 17       	cp	r26, r18
 6ba:	b3 07       	cpc	r27, r19
 6bc:	e4 07       	cpc	r30, r20
 6be:	f5 07       	cpc	r31, r21
 6c0:	20 f0       	brcs	.+8      	; 0x6ca <__udivmodsi4_ep>
 6c2:	a2 1b       	sub	r26, r18
 6c4:	b3 0b       	sbc	r27, r19
 6c6:	e4 0b       	sbc	r30, r20
 6c8:	f5 0b       	sbc	r31, r21

000006ca <__udivmodsi4_ep>:
 6ca:	66 1f       	adc	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	1a 94       	dec	r1
 6d4:	69 f7       	brne	.-38     	; 0x6b0 <__udivmodsi4_loop>
 6d6:	60 95       	com	r22
 6d8:	70 95       	com	r23
 6da:	80 95       	com	r24
 6dc:	90 95       	com	r25
 6de:	9b 01       	movw	r18, r22
 6e0:	ac 01       	movw	r20, r24
 6e2:	bd 01       	movw	r22, r26
 6e4:	cf 01       	movw	r24, r30
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
