
Module_Alarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000d7a  00000e0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000094  0080014a  0080014a  00000e58  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000181  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001819  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000f0  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000e2f  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000437  00000000  00000000  00002767  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d73  00000000  00000000  00002b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000254  00000000  00000000  00003914  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009d5  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009cc  00000000  00000000  0000453d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  00004f09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	78 c0       	rjmp	.+240    	; 0xf2 <__ctors_end>
   2:	00 00       	nop
   4:	93 c0       	rjmp	.+294    	; 0x12c <__bad_interrupt>
   6:	00 00       	nop
   8:	91 c0       	rjmp	.+290    	; 0x12c <__bad_interrupt>
   a:	00 00       	nop
   c:	8f c0       	rjmp	.+286    	; 0x12c <__bad_interrupt>
   e:	00 00       	nop
  10:	8d c0       	rjmp	.+282    	; 0x12c <__bad_interrupt>
  12:	00 00       	nop
  14:	8b c0       	rjmp	.+278    	; 0x12c <__bad_interrupt>
  16:	00 00       	nop
  18:	89 c0       	rjmp	.+274    	; 0x12c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	87 c0       	rjmp	.+270    	; 0x12c <__bad_interrupt>
  1e:	00 00       	nop
  20:	85 c0       	rjmp	.+266    	; 0x12c <__bad_interrupt>
  22:	00 00       	nop
  24:	83 c0       	rjmp	.+262    	; 0x12c <__bad_interrupt>
  26:	00 00       	nop
  28:	81 c0       	rjmp	.+258    	; 0x12c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7f c0       	rjmp	.+254    	; 0x12c <__bad_interrupt>
  2e:	00 00       	nop
  30:	7d c0       	rjmp	.+250    	; 0x12c <__bad_interrupt>
  32:	00 00       	nop
  34:	71 c1       	rjmp	.+738    	; 0x318 <__vector_13>
  36:	00 00       	nop
  38:	79 c0       	rjmp	.+242    	; 0x12c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	77 c0       	rjmp	.+238    	; 0x12c <__bad_interrupt>
  3e:	00 00       	nop
  40:	75 c0       	rjmp	.+234    	; 0x12c <__bad_interrupt>
  42:	00 00       	nop
  44:	73 c0       	rjmp	.+230    	; 0x12c <__bad_interrupt>
  46:	00 00       	nop
  48:	71 c0       	rjmp	.+226    	; 0x12c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6f c0       	rjmp	.+222    	; 0x12c <__bad_interrupt>
  4e:	00 00       	nop
  50:	6d c0       	rjmp	.+218    	; 0x12c <__bad_interrupt>
  52:	00 00       	nop
  54:	6b c0       	rjmp	.+214    	; 0x12c <__bad_interrupt>
  56:	00 00       	nop
  58:	69 c0       	rjmp	.+210    	; 0x12c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	67 c0       	rjmp	.+206    	; 0x12c <__bad_interrupt>
  5e:	00 00       	nop
  60:	65 c0       	rjmp	.+202    	; 0x12c <__bad_interrupt>
  62:	00 00       	nop
  64:	63 c0       	rjmp	.+198    	; 0x12c <__bad_interrupt>
  66:	00 00       	nop
  68:	61 c0       	rjmp	.+194    	; 0x12c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5f c0       	rjmp	.+190    	; 0x12c <__bad_interrupt>
  6e:	00 00       	nop
  70:	5d c0       	rjmp	.+186    	; 0x12c <__bad_interrupt>
  72:	00 00       	nop
  74:	5b c0       	rjmp	.+182    	; 0x12c <__bad_interrupt>
  76:	00 00       	nop
  78:	59 c0       	rjmp	.+178    	; 0x12c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	57 c0       	rjmp	.+174    	; 0x12c <__bad_interrupt>
  7e:	00 00       	nop
  80:	55 c0       	rjmp	.+170    	; 0x12c <__bad_interrupt>
  82:	00 00       	nop
  84:	53 c0       	rjmp	.+166    	; 0x12c <__bad_interrupt>
  86:	00 00       	nop
  88:	51 c0       	rjmp	.+162    	; 0x12c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	a3 03       	fmuls	r18, r19
  8e:	7c 03       	fmul	r23, r20
  90:	81 03       	fmuls	r16, r17
  92:	7c 03       	fmul	r23, r20
  94:	81 03       	fmuls	r16, r17
  96:	a3 03       	fmuls	r18, r19
  98:	87 03       	fmuls	r16, r23
  9a:	8c 03       	fmulsu	r16, r20
  9c:	87 03       	fmuls	r16, r23
  9e:	8c 03       	fmulsu	r16, r20
  a0:	a3 03       	fmuls	r18, r19
  a2:	91 03       	fmuls	r17, r17
  a4:	96 03       	fmuls	r17, r22
  a6:	91 03       	fmuls	r17, r17
  a8:	96 03       	fmuls	r17, r22
  aa:	a3 03       	fmuls	r18, r19
  ac:	96 03       	fmuls	r17, r22
  ae:	96 03       	fmuls	r17, r22
  b0:	96 03       	fmuls	r17, r22
  b2:	96 03       	fmuls	r17, r22
  b4:	a3 03       	fmuls	r18, r19
  b6:	a3 03       	fmuls	r18, r19
  b8:	a3 03       	fmuls	r18, r19
  ba:	a3 03       	fmuls	r18, r19
  bc:	a3 03       	fmuls	r18, r19
  be:	a3 03       	fmuls	r18, r19
  c0:	29 04       	cpc	r2, r9
  c2:	4c 04       	cpc	r4, r12
  c4:	3e 04       	cpc	r3, r14
  c6:	52 04       	cpc	r5, r2
  c8:	58 04       	cpc	r5, r8
  ca:	60 04       	cpc	r6, r0
  cc:	80 04       	cpc	r8, r0
  ce:	71 04       	cpc	r7, r1
  d0:	86 04       	cpc	r8, r6
  d2:	8c 04       	cpc	r8, r12
  d4:	94 04       	cpc	r9, r4
  d6:	a3 04       	cpc	r10, r3
  d8:	9d 04       	cpc	r9, r13
  da:	0d 05       	cpc	r16, r13
  dc:	50 05       	cpc	r21, r0
  de:	b8 04       	cpc	r11, r8
  e0:	e4 04       	cpc	r14, r4
  e2:	de 04       	cpc	r13, r14
  e4:	07 05       	cpc	r16, r7
  e6:	13 05       	cpc	r17, r3
  e8:	28 05       	cpc	r18, r8
  ea:	3d 05       	cpc	r19, r13
  ec:	22 05       	cpc	r18, r2
  ee:	37 05       	cpc	r19, r7
  f0:	4b 05       	cpc	r20, r11

000000f2 <__ctors_end>:
  f2:	11 24       	eor	r1, r1
  f4:	1f be       	out	0x3f, r1	; 63
  f6:	cf ef       	ldi	r28, 0xFF	; 255
  f8:	d0 e4       	ldi	r29, 0x40	; 64
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61

000000fe <__do_copy_data>:
  fe:	11 e0       	ldi	r17, 0x01	; 1
 100:	a0 e0       	ldi	r26, 0x00	; 0
 102:	b1 e0       	ldi	r27, 0x01	; 1
 104:	ea e7       	ldi	r30, 0x7A	; 122
 106:	fd e0       	ldi	r31, 0x0D	; 13
 108:	00 e0       	ldi	r16, 0x00	; 0
 10a:	0b bf       	out	0x3b, r16	; 59
 10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x14>
 10e:	07 90       	elpm	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	aa 34       	cpi	r26, 0x4A	; 74
 114:	b1 07       	cpc	r27, r17
 116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0x10>

00000118 <__do_clear_bss>:
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	aa e4       	ldi	r26, 0x4A	; 74
 11c:	b1 e0       	ldi	r27, 0x01	; 1
 11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
 120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
 122:	ae 3d       	cpi	r26, 0xDE	; 222
 124:	b2 07       	cpc	r27, r18
 126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>
 128:	f8 d4       	rcall	.+2544   	; 0xb1a <main>
 12a:	25 c6       	rjmp	.+3146   	; 0xd76 <_exit>

0000012c <__bad_interrupt>:
 12c:	69 cf       	rjmp	.-302    	; 0x0 <__vectors>

0000012e <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 12e:	18 16       	cp	r1, r24
 130:	19 06       	cpc	r1, r25
 132:	5c f0       	brlt	.+22     	; 0x14a <delay_ms+0x1c>
 134:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 136:	00 00       	nop
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 13c:	e1 f7       	brne	.-8      	; 0x136 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 13e:	4f 5f       	subi	r20, 0xFF	; 255
 140:	5f 4f       	sbci	r21, 0xFF	; 255
 142:	48 17       	cp	r20, r24
 144:	59 07       	cpc	r21, r25
 146:	29 f4       	brne	.+10     	; 0x152 <delay_ms+0x24>
 148:	08 95       	ret
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	50 e0       	ldi	r21, 0x00	; 0



void delay_ms(int miliSec) //for 8 Mhz crystal

{
 14e:	67 e0       	ldi	r22, 0x07	; 7
 150:	73 e0       	ldi	r23, 0x03	; 3
 152:	9b 01       	movw	r18, r22
 154:	f0 cf       	rjmp	.-32     	; 0x136 <delay_ms+0x8>

00000156 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 156:	5e 9a       	sbi	0x0b, 6	; 11
   DATA_BUS = Data;
 158:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 15a:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 15c:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 15e:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	e4 cf       	rjmp	.-56     	; 0x12e <delay_ms>

00000166 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 166:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
 168:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 16a:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 16c:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 16e:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	dc cf       	rjmp	.-72     	; 0x12e <delay_ms>

00000176 <LCD_Cursor>:
   asm("nop");
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}	
void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x1 LCD: column < 9
 176:	81 31       	cpi	r24, 0x11	; 17
 178:	10 f4       	brcc	.+4      	; 0x17e <LCD_Cursor+0x8>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
 17a:	81 58       	subi	r24, 0x81	; 129
 17c:	f4 cf       	rjmp	.-24     	; 0x166 <LCD_WriteCommand>
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 17e:	81 55       	subi	r24, 0x51	; 81
 180:	f2 cf       	rjmp	.-28     	; 0x166 <LCD_WriteCommand>

00000182 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	f0 cf       	rjmp	.-32     	; 0x166 <LCD_WriteCommand>

00000186 <LCD_DisplayString>:
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
		// 16x2 LCD: column - 9
	}
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	18 2f       	mov	r17, r24
 18e:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 190:	f8 df       	rcall	.-16     	; 0x182 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 192:	98 81       	ld	r25, Y
 194:	99 23       	and	r25, r25
 196:	51 f0       	breq	.+20     	; 0x1ac <LCD_DisplayString+0x26>
		// 16x2 LCD: column - 9
	}
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
 198:	81 2f       	mov	r24, r17
   while(*string) {
      LCD_Cursor(c++);
 19a:	18 2f       	mov	r17, r24
 19c:	1f 5f       	subi	r17, 0xFF	; 255
 19e:	eb df       	rcall	.-42     	; 0x176 <LCD_Cursor>
      LCD_WriteData(*string++);
 1a0:	89 91       	ld	r24, Y+
 1a2:	d9 df       	rcall	.-78     	; 0x156 <LCD_WriteData>
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 1a4:	81 2f       	mov	r24, r17
	}
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 1a6:	98 81       	ld	r25, Y
 1a8:	91 11       	cpse	r25, r1
 1aa:	f7 cf       	rjmp	.-18     	; 0x19a <LCD_DisplayString+0x14>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
	LCD_Cursor(32);
 1ac:	80 e2       	ldi	r24, 0x20	; 32
 1ae:	e3 df       	rcall	.-58     	; 0x176 <LCD_Cursor>
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	08 95       	ret

000001b8 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 1b8:	84 e6       	ldi	r24, 0x64	; 100
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	b8 df       	rcall	.-144    	; 0x12e <delay_ms>
	LCD_WriteCommand(0x38);
 1be:	88 e3       	ldi	r24, 0x38	; 56
 1c0:	d2 df       	rcall	.-92     	; 0x166 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 1c2:	86 e0       	ldi	r24, 0x06	; 6
 1c4:	d0 df       	rcall	.-96     	; 0x166 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	ce df       	rcall	.-100    	; 0x166 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	cc df       	rcall	.-104    	; 0x166 <LCD_WriteCommand>
	delay_ms(10);						 
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	ad cf       	rjmp	.-166    	; 0x12e <delay_ms>

000001d4 <TimeCrunchSMTick>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
 1d4:	81 11       	cpse	r24, r1
 1d6:	2b c0       	rjmp	.+86     	; 0x22e <TimeCrunchSMTick+0x5a>
 1d8:	80 91 c1 01 	lds	r24, 0x01C1
 1dc:	8b 33       	cpi	r24, 0x3B	; 59
 1de:	19 f5       	brne	.+70     	; 0x226 <TimeCrunchSMTick+0x52>
 1e0:	80 91 c0 01 	lds	r24, 0x01C0
 1e4:	8b 33       	cpi	r24, 0x3B	; 59
 1e6:	c9 f4       	brne	.+50     	; 0x21a <TimeCrunchSMTick+0x46>
 1e8:	80 91 bf 01 	lds	r24, 0x01BF
 1ec:	8b 30       	cpi	r24, 0x0B	; 11
 1ee:	51 f4       	brne	.+20     	; 0x204 <TimeCrunchSMTick+0x30>
 1f0:	90 91 c2 01 	lds	r25, 0x01C2
 1f4:	99 23       	and	r25, r25
 1f6:	11 f0       	breq	.+4      	; 0x1fc <TimeCrunchSMTick+0x28>
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <TimeCrunchSMTick+0x2a>
 1fc:	9f ef       	ldi	r25, 0xFF	; 255
 1fe:	90 93 c2 01 	sts	0x01C2, r25
 202:	05 c0       	rjmp	.+10     	; 0x20e <TimeCrunchSMTick+0x3a>
 204:	8c 30       	cpi	r24, 0x0C	; 12
 206:	19 f4       	brne	.+6      	; 0x20e <TimeCrunchSMTick+0x3a>
 208:	10 92 bf 01 	sts	0x01BF, r1
 20c:	03 c0       	rjmp	.+6      	; 0x214 <TimeCrunchSMTick+0x40>
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	80 93 bf 01 	sts	0x01BF, r24
 214:	10 92 c0 01 	sts	0x01C0, r1
 218:	03 c0       	rjmp	.+6      	; 0x220 <TimeCrunchSMTick+0x4c>
 21a:	8f 5f       	subi	r24, 0xFF	; 255
 21c:	80 93 c0 01 	sts	0x01C0, r24
 220:	10 92 c1 01 	sts	0x01C1, r1
 224:	0f c0       	rjmp	.+30     	; 0x244 <TimeCrunchSMTick+0x70>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 c1 01 	sts	0x01C1, r24
 22c:	0b c0       	rjmp	.+22     	; 0x244 <TimeCrunchSMTick+0x70>
 22e:	8b e0       	ldi	r24, 0x0B	; 11
 230:	80 93 bf 01 	sts	0x01BF, r24
 234:	8b e3       	ldi	r24, 0x3B	; 59
 236:	80 93 c0 01 	sts	0x01C0, r24
 23a:	88 e2       	ldi	r24, 0x28	; 40
 23c:	80 93 c1 01 	sts	0x01C1, r24
 240:	10 92 c2 01 	sts	0x01C2, r1
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	08 95       	ret

00000248 <findGCD>:
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	b6 2f       	mov	r27, r22
 252:	a7 2f       	mov	r26, r23
 254:	f8 2f       	mov	r31, r24
 256:	e9 2f       	mov	r30, r25
 258:	02 2f       	mov	r16, r18
 25a:	13 2f       	mov	r17, r19
 25c:	d4 2f       	mov	r29, r20
 25e:	c5 2f       	mov	r28, r21
 260:	04 c0       	rjmp	.+8      	; 0x26a <findGCD+0x22>
 262:	05 2f       	mov	r16, r21
 264:	14 2f       	mov	r17, r20
 266:	d3 2f       	mov	r29, r19
 268:	c2 2f       	mov	r28, r18
 26a:	6b 2f       	mov	r22, r27
 26c:	7a 2f       	mov	r23, r26
 26e:	8f 2f       	mov	r24, r31
 270:	9e 2f       	mov	r25, r30
 272:	20 2f       	mov	r18, r16
 274:	31 2f       	mov	r19, r17
 276:	4d 2f       	mov	r20, r29
 278:	5c 2f       	mov	r21, r28
 27a:	33 d5       	rcall	.+2662   	; 0xce2 <__udivmodsi4>
 27c:	b0 2f       	mov	r27, r16
 27e:	a1 2f       	mov	r26, r17
 280:	fd 2f       	mov	r31, r29
 282:	ec 2f       	mov	r30, r28
 284:	56 2f       	mov	r21, r22
 286:	47 2f       	mov	r20, r23
 288:	38 2f       	mov	r19, r24
 28a:	29 2f       	mov	r18, r25
 28c:	67 2b       	or	r22, r23
 28e:	68 2b       	or	r22, r24
 290:	69 2b       	or	r22, r25
 292:	39 f7       	brne	.-50     	; 0x262 <findGCD+0x1a>
 294:	60 2f       	mov	r22, r16
 296:	71 2f       	mov	r23, r17
 298:	8d 2f       	mov	r24, r29
 29a:	9c 2f       	mov	r25, r28
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	08 95       	ret

000002a6 <TimerSet>:
 2a6:	60 93 00 01 	sts	0x0100, r22
 2aa:	70 93 01 01 	sts	0x0101, r23
 2ae:	80 93 02 01 	sts	0x0102, r24
 2b2:	90 93 03 01 	sts	0x0103, r25
 2b6:	60 93 4a 01 	sts	0x014A, r22
 2ba:	70 93 4b 01 	sts	0x014B, r23
 2be:	80 93 4c 01 	sts	0x014C, r24
 2c2:	90 93 4d 01 	sts	0x014D, r25
 2c6:	08 95       	ret

000002c8 <TimerOn>:
 2c8:	8b e0       	ldi	r24, 0x0B	; 11
 2ca:	80 93 81 00 	sts	0x0081, r24
 2ce:	8d e7       	ldi	r24, 0x7D	; 125
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 89 00 	sts	0x0089, r25
 2d6:	80 93 88 00 	sts	0x0088, r24
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	80 93 6f 00 	sts	0x006F, r24
 2e0:	10 92 85 00 	sts	0x0085, r1
 2e4:	10 92 84 00 	sts	0x0084, r1
 2e8:	80 91 00 01 	lds	r24, 0x0100
 2ec:	90 91 01 01 	lds	r25, 0x0101
 2f0:	a0 91 02 01 	lds	r26, 0x0102
 2f4:	b0 91 03 01 	lds	r27, 0x0103
 2f8:	80 93 4a 01 	sts	0x014A, r24
 2fc:	90 93 4b 01 	sts	0x014B, r25
 300:	a0 93 4c 01 	sts	0x014C, r26
 304:	b0 93 4d 01 	sts	0x014D, r27
 308:	8f b7       	in	r24, 0x3f	; 63
 30a:	80 68       	ori	r24, 0x80	; 128
 30c:	8f bf       	out	0x3f, r24	; 63
 30e:	08 95       	ret

00000310 <TimerISR>:
}

void TimerISR() {
	TimerFlag = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 4e 01 	sts	0x014E, r24
 316:	08 95       	ret

00000318 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	0b b6       	in	r0, 0x3b	; 59
 324:	0f 92       	push	r0
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 33e:	80 91 4a 01 	lds	r24, 0x014A
 342:	90 91 4b 01 	lds	r25, 0x014B
 346:	a0 91 4c 01 	lds	r26, 0x014C
 34a:	b0 91 4d 01 	lds	r27, 0x014D
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	a1 09       	sbc	r26, r1
 352:	b1 09       	sbc	r27, r1
 354:	80 93 4a 01 	sts	0x014A, r24
 358:	90 93 4b 01 	sts	0x014B, r25
 35c:	a0 93 4c 01 	sts	0x014C, r26
 360:	b0 93 4d 01 	sts	0x014D, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 364:	89 2b       	or	r24, r25
 366:	8a 2b       	or	r24, r26
 368:	8b 2b       	or	r24, r27
 36a:	89 f4       	brne	.+34     	; 0x38e <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
 36c:	d1 df       	rcall	.-94     	; 0x310 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 36e:	80 91 00 01 	lds	r24, 0x0100
 372:	90 91 01 01 	lds	r25, 0x0101
 376:	a0 91 02 01 	lds	r26, 0x0102
 37a:	b0 91 03 01 	lds	r27, 0x0103
 37e:	80 93 4a 01 	sts	0x014A, r24
 382:	90 93 4b 01 	sts	0x014B, r25
 386:	a0 93 4c 01 	sts	0x014C, r26
 38a:	b0 93 4d 01 	sts	0x014D, r27
	}
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	bf 91       	pop	r27
 394:	af 91       	pop	r26
 396:	9f 91       	pop	r25
 398:	8f 91       	pop	r24
 39a:	7f 91       	pop	r23
 39c:	6f 91       	pop	r22
 39e:	5f 91       	pop	r21
 3a0:	4f 91       	pop	r20
 3a2:	3f 91       	pop	r19
 3a4:	2f 91       	pop	r18
 3a6:	0f 90       	pop	r0
 3a8:	0b be       	out	0x3b, r0	; 59
 3aa:	0f 90       	pop	r0
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	0f 90       	pop	r0
 3b0:	1f 90       	pop	r1
 3b2:	18 95       	reti

000003b4 <updateTimeString>:
//Shared Variables
eetime_t time;
unsigned char timeString[32];

void updateTimeString(){
	timeString[2] = timeString[5] = ':';
 3b4:	8a e3       	ldi	r24, 0x3A	; 58
 3b6:	80 93 a3 01 	sts	0x01A3, r24
 3ba:	80 93 a0 01 	sts	0x01A0, r24
	if(time.Hour >= 10){// Update Hour
 3be:	80 91 bf 01 	lds	r24, 0x01BF
 3c2:	8a 30       	cpi	r24, 0x0A	; 10
 3c4:	58 f0       	brcs	.+22     	; 0x3dc <updateTimeString+0x28>
		timeString[HOURINDEX] = '0'+(time.Hour/10);
 3c6:	9d ec       	ldi	r25, 0xCD	; 205
 3c8:	89 9f       	mul	r24, r25
 3ca:	91 2d       	mov	r25, r1
 3cc:	11 24       	eor	r1, r1
 3ce:	96 95       	lsr	r25
 3d0:	96 95       	lsr	r25
 3d2:	96 95       	lsr	r25
 3d4:	90 5d       	subi	r25, 0xD0	; 208
 3d6:	90 93 9e 01 	sts	0x019E, r25
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <updateTimeString+0x2e>
		}else{
		timeString[HOURINDEX] = '0';
 3dc:	90 e3       	ldi	r25, 0x30	; 48
 3de:	90 93 9e 01 	sts	0x019E, r25
	}
	timeString[HOURINDEX+1] = '0'+(time.Hour % 10);
 3e2:	9d ec       	ldi	r25, 0xCD	; 205
 3e4:	89 9f       	mul	r24, r25
 3e6:	91 2d       	mov	r25, r1
 3e8:	11 24       	eor	r1, r1
 3ea:	96 95       	lsr	r25
 3ec:	96 95       	lsr	r25
 3ee:	96 95       	lsr	r25
 3f0:	99 0f       	add	r25, r25
 3f2:	29 2f       	mov	r18, r25
 3f4:	22 0f       	add	r18, r18
 3f6:	22 0f       	add	r18, r18
 3f8:	92 0f       	add	r25, r18
 3fa:	89 1b       	sub	r24, r25
 3fc:	80 5d       	subi	r24, 0xD0	; 208
 3fe:	80 93 9f 01 	sts	0x019F, r24
	if(time.Minute >= 10){// Update Minute
 402:	80 91 c0 01 	lds	r24, 0x01C0
 406:	8a 30       	cpi	r24, 0x0A	; 10
 408:	58 f0       	brcs	.+22     	; 0x420 <updateTimeString+0x6c>
		timeString[MINUTEINDEX] = '0'+(time.Minute/10);
 40a:	9d ec       	ldi	r25, 0xCD	; 205
 40c:	89 9f       	mul	r24, r25
 40e:	91 2d       	mov	r25, r1
 410:	11 24       	eor	r1, r1
 412:	96 95       	lsr	r25
 414:	96 95       	lsr	r25
 416:	96 95       	lsr	r25
 418:	90 5d       	subi	r25, 0xD0	; 208
 41a:	90 93 a1 01 	sts	0x01A1, r25
 41e:	03 c0       	rjmp	.+6      	; 0x426 <updateTimeString+0x72>
		}else{
		timeString[MINUTEINDEX] = '0';
 420:	90 e3       	ldi	r25, 0x30	; 48
 422:	90 93 a1 01 	sts	0x01A1, r25
	}
	timeString[MINUTEINDEX+1]='0'+(time.Minute % 10);
 426:	9d ec       	ldi	r25, 0xCD	; 205
 428:	89 9f       	mul	r24, r25
 42a:	91 2d       	mov	r25, r1
 42c:	11 24       	eor	r1, r1
 42e:	96 95       	lsr	r25
 430:	96 95       	lsr	r25
 432:	96 95       	lsr	r25
 434:	99 0f       	add	r25, r25
 436:	29 2f       	mov	r18, r25
 438:	22 0f       	add	r18, r18
 43a:	22 0f       	add	r18, r18
 43c:	92 0f       	add	r25, r18
 43e:	89 1b       	sub	r24, r25
 440:	80 5d       	subi	r24, 0xD0	; 208
 442:	80 93 a2 01 	sts	0x01A2, r24
	if(time.Second >= 10){// Update Second
 446:	80 91 c1 01 	lds	r24, 0x01C1
 44a:	8a 30       	cpi	r24, 0x0A	; 10
 44c:	58 f0       	brcs	.+22     	; 0x464 <updateTimeString+0xb0>
		timeString[SECONDINDEX] = '0'+(time.Second/10);
 44e:	9d ec       	ldi	r25, 0xCD	; 205
 450:	89 9f       	mul	r24, r25
 452:	91 2d       	mov	r25, r1
 454:	11 24       	eor	r1, r1
 456:	96 95       	lsr	r25
 458:	96 95       	lsr	r25
 45a:	96 95       	lsr	r25
 45c:	90 5d       	subi	r25, 0xD0	; 208
 45e:	90 93 a4 01 	sts	0x01A4, r25
 462:	03 c0       	rjmp	.+6      	; 0x46a <updateTimeString+0xb6>
		}else{
		timeString[SECONDINDEX] = '0';
 464:	90 e3       	ldi	r25, 0x30	; 48
 466:	90 93 a4 01 	sts	0x01A4, r25
	}
	timeString[SECONDINDEX+1]='0'+(time.Second % 10);
 46a:	9d ec       	ldi	r25, 0xCD	; 205
 46c:	89 9f       	mul	r24, r25
 46e:	91 2d       	mov	r25, r1
 470:	11 24       	eor	r1, r1
 472:	96 95       	lsr	r25
 474:	96 95       	lsr	r25
 476:	96 95       	lsr	r25
 478:	99 0f       	add	r25, r25
 47a:	29 2f       	mov	r18, r25
 47c:	22 0f       	add	r18, r18
 47e:	22 0f       	add	r18, r18
 480:	92 0f       	add	r25, r18
 482:	89 1b       	sub	r24, r25
 484:	80 5d       	subi	r24, 0xD0	; 208
 486:	80 93 a5 01 	sts	0x01A5, r24
	
	if(time.IsAM != 0){
 48a:	80 91 c2 01 	lds	r24, 0x01C2
 48e:	88 23       	and	r24, r24
 490:	21 f0       	breq	.+8      	; 0x49a <updateTimeString+0xe6>
		timeString[AMPMINDEX] = 'A';
 492:	81 e4       	ldi	r24, 0x41	; 65
 494:	80 93 a7 01 	sts	0x01A7, r24
 498:	08 95       	ret
	}else{
		timeString[AMPMINDEX] = 'P';
 49a:	80 e5       	ldi	r24, 0x50	; 80
 49c:	80 93 a7 01 	sts	0x01A7, r24
 4a0:	08 95       	ret

000004a2 <GetKeypadKey>:
#define KEYPADPORT PORTA


unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
 4a2:	8f ee       	ldi	r24, 0xEF	; 239
 4a4:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 4a6:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
 4a8:	00 9b       	sbis	0x00, 0	; 0
 4aa:	29 c0       	rjmp	.+82     	; 0x4fe <GetKeypadKey+0x5c>
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
 4ac:	01 9b       	sbis	0x00, 1	; 0
 4ae:	29 c0       	rjmp	.+82     	; 0x502 <GetKeypadKey+0x60>
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
 4b0:	02 9b       	sbis	0x00, 2	; 0
 4b2:	29 c0       	rjmp	.+82     	; 0x506 <GetKeypadKey+0x64>
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
 4b4:	03 9b       	sbis	0x00, 3	; 0
 4b6:	29 c0       	rjmp	.+82     	; 0x50a <GetKeypadKey+0x68>
	
	KEYPADPORT = 0xDF;
 4b8:	8f ed       	ldi	r24, 0xDF	; 223
 4ba:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 4bc:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
 4be:	00 9b       	sbis	0x00, 0	; 0
 4c0:	26 c0       	rjmp	.+76     	; 0x50e <GetKeypadKey+0x6c>
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
 4c2:	01 9b       	sbis	0x00, 1	; 0
 4c4:	26 c0       	rjmp	.+76     	; 0x512 <GetKeypadKey+0x70>
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
 4c6:	02 9b       	sbis	0x00, 2	; 0
 4c8:	26 c0       	rjmp	.+76     	; 0x516 <GetKeypadKey+0x74>
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
 4ca:	03 9b       	sbis	0x00, 3	; 0
 4cc:	26 c0       	rjmp	.+76     	; 0x51a <GetKeypadKey+0x78>

	KEYPADPORT = 0xBF;
 4ce:	8f eb       	ldi	r24, 0xBF	; 191
 4d0:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 4d2:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
 4d4:	00 9b       	sbis	0x00, 0	; 0
 4d6:	23 c0       	rjmp	.+70     	; 0x51e <GetKeypadKey+0x7c>
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
 4d8:	01 9b       	sbis	0x00, 1	; 0
 4da:	23 c0       	rjmp	.+70     	; 0x522 <GetKeypadKey+0x80>
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
 4dc:	02 9b       	sbis	0x00, 2	; 0
 4de:	23 c0       	rjmp	.+70     	; 0x526 <GetKeypadKey+0x84>
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
 4e0:	03 9b       	sbis	0x00, 3	; 0
 4e2:	23 c0       	rjmp	.+70     	; 0x52a <GetKeypadKey+0x88>
	
	KEYPADPORT = 0x7F;
 4e4:	8f e7       	ldi	r24, 0x7F	; 127
 4e6:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 4e8:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
 4ea:	00 9b       	sbis	0x00, 0	; 0
 4ec:	20 c0       	rjmp	.+64     	; 0x52e <GetKeypadKey+0x8c>
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
 4ee:	01 9b       	sbis	0x00, 1	; 0
 4f0:	20 c0       	rjmp	.+64     	; 0x532 <GetKeypadKey+0x90>
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
 4f2:	02 9b       	sbis	0x00, 2	; 0
 4f4:	20 c0       	rjmp	.+64     	; 0x536 <GetKeypadKey+0x94>
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
 4f6:	03 99       	sbic	0x00, 3	; 0
 4f8:	20 c0       	rjmp	.+64     	; 0x53a <GetKeypadKey+0x98>
 4fa:	84 e4       	ldi	r24, 0x44	; 68
 4fc:	08 95       	ret

unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
 4fe:	81 e3       	ldi	r24, 0x31	; 49
 500:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
 502:	84 e3       	ldi	r24, 0x34	; 52
 504:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
 506:	87 e3       	ldi	r24, 0x37	; 55
 508:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
 50a:	8a e2       	ldi	r24, 0x2A	; 42
 50c:	08 95       	ret
	
	KEYPADPORT = 0xDF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
 50e:	82 e3       	ldi	r24, 0x32	; 50
 510:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
 512:	85 e3       	ldi	r24, 0x35	; 53
 514:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
 516:	88 e3       	ldi	r24, 0x38	; 56
 518:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
 51a:	80 e3       	ldi	r24, 0x30	; 48
 51c:	08 95       	ret

	KEYPADPORT = 0xBF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
 51e:	83 e3       	ldi	r24, 0x33	; 51
 520:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
 522:	86 e3       	ldi	r24, 0x36	; 54
 524:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
 526:	89 e3       	ldi	r24, 0x39	; 57
 528:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
 52a:	83 e2       	ldi	r24, 0x23	; 35
 52c:	08 95       	ret
	
	KEYPADPORT = 0x7F;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
 52e:	81 e4       	ldi	r24, 0x41	; 65
 530:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
 532:	82 e4       	ldi	r24, 0x42	; 66
 534:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
 536:	83 e4       	ldi	r24, 0x43	; 67
 538:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
	
	
	return '\0';
 53a:	80 e0       	ldi	r24, 0x00	; 0
}
 53c:	08 95       	ret

0000053e <UpdateInputSMTick>:
	Inputs: PORTA -> Keypad
	Outputs: keyPadInput */
signed char UpdateInputSMTick (signed char state){
	state = UpdateInput_update;
	// Keypad Keys ============================================================================================================
	unsigned char tmpKeypadInput = GetKeypadKey();
 53e:	b1 df       	rcall	.-158    	; 0x4a2 <GetKeypadKey>
	// Process Menu Input keys : A B C D * #
	if(tmpKeypadInput == 'A' || tmpKeypadInput == 'B' || tmpKeypadInput == 'C' || tmpKeypadInput == 'D'
 540:	98 2f       	mov	r25, r24
 542:	91 54       	subi	r25, 0x41	; 65
 544:	94 30       	cpi	r25, 0x04	; 4
 546:	30 f0       	brcs	.+12     	; 0x554 <UpdateInputSMTick+0x16>
		|| tmpKeypadInput == '#' || tmpKeypadInput == '*' || tmpKeypadInput == '0' ){
 548:	83 32       	cpi	r24, 0x23	; 35
 54a:	21 f0       	breq	.+8      	; 0x554 <UpdateInputSMTick+0x16>
 54c:	8a 32       	cpi	r24, 0x2A	; 42
 54e:	11 f0       	breq	.+4      	; 0x554 <UpdateInputSMTick+0x16>
 550:	80 33       	cpi	r24, 0x30	; 48
 552:	19 f4       	brne	.+6      	; 0x55a <UpdateInputSMTick+0x1c>
		menuNavigationInput = tmpKeypadInput;
 554:	80 93 be 01 	sts	0x01BE, r24
 558:	02 c0       	rjmp	.+4      	; 0x55e <UpdateInputSMTick+0x20>
	} else {
		menuNavigationInput = 0;	
 55a:	10 92 be 01 	sts	0x01BE, r1
	}
	return state;
}
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	08 95       	ret

00000562 <updateAlarmString>:
#define ALARMVIEWCOLONINDEX 19
#define ALARMVIEWMINUTESINDEX 20
#define ALARMVIEWAMPMINDEX 23
void updateAlarmString(){ 
	static Alarm* currAlarm;
	currAlarm = &savedAlarms[savedAlarmIterator];
 562:	40 91 dc 01 	lds	r20, 0x01DC
 566:	50 91 dd 01 	lds	r21, 0x01DD
 56a:	fa 01       	movw	r30, r20
 56c:	ee 0f       	add	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	ee 0f       	add	r30, r30
 572:	ff 1f       	adc	r31, r31
 574:	ec 53       	subi	r30, 0x3C	; 60
 576:	fe 4f       	sbci	r31, 0xFE	; 254
 578:	f0 93 50 01 	sts	0x0150, r31
 57c:	e0 93 4f 01 	sts	0x014F, r30
	savedAlarmString[0] = '>';
 580:	8e e3       	ldi	r24, 0x3E	; 62
 582:	80 93 7e 01 	sts	0x017E, r24
	savedAlarmString[1] = 'A';
 586:	81 e4       	ldi	r24, 0x41	; 65
 588:	80 93 7f 01 	sts	0x017F, r24
	savedAlarmString[2] = 'L';
 58c:	9c e4       	ldi	r25, 0x4C	; 76
 58e:	90 93 80 01 	sts	0x0180, r25
	savedAlarmString[3] = 'A';
 592:	80 93 81 01 	sts	0x0181, r24
	savedAlarmString[4] = 'R';
 596:	82 e5       	ldi	r24, 0x52	; 82
 598:	80 93 82 01 	sts	0x0182, r24
	savedAlarmString[5] = 'M';
 59c:	8d e4       	ldi	r24, 0x4D	; 77
 59e:	80 93 83 01 	sts	0x0183, r24

	savedAlarmString[ALARMVIEWNUMBERINDEXTENS] = '0' + (savedAlarmIterator+1)/10;
 5a2:	4f 5f       	subi	r20, 0xFF	; 255
 5a4:	5f 4f       	sbci	r21, 0xFF	; 255
 5a6:	9a 01       	movw	r18, r20
 5a8:	ad ec       	ldi	r26, 0xCD	; 205
 5aa:	bc ec       	ldi	r27, 0xCC	; 204
 5ac:	c2 d3       	rcall	.+1924   	; 0xd32 <__umulhisi3>
 5ae:	96 95       	lsr	r25
 5b0:	87 95       	ror	r24
 5b2:	96 95       	lsr	r25
 5b4:	87 95       	ror	r24
 5b6:	96 95       	lsr	r25
 5b8:	87 95       	ror	r24
 5ba:	28 2f       	mov	r18, r24
 5bc:	20 5d       	subi	r18, 0xD0	; 208
 5be:	20 93 85 01 	sts	0x0185, r18
	savedAlarmString[ALARMVIEWNUMBERINDEXONES] = '0' + (savedAlarmIterator+1)%10;
 5c2:	9c 01       	movw	r18, r24
 5c4:	22 0f       	add	r18, r18
 5c6:	33 1f       	adc	r19, r19
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	82 0f       	add	r24, r18
 5d6:	93 1f       	adc	r25, r19
 5d8:	48 1b       	sub	r20, r24
 5da:	59 0b       	sbc	r21, r25
 5dc:	40 5d       	subi	r20, 0xD0	; 208
 5de:	40 93 86 01 	sts	0x0186, r20
	if(currAlarm->IsActive == 0x00){
 5e2:	83 81       	ldd	r24, Z+3	; 0x03
 5e4:	81 11       	cpse	r24, r1
 5e6:	09 c0       	rjmp	.+18     	; 0x5fa <updateAlarmString+0x98>
		savedAlarmString[ALARMVIEWONOFFINDEX] = 'O';
 5e8:	8f e4       	ldi	r24, 0x4F	; 79
 5ea:	80 93 8a 01 	sts	0x018A, r24
		savedAlarmString[ALARMVIEWONOFFINDEX+1] = 'F';
 5ee:	86 e4       	ldi	r24, 0x46	; 70
 5f0:	80 93 8b 01 	sts	0x018B, r24
		savedAlarmString[ALARMVIEWONOFFINDEX+2] = 'F';
 5f4:	80 93 8c 01 	sts	0x018C, r24
 5f8:	09 c0       	rjmp	.+18     	; 0x60c <updateAlarmString+0xaa>
		
	} else{
		savedAlarmString[ALARMVIEWONOFFINDEX] = ' ';
 5fa:	80 e2       	ldi	r24, 0x20	; 32
 5fc:	80 93 8a 01 	sts	0x018A, r24
		savedAlarmString[ALARMVIEWONOFFINDEX+1] = 'O';
 600:	8f e4       	ldi	r24, 0x4F	; 79
 602:	80 93 8b 01 	sts	0x018B, r24
		savedAlarmString[ALARMVIEWONOFFINDEX+2] = 'N';
 606:	8e e4       	ldi	r24, 0x4E	; 78
 608:	80 93 8c 01 	sts	0x018C, r24
	}
	savedAlarmString[ALARMVIEWHOURSINDEX] = '0'+ currAlarm->Hour/10;
 60c:	e0 91 4f 01 	lds	r30, 0x014F
 610:	f0 91 50 01 	lds	r31, 0x0150
 614:	90 81       	ld	r25, Z
 616:	8d ec       	ldi	r24, 0xCD	; 205
 618:	98 9f       	mul	r25, r24
 61a:	91 2d       	mov	r25, r1
 61c:	11 24       	eor	r1, r1
 61e:	96 95       	lsr	r25
 620:	96 95       	lsr	r25
 622:	96 95       	lsr	r25
 624:	90 5d       	subi	r25, 0xD0	; 208
 626:	90 93 8f 01 	sts	0x018F, r25
	savedAlarmString[ALARMVIEWHOURSINDEX+1] = '0'+ currAlarm->Hour%10;
 62a:	90 81       	ld	r25, Z
 62c:	98 9f       	mul	r25, r24
 62e:	21 2d       	mov	r18, r1
 630:	11 24       	eor	r1, r1
 632:	26 95       	lsr	r18
 634:	26 95       	lsr	r18
 636:	26 95       	lsr	r18
 638:	22 0f       	add	r18, r18
 63a:	32 2f       	mov	r19, r18
 63c:	33 0f       	add	r19, r19
 63e:	33 0f       	add	r19, r19
 640:	23 0f       	add	r18, r19
 642:	92 1b       	sub	r25, r18
 644:	90 5d       	subi	r25, 0xD0	; 208
 646:	90 93 90 01 	sts	0x0190, r25
	savedAlarmString[ALARMVIEWCOLONINDEX] = ':';
 64a:	9a e3       	ldi	r25, 0x3A	; 58
 64c:	90 93 91 01 	sts	0x0191, r25
	savedAlarmString[ALARMVIEWMINUTESINDEX] = '0'+currAlarm->Minute/10;
 650:	91 81       	ldd	r25, Z+1	; 0x01
 652:	98 9f       	mul	r25, r24
 654:	91 2d       	mov	r25, r1
 656:	11 24       	eor	r1, r1
 658:	96 95       	lsr	r25
 65a:	96 95       	lsr	r25
 65c:	96 95       	lsr	r25
 65e:	90 5d       	subi	r25, 0xD0	; 208
 660:	90 93 92 01 	sts	0x0192, r25
	savedAlarmString[ALARMVIEWMINUTESINDEX+1] = '0'+currAlarm->Minute%10;
 664:	91 81       	ldd	r25, Z+1	; 0x01
 666:	98 9f       	mul	r25, r24
 668:	81 2d       	mov	r24, r1
 66a:	11 24       	eor	r1, r1
 66c:	86 95       	lsr	r24
 66e:	86 95       	lsr	r24
 670:	86 95       	lsr	r24
 672:	88 0f       	add	r24, r24
 674:	28 2f       	mov	r18, r24
 676:	22 0f       	add	r18, r18
 678:	22 0f       	add	r18, r18
 67a:	82 0f       	add	r24, r18
 67c:	98 1b       	sub	r25, r24
 67e:	90 5d       	subi	r25, 0xD0	; 208
 680:	90 93 93 01 	sts	0x0193, r25
	if(currAlarm->IsAM == 0x00){
 684:	82 81       	ldd	r24, Z+2	; 0x02
 686:	81 11       	cpse	r24, r1
 688:	04 c0       	rjmp	.+8      	; 0x692 <updateAlarmString+0x130>
		//PM
		savedAlarmString[ALARMVIEWAMPMINDEX] = 'P';
 68a:	80 e5       	ldi	r24, 0x50	; 80
 68c:	80 93 95 01 	sts	0x0195, r24
 690:	03 c0       	rjmp	.+6      	; 0x698 <updateAlarmString+0x136>
	}else{
		//AM
		savedAlarmString[ALARMVIEWAMPMINDEX] = 'A';
 692:	81 e4       	ldi	r24, 0x41	; 65
 694:	80 93 95 01 	sts	0x0195, r24
		
	}
	savedAlarmString[ALARMVIEWAMPMINDEX+1] = 'M';
 698:	8d e4       	ldi	r24, 0x4D	; 77
 69a:	80 93 96 01 	sts	0x0196, r24
 69e:	08 95       	ret

000006a0 <LCDDisplaySMTick>:
/*
	State Machine LCDDisplaySM
	NOTE: KEEP THIS SM IN MAIN FILE
	Inputs: eetime time
	Outputs: to HW -> LCD Display */
signed char LCDDisplaySMTick( signed char state ){
 6a0:	cf 93       	push	r28
 6a2:	c8 2f       	mov	r28, r24
	switch(state){
 6a4:	8f 3f       	cpi	r24, 0xFF	; 255
 6a6:	21 f0       	breq	.+8      	; 0x6b0 <LCDDisplaySMTick+0x10>
 6a8:	81 11       	cpse	r24, r1
 6aa:	1b c0       	rjmp	.+54     	; 0x6e2 <LCDDisplaySMTick+0x42>
		case LCDDisplay_updatelcd:
			PORTB = 0x00;
 6ac:	15 b8       	out	0x05, r1	; 5
			break;
 6ae:	49 c0       	rjmp	.+146    	; 0x742 <LCDDisplaySMTick+0xa2>
		case -1:
			PORTB = 0xFF;
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	85 b9       	out	0x05, r24	; 5
 6b4:	ee e9       	ldi	r30, 0x9E	; 158
 6b6:	f1 e0       	ldi	r31, 0x01	; 1
/*
	State Machine LCDDisplaySM
	NOTE: KEEP THIS SM IN MAIN FILE
	Inputs: eetime time
	Outputs: to HW -> LCD Display */
signed char LCDDisplaySMTick( signed char state ){
 6b8:	8e eb       	ldi	r24, 0xBE	; 190
 6ba:	91 e0       	ldi	r25, 0x01	; 1
			PORTB = 0xFF;
			state = LCDDisplay_updatelcd; 
			// initialize anything that is going to be displayed and such
			// initializations for clockview			
			for(unsigned char i = 0; i < 32; ++i){
				timeString[i] = ' ';
 6bc:	20 e2       	ldi	r18, 0x20	; 32
 6be:	21 93       	st	Z+, r18
		case -1:
			PORTB = 0xFF;
			state = LCDDisplay_updatelcd; 
			// initialize anything that is going to be displayed and such
			// initializations for clockview			
			for(unsigned char i = 0; i < 32; ++i){
 6c0:	e8 17       	cp	r30, r24
 6c2:	f9 07       	cpc	r31, r25
 6c4:	e1 f7       	brne	.-8      	; 0x6be <LCDDisplaySMTick+0x1e>
				timeString[i] = ' ';
			}
			//initializations for Alarms
			savedAlarmIterator = 0;
 6c6:	10 92 dd 01 	sts	0x01DD, r1
 6ca:	10 92 dc 01 	sts	0x01DC, r1
 6ce:	ee e7       	ldi	r30, 0x7E	; 126
 6d0:	f1 e0       	ldi	r31, 0x01	; 1
/*
	State Machine LCDDisplaySM
	NOTE: KEEP THIS SM IN MAIN FILE
	Inputs: eetime time
	Outputs: to HW -> LCD Display */
signed char LCDDisplaySMTick( signed char state ){
 6d2:	8e e9       	ldi	r24, 0x9E	; 158
 6d4:	91 e0       	ldi	r25, 0x01	; 1
				timeString[i] = ' ';
			}
			//initializations for Alarms
			savedAlarmIterator = 0;
			for(unsigned char i = 0; i < 32; ++i){
				savedAlarmString[i] = ' ';
 6d6:	20 e2       	ldi	r18, 0x20	; 32
 6d8:	21 93       	st	Z+, r18
			for(unsigned char i = 0; i < 32; ++i){
				timeString[i] = ' ';
			}
			//initializations for Alarms
			savedAlarmIterator = 0;
			for(unsigned char i = 0; i < 32; ++i){
 6da:	e8 17       	cp	r30, r24
 6dc:	f9 07       	cpc	r31, r25
 6de:	e1 f7       	brne	.-8      	; 0x6d8 <LCDDisplaySMTick+0x38>
 6e0:	30 c0       	rjmp	.+96     	; 0x742 <LCDDisplaySMTick+0xa2>
				savedAlarmString[i] = ' ';
			}
			break;
	}

	switch(state){
 6e2:	81 11       	cpse	r24, r1
 6e4:	30 c0       	rjmp	.+96     	; 0x746 <LCDDisplaySMTick+0xa6>
		case LCDDisplay_updatelcd:
			switch(SYSTEMSTATE){
 6e6:	e0 91 c3 01 	lds	r30, 0x01C3
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	ea 31       	cpi	r30, 0x1A	; 26
 6ee:	f1 05       	cpc	r31, r1
 6f0:	18 f5       	brcc	.+70     	; 0x738 <LCDDisplaySMTick+0x98>
 6f2:	ea 5b       	subi	r30, 0xBA	; 186
 6f4:	ff 4f       	sbci	r31, 0xFF	; 255
 6f6:	17 c3       	rjmp	.+1582   	; 0xd26 <__tablejump2__>
				case SystemDriver_init:
					break;
//=========================================================================================
				case SystemDriver_timedisplaytitle:
				case SystemDriver_timedisplaytitle_fall:
					LCD_DisplayString(1, "     Clock ");
 6f8:	6c e0       	ldi	r22, 0x0C	; 12
 6fa:	71 e0       	ldi	r23, 0x01	; 1
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	43 dd       	rcall	.-1402   	; 0x186 <LCD_DisplayString>
					break;
 700:	22 c0       	rjmp	.+68     	; 0x746 <LCDDisplaySMTick+0xa6>
				case SystemDriver_timedisplay:
				case SystemDriver_timedisplay_fall:
					updateTimeString();
 702:	58 de       	rcall	.-848    	; 0x3b4 <updateTimeString>
					LCD_DisplayString(1, timeString);
 704:	6e e9       	ldi	r22, 0x9E	; 158
 706:	71 e0       	ldi	r23, 0x01	; 1
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	3d dd       	rcall	.-1414   	; 0x186 <LCD_DisplayString>
					break;
 70c:	1c c0       	rjmp	.+56     	; 0x746 <LCDDisplaySMTick+0xa6>
				case SystemDriver_timedisplaytitle_nextmenuitem:
					break;
//=========================================================================================
				case SystemDriver_alarmaddtitle:
				case SystemDriver_alarmaddtitle_fall:
					LCD_DisplayString(1, "Add Alarm");
 70e:	68 e1       	ldi	r22, 0x18	; 24
 710:	71 e0       	ldi	r23, 0x01	; 1
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	38 dd       	rcall	.-1424   	; 0x186 <LCD_DisplayString>
					break;
 716:	17 c0       	rjmp	.+46     	; 0x746 <LCDDisplaySMTick+0xa6>
				case SystemDriver_alarmaddscroll:
				case SystemDriver_alarmaddscroll_fall:
					LCD_DisplayString(1, "alarmaddscroll");
 718:	62 e2       	ldi	r22, 0x22	; 34
 71a:	71 e0       	ldi	r23, 0x01	; 1
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	33 dd       	rcall	.-1434   	; 0x186 <LCD_DisplayString>
					break;
 720:	12 c0       	rjmp	.+36     	; 0x746 <LCDDisplaySMTick+0xa6>

*/
//=======================================================================================
				case SystemDriver_alarmviewtitle:
				case SystemDriver_alarmviewtitle_fall:
					LCD_DisplayString(1, "     Alarms");
 722:	61 e3       	ldi	r22, 0x31	; 49
 724:	71 e0       	ldi	r23, 0x01	; 1
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	2e dd       	rcall	.-1444   	; 0x186 <LCD_DisplayString>
					break;
 72a:	0d c0       	rjmp	.+26     	; 0x746 <LCDDisplaySMTick+0xa6>
				case SystemDriver_alarmview_HH_fall:
				case SystemDriver_alarmview_MM:
				case SystemDriver_alarmview_MM_fall:
				case SystemDriver_alarmview:
				case SystemDriver_alarmview_fall:
					updateAlarmString();
 72c:	1a df       	rcall	.-460    	; 0x562 <updateAlarmString>
					LCD_DisplayString(1, savedAlarmString);
 72e:	6e e7       	ldi	r22, 0x7E	; 126
 730:	71 e0       	ldi	r23, 0x01	; 1
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	28 dd       	rcall	.-1456   	; 0x186 <LCD_DisplayString>
					break;
 736:	07 c0       	rjmp	.+14     	; 0x746 <LCDDisplaySMTick+0xa6>
				case SystemDriver_alarmview_back_fall:
					break;
				case SystemDriver_alarmview_nextmenuitem:
					break;
				default:
					LCD_DisplayString(1, "Initializing");
 738:	6d e3       	ldi	r22, 0x3D	; 61
 73a:	71 e0       	ldi	r23, 0x01	; 1
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	23 dd       	rcall	.-1466   	; 0x186 <LCD_DisplayString>
					break;
 740:	02 c0       	rjmp	.+4      	; 0x746 <LCDDisplaySMTick+0xa6>
/*
	State Machine LCDDisplaySM
	NOTE: KEEP THIS SM IN MAIN FILE
	Inputs: eetime time
	Outputs: to HW -> LCD Display */
signed char LCDDisplaySMTick( signed char state ){
 742:	c0 e0       	ldi	r28, 0x00	; 0
 744:	d0 cf       	rjmp	.-96     	; 0x6e6 <LCDDisplaySMTick+0x46>
		default: 
			break;
	}

	return state;
}
 746:	8c 2f       	mov	r24, r28
 748:	cf 91       	pop	r28
 74a:	08 95       	ret

0000074c <initializeSavedAlarms>:
	}
	savedAlarmString[ALARMVIEWAMPMINDEX+1] = 'M';
}

// zero savedAlarms should only be called on startup
void initializeSavedAlarms(){
 74c:	e7 ec       	ldi	r30, 0xC7	; 199
 74e:	f1 e0       	ldi	r31, 0x01	; 1
 750:	8f ed       	ldi	r24, 0xDF	; 223
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	df 01       	movw	r26, r30
 756:	13 97       	sbiw	r26, 0x03	; 3
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		savedAlarms[i].Hour = 0;
 758:	1c 92       	st	X, r1
	}
	savedAlarmString[ALARMVIEWAMPMINDEX+1] = 'M';
}

// zero savedAlarms should only be called on startup
void initializeSavedAlarms(){
 75a:	df 01       	movw	r26, r30
 75c:	12 97       	sbiw	r26, 0x02	; 2
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		savedAlarms[i].Hour = 0;
		savedAlarms[i].Minute = 0;
 75e:	1c 92       	st	X, r1
	}
	savedAlarmString[ALARMVIEWAMPMINDEX+1] = 'M';
}

// zero savedAlarms should only be called on startup
void initializeSavedAlarms(){
 760:	df 01       	movw	r26, r30
 762:	11 97       	sbiw	r26, 0x01	; 1
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		savedAlarms[i].Hour = 0;
		savedAlarms[i].Minute = 0;
		savedAlarms[i].IsAM = 0;
 764:	1c 92       	st	X, r1
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
 766:	10 82       	st	Z, r1
 768:	34 96       	adiw	r30, 0x04	; 4
	savedAlarmString[ALARMVIEWAMPMINDEX+1] = 'M';
}

// zero savedAlarms should only be called on startup
void initializeSavedAlarms(){
	for(unsigned char i = 0; i < NUMALARMS; ++i){
 76a:	e8 17       	cp	r30, r24
 76c:	f9 07       	cpc	r31, r25
 76e:	91 f7       	brne	.-28     	; 0x754 <initializeSavedAlarms+0x8>
		savedAlarms[i].Hour = 0;
		savedAlarms[i].Minute = 0;
		savedAlarms[i].IsAM = 0;
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
	}
}
 770:	08 95       	ret

00000772 <loadAlarmsFromEEPROM>:

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
 772:	0f 93       	push	r16
 774:	1f 93       	push	r17
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
 77a:	84 e1       	ldi	r24, 0x14	; 20
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	e5 d2       	rcall	.+1482   	; 0xd4a <__eerd_byte_m1284>
 780:	84 31       	cpi	r24, 0x14	; 20
 782:	f9 f4       	brne	.+62     	; 0x7c2 <loadAlarmsFromEEPROM+0x50>
 784:	c3 e0       	ldi	r28, 0x03	; 3
 786:	d0 e0       	ldi	r29, 0x00	; 0
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
			savedAlarms[i].Hour = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i));
 788:	ce 01       	movw	r24, r28
 78a:	03 97       	sbiw	r24, 0x03	; 3
 78c:	de d2       	rcall	.+1468   	; 0xd4a <__eerd_byte_m1284>
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
	}
}

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
 78e:	8e 01       	movw	r16, r28
 790:	0c 53       	subi	r16, 0x3C	; 60
 792:	1e 4f       	sbci	r17, 0xFE	; 254
 794:	f8 01       	movw	r30, r16
 796:	33 97       	sbiw	r30, 0x03	; 3
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
			savedAlarms[i].Hour = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i));
 798:	80 83       	st	Z, r24
			savedAlarms[i].Minute = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+1));
 79a:	ce 01       	movw	r24, r28
 79c:	02 97       	sbiw	r24, 0x02	; 2
 79e:	d5 d2       	rcall	.+1450   	; 0xd4a <__eerd_byte_m1284>
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
	}
}

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
 7a0:	f8 01       	movw	r30, r16
 7a2:	32 97       	sbiw	r30, 0x02	; 2
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
			savedAlarms[i].Hour = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i));
			savedAlarms[i].Minute = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+1));
 7a4:	80 83       	st	Z, r24
			savedAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+2));
 7a6:	ce 01       	movw	r24, r28
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	cf d2       	rcall	.+1438   	; 0xd4a <__eerd_byte_m1284>
		savedAlarms[i].IsActive = 0; // 0x00 for inactive 0xFF for active. ~
	}
}

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
 7ac:	f8 01       	movw	r30, r16
 7ae:	31 97       	sbiw	r30, 0x01	; 1
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
			savedAlarms[i].Hour = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i));
			savedAlarms[i].Minute = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+1));
			savedAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+2));
 7b0:	80 83       	st	Z, r24
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
 7b2:	ce 01       	movw	r24, r28
 7b4:	ca d2       	rcall	.+1428   	; 0xd4a <__eerd_byte_m1284>
 7b6:	f8 01       	movw	r30, r16
 7b8:	80 83       	st	Z, r24
 7ba:	24 96       	adiw	r28, 0x04	; 4

// fill savedAlarms with EEPROM data. Should really only be called on startup. any updates to savedalarms will be immediately represented in EEPROM
void loadAlarmsFromEEPROM(){
	if(eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) == EEPROM_ALARM_TOPADDRESS){
		// when this is false, it means that there is trash in the memory!
		for(unsigned char i = 0; i < NUMALARMS; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
 7bc:	cb 31       	cpi	r28, 0x1B	; 27
 7be:	d1 05       	cpc	r29, r1
 7c0:	19 f7       	brne	.-58     	; 0x788 <loadAlarmsFromEEPROM+0x16>
			savedAlarms[i].Minute = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+1));
			savedAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+2));
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	08 95       	ret

000007cc <saveAlarmsToEEPROM>:
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
 7cc:	0f 93       	push	r16
 7ce:	1f 93       	push	r17
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
	if (eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) != EEPROM_ALARM_TOPADDRESS){
 7d4:	84 e1       	ldi	r24, 0x14	; 20
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	b8 d2       	rcall	.+1392   	; 0xd4a <__eerd_byte_m1284>
 7da:	84 31       	cpi	r24, 0x14	; 20
 7dc:	19 f1       	breq	.+70     	; 0x824 <saveAlarmsToEEPROM+0x58>
		// store EEPROM_ALARM_TOPADDRESS at memory address EEPROM_ALARM_TOPADDRESS as a flag that the memory has been saved to already. 
		// This will persist through resets 
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
 7de:	64 e1       	ldi	r22, 0x14	; 20
 7e0:	84 e1       	ldi	r24, 0x14	; 20
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	ba d2       	rcall	.+1396   	; 0xd5a <__eewr_byte_m1284>
 7e6:	1e c0       	rjmp	.+60     	; 0x824 <saveAlarmsToEEPROM+0x58>
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
 7e8:	8e 01       	movw	r16, r28
 7ea:	0c 53       	subi	r16, 0x3C	; 60
 7ec:	1e 4f       	sbci	r17, 0xFE	; 254
 7ee:	f8 01       	movw	r30, r16
 7f0:	33 97       	sbiw	r30, 0x03	; 3
		// store EEPROM_ALARM_TOPADDRESS at memory address EEPROM_ALARM_TOPADDRESS as a flag that the memory has been saved to already. 
		// This will persist through resets 
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
	}
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i), savedAlarms[i].Hour);
 7f2:	60 81       	ld	r22, Z
 7f4:	ce 01       	movw	r24, r28
 7f6:	03 97       	sbiw	r24, 0x03	; 3
 7f8:	b0 d2       	rcall	.+1376   	; 0xd5a <__eewr_byte_m1284>
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
 7fa:	f8 01       	movw	r30, r16
 7fc:	32 97       	sbiw	r30, 0x02	; 2
		// This will persist through resets 
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
	}
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i), savedAlarms[i].Hour);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+1), savedAlarms[i].Minute);
 7fe:	60 81       	ld	r22, Z
 800:	ce 01       	movw	r24, r28
 802:	02 97       	sbiw	r24, 0x02	; 2
 804:	aa d2       	rcall	.+1364   	; 0xd5a <__eewr_byte_m1284>
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
 806:	f8 01       	movw	r30, r16
 808:	31 97       	sbiw	r30, 0x01	; 1
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
	}
	for(unsigned char i = 0; i < NUMALARMS; ++i){
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i), savedAlarms[i].Hour);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+1), savedAlarms[i].Minute);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+2), savedAlarms[i].IsAM);
 80a:	60 81       	ld	r22, Z
 80c:	ce 01       	movw	r24, r28
 80e:	01 97       	sbiw	r24, 0x01	; 1
 810:	a4 d2       	rcall	.+1352   	; 0xd5a <__eewr_byte_m1284>
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+3), savedAlarms[i].IsActive);
 812:	f8 01       	movw	r30, r16
 814:	60 81       	ld	r22, Z
 816:	ce 01       	movw	r24, r28
 818:	a0 d2       	rcall	.+1344   	; 0xd5a <__eewr_byte_m1284>
 81a:	24 96       	adiw	r28, 0x04	; 4
	if (eeprom_read_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS)) != EEPROM_ALARM_TOPADDRESS){
		// store EEPROM_ALARM_TOPADDRESS at memory address EEPROM_ALARM_TOPADDRESS as a flag that the memory has been saved to already. 
		// This will persist through resets 
		eeprom_write_byte((uint8_t*)(EEPROM_ALARM_TOPADDRESS), EEPROM_ALARM_TOPADDRESS);
	}
	for(unsigned char i = 0; i < NUMALARMS; ++i){
 81c:	cb 31       	cpi	r28, 0x1B	; 27
 81e:	d1 05       	cpc	r29, r1
 820:	19 f7       	brne	.-58     	; 0x7e8 <saveAlarmsToEEPROM+0x1c>
 822:	03 c0       	rjmp	.+6      	; 0x82a <saveAlarmsToEEPROM+0x5e>
			savedAlarms[i].IsActive = eeprom_read_byte((uint8_t*) (NUMALARMELEMENTS*i+3));
		}
	}
}
// save savedAlarms contents to EEPROM. This will be called everytime an Alarm is updated.
void saveAlarmsToEEPROM(){
 824:	c3 e0       	ldi	r28, 0x03	; 3
 826:	d0 e0       	ldi	r29, 0x00	; 0
 828:	df cf       	rjmp	.-66     	; 0x7e8 <saveAlarmsToEEPROM+0x1c>
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i), savedAlarms[i].Hour);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+1), savedAlarms[i].Minute);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+2), savedAlarms[i].IsAM);
		eeprom_write_byte((uint8_t*) (NUMALARMELEMENTS*i+3), savedAlarms[i].IsActive);
	}
}
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	08 95       	ret

00000834 <SystemDriverSMTick>:
#define MAXMENUTITLETIME 50 //100period ms * 50 = 5000 s seconds
#define FIRSTMENUITEM SystemDriver_timedisplaytitle
signed char SystemDriverSMTick (signed char state){
	static unsigned char stateTimer = 0;
	// Transitions
	switch(state){
 834:	48 2f       	mov	r20, r24
 836:	55 27       	eor	r21, r21
 838:	47 fd       	sbrc	r20, 7
 83a:	50 95       	com	r21
 83c:	65 2f       	mov	r22, r21
 83e:	75 2f       	mov	r23, r21
 840:	fa 01       	movw	r30, r20
 842:	31 97       	sbiw	r30, 0x01	; 1
 844:	e9 31       	cpi	r30, 0x19	; 25
 846:	f1 05       	cpc	r31, r1
 848:	08 f0       	brcs	.+2      	; 0x84c <SystemDriverSMTick+0x18>
 84a:	31 c1       	rjmp	.+610    	; 0xaae <SystemDriverSMTick+0x27a>
 84c:	e0 5a       	subi	r30, 0xA0	; 160
 84e:	ff 4f       	sbci	r31, 0xFF	; 255
 850:	6a c2       	rjmp	.+1236   	; 0xd26 <__tablejump2__>
		//=================================================================
		case SystemDriver_timedisplaytitle:
			// count the Timer for 4 seconds until forced transition or else "Select button"
			stateTimer++;
 852:	90 91 51 01 	lds	r25, 0x0151
 856:	9f 5f       	subi	r25, 0xFF	; 255
 858:	90 93 51 01 	sts	0x0151, r25
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
 85c:	92 33       	cpi	r25, 0x32	; 50
 85e:	28 f4       	brcc	.+10     	; 0x86a <SystemDriverSMTick+0x36>
 860:	90 91 be 01 	lds	r25, 0x01BE
 864:	93 34       	cpi	r25, 0x43	; 67
 866:	11 f4       	brne	.+4      	; 0x86c <SystemDriverSMTick+0x38>
 868:	07 c0       	rjmp	.+14     	; 0x878 <SystemDriverSMTick+0x44>
				state = SystemDriver_timedisplaytitle_fall;
 86a:	83 e0       	ldi	r24, 0x03	; 3
			}
			if(menuNavigationInput == Keypad_next){
 86c:	90 91 be 01 	lds	r25, 0x01BE
 870:	91 34       	cpi	r25, 0x41	; 65
 872:	09 f4       	brne	.+2      	; 0x876 <SystemDriverSMTick+0x42>
 874:	1e c1       	rjmp	.+572    	; 0xab2 <SystemDriverSMTick+0x27e>
 876:	4e c1       	rjmp	.+668    	; 0xb14 <SystemDriverSMTick+0x2e0>
		//=================================================================
		case SystemDriver_timedisplaytitle:
			// count the Timer for 4 seconds until forced transition or else "Select button"
			stateTimer++;
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
				state = SystemDriver_timedisplaytitle_fall;
 878:	83 e0       	ldi	r24, 0x03	; 3
 87a:	4c c1       	rjmp	.+664    	; 0xb14 <SystemDriverSMTick+0x2e0>
				state = SystemDriver_timedisplaytitle_nextmenuitem;
			}
			break;
		case SystemDriver_timedisplaytitle_fall:
			// consume input or else transition due to state timer
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput != Keypad_select){
 87c:	90 91 51 01 	lds	r25, 0x0151
 880:	92 33       	cpi	r25, 0x32	; 50
 882:	30 f4       	brcc	.+12     	; 0x890 <SystemDriverSMTick+0x5c>
 884:	90 91 be 01 	lds	r25, 0x01BE
 888:	93 34       	cpi	r25, 0x43	; 67
 88a:	19 f0       	breq	.+6      	; 0x892 <SystemDriverSMTick+0x5e>
				state = SystemDriver_timedisplay;
 88c:	82 e0       	ldi	r24, 0x02	; 2
 88e:	01 c0       	rjmp	.+2      	; 0x892 <SystemDriverSMTick+0x5e>
 890:	82 e0       	ldi	r24, 0x02	; 2
			} else if (menuNavigationInput ==  Keypad_next){
				state = SystemDriver_alarmaddtitle;
			}
			stateTimer = 0;
 892:	10 92 51 01 	sts	0x0151, r1
			break;
 896:	3e c1       	rjmp	.+636    	; 0xb14 <SystemDriverSMTick+0x2e0>
		case SystemDriver_timedisplay:
			if(menuNavigationInput == Keypad_menu){
 898:	90 91 be 01 	lds	r25, 0x01BE
 89c:	93 32       	cpi	r25, 0x23	; 35
 89e:	09 f0       	breq	.+2      	; 0x8a2 <SystemDriverSMTick+0x6e>
 8a0:	39 c1       	rjmp	.+626    	; 0xb14 <SystemDriverSMTick+0x2e0>
 8a2:	09 c1       	rjmp	.+530    	; 0xab6 <SystemDriverSMTick+0x282>
				state = SystemDriver_timedisplay_fall;
			}
			break;
		case SystemDriver_timedisplay_fall:
			if(menuNavigationInput != Keypad_menu){
 8a4:	90 91 be 01 	lds	r25, 0x01BE
 8a8:	93 32       	cpi	r25, 0x23	; 35
 8aa:	09 f0       	breq	.+2      	; 0x8ae <SystemDriverSMTick+0x7a>
 8ac:	06 c1       	rjmp	.+524    	; 0xaba <SystemDriverSMTick+0x286>
 8ae:	32 c1       	rjmp	.+612    	; 0xb14 <SystemDriverSMTick+0x2e0>
				state = SystemDriver_timedisplaytitle;
			}
			break;
		case SystemDriver_timedisplaytitle_nextmenuitem:
			if(menuNavigationInput !=  Keypad_next){
 8b0:	90 91 be 01 	lds	r25, 0x01BE
 8b4:	91 34       	cpi	r25, 0x41	; 65
 8b6:	09 f0       	breq	.+2      	; 0x8ba <SystemDriverSMTick+0x86>
				state = SystemDriver_alarmaddtitle;
 8b8:	86 e0       	ldi	r24, 0x06	; 6
			}
			stateTimer = 0;
 8ba:	10 92 51 01 	sts	0x0151, r1
			break;
 8be:	2a c1       	rjmp	.+596    	; 0xb14 <SystemDriverSMTick+0x2e0>
		//=================================================================
		case SystemDriver_alarmaddtitle:
			stateTimer++;
 8c0:	90 91 51 01 	lds	r25, 0x0151
 8c4:	9f 5f       	subi	r25, 0xFF	; 255
 8c6:	90 93 51 01 	sts	0x0151, r25
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
 8ca:	92 33       	cpi	r25, 0x32	; 50
 8cc:	08 f0       	brcs	.+2      	; 0x8d0 <SystemDriverSMTick+0x9c>
 8ce:	f7 c0       	rjmp	.+494    	; 0xabe <SystemDriverSMTick+0x28a>
 8d0:	90 91 be 01 	lds	r25, 0x01BE
 8d4:	93 34       	cpi	r25, 0x43	; 67
 8d6:	09 f4       	brne	.+2      	; 0x8da <SystemDriverSMTick+0xa6>
 8d8:	f4 c0       	rjmp	.+488    	; 0xac2 <SystemDriverSMTick+0x28e>
				state = SystemDriver_alarmaddtitle_fall;
			}else if (menuNavigationInput == Keypad_next){
 8da:	91 34       	cpi	r25, 0x41	; 65
 8dc:	09 f0       	breq	.+2      	; 0x8e0 <SystemDriverSMTick+0xac>
 8de:	1a c1       	rjmp	.+564    	; 0xb14 <SystemDriverSMTick+0x2e0>
 8e0:	f2 c0       	rjmp	.+484    	; 0xac6 <SystemDriverSMTick+0x292>
				state = SystemDriver_alarmaddtitle_nextmenuitem;
			}
			break;
		case SystemDriver_alarmaddtitle_fall:
			// consume input or else transition due to state timer
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput != Keypad_select){
 8e2:	90 91 51 01 	lds	r25, 0x0151
 8e6:	92 33       	cpi	r25, 0x32	; 50
 8e8:	28 f4       	brcc	.+10     	; 0x8f4 <SystemDriverSMTick+0xc0>
 8ea:	90 91 be 01 	lds	r25, 0x01BE
 8ee:	93 34       	cpi	r25, 0x43	; 67
 8f0:	19 f4       	brne	.+6      	; 0x8f8 <SystemDriverSMTick+0xc4>
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <SystemDriverSMTick+0xc6>
				state = SystemDriver_alarmaddscroll;
 8f4:	87 e0       	ldi	r24, 0x07	; 7
 8f6:	01 c0       	rjmp	.+2      	; 0x8fa <SystemDriverSMTick+0xc6>
 8f8:	87 e0       	ldi	r24, 0x07	; 7
			} 
			stateTimer = 0;
 8fa:	10 92 51 01 	sts	0x0151, r1
			break;
 8fe:	0a c1       	rjmp	.+532    	; 0xb14 <SystemDriverSMTick+0x2e0>
		case SystemDriver_alarmaddscroll:
			if(menuNavigationInput == Keypad_menu){
 900:	90 91 be 01 	lds	r25, 0x01BE
 904:	93 32       	cpi	r25, 0x23	; 35
 906:	09 f0       	breq	.+2      	; 0x90a <SystemDriverSMTick+0xd6>
 908:	05 c1       	rjmp	.+522    	; 0xb14 <SystemDriverSMTick+0x2e0>
 90a:	df c0       	rjmp	.+446    	; 0xaca <SystemDriverSMTick+0x296>
				state = SystemDriver_alarmaddscroll_fall;
			}
			break;
		case SystemDriver_alarmaddscroll_fall:
			if(menuNavigationInput != Keypad_menu){
 90c:	90 91 be 01 	lds	r25, 0x01BE
 910:	93 32       	cpi	r25, 0x23	; 35
 912:	09 f0       	breq	.+2      	; 0x916 <SystemDriverSMTick+0xe2>
 914:	dc c0       	rjmp	.+440    	; 0xace <SystemDriverSMTick+0x29a>
 916:	fe c0       	rjmp	.+508    	; 0xb14 <SystemDriverSMTick+0x2e0>
				state = SystemDriver_alarmaddtitle;
			}
			break;
		case SystemDriver_alarmaddtitle_nextmenuitem:
			if(menuNavigationInput !=  Keypad_next){
 918:	90 91 be 01 	lds	r25, 0x01BE
 91c:	91 34       	cpi	r25, 0x41	; 65
 91e:	09 f0       	breq	.+2      	; 0x922 <SystemDriverSMTick+0xee>
				state = SystemDriver_alarmviewtitle;
 920:	8b e0       	ldi	r24, 0x0B	; 11
			}
			stateTimer = 0;
 922:	10 92 51 01 	sts	0x0151, r1
			break;
 926:	f6 c0       	rjmp	.+492    	; 0xb14 <SystemDriverSMTick+0x2e0>
		//=================================================================
		case SystemDriver_alarmviewtitle :
			if(menuNavigationInput == Keypad_select){ // c is select
 928:	90 91 be 01 	lds	r25, 0x01BE
 92c:	93 34       	cpi	r25, 0x43	; 67
 92e:	09 f4       	brne	.+2      	; 0x932 <SystemDriverSMTick+0xfe>
 930:	d0 c0       	rjmp	.+416    	; 0xad2 <SystemDriverSMTick+0x29e>
				state = SystemDriver_alarmviewtitle_fall;
			}else if (menuNavigationInput == Keypad_next){
 932:	91 34       	cpi	r25, 0x41	; 65
 934:	09 f0       	breq	.+2      	; 0x938 <SystemDriverSMTick+0x104>
 936:	ee c0       	rjmp	.+476    	; 0xb14 <SystemDriverSMTick+0x2e0>
 938:	ce c0       	rjmp	.+412    	; 0xad6 <SystemDriverSMTick+0x2a2>
				state = SystemDriver_alarmview_nextmenuitem;
			}
			break;
		case SystemDriver_alarmviewtitle_fall:
			if(menuNavigationInput != Keypad_select){
 93a:	90 91 be 01 	lds	r25, 0x01BE
 93e:	93 34       	cpi	r25, 0x43	; 67
 940:	09 f0       	breq	.+2      	; 0x944 <SystemDriverSMTick+0x110>
 942:	cb c0       	rjmp	.+406    	; 0xada <SystemDriverSMTick+0x2a6>
 944:	e7 c0       	rjmp	.+462    	; 0xb14 <SystemDriverSMTick+0x2e0>
				state = SystemDriver_alarmview;
			}
			break;
		case SystemDriver_alarmview:
			if(menuNavigationInput == Keypad_menu){
 946:	90 91 be 01 	lds	r25, 0x01BE
 94a:	93 32       	cpi	r25, 0x23	; 35
 94c:	09 f4       	brne	.+2      	; 0x950 <SystemDriverSMTick+0x11c>
 94e:	c7 c0       	rjmp	.+398    	; 0xade <SystemDriverSMTick+0x2aa>
				state = SystemDriver_alarmview_fall;
			} else if(menuNavigationInput == Keypad_select){
 950:	93 34       	cpi	r25, 0x43	; 67
 952:	09 f4       	brne	.+2      	; 0x956 <SystemDriverSMTick+0x122>
 954:	c6 c0       	rjmp	.+396    	; 0xae2 <SystemDriverSMTick+0x2ae>
				state = SystemDriver_alarmview_select;
			} else if(menuNavigationInput == Keypad_back){
 956:	92 34       	cpi	r25, 0x42	; 66
 958:	09 f4       	brne	.+2      	; 0x95c <SystemDriverSMTick+0x128>
 95a:	c5 c0       	rjmp	.+394    	; 0xae6 <SystemDriverSMTick+0x2b2>
				state = SystemDriver_alarmview_back;
			} else if(menuNavigationInput == Keypad_next){
 95c:	91 34       	cpi	r25, 0x41	; 65
 95e:	09 f4       	brne	.+2      	; 0x962 <SystemDriverSMTick+0x12e>
 960:	c4 c0       	rjmp	.+392    	; 0xaea <SystemDriverSMTick+0x2b6>
				state = SystemDriver_alarmview_next;
			} else if(menuNavigationInput == Keypad_HH){
 962:	9a 32       	cpi	r25, 0x2A	; 42
 964:	09 f4       	brne	.+2      	; 0x968 <SystemDriverSMTick+0x134>
 966:	c3 c0       	rjmp	.+390    	; 0xaee <SystemDriverSMTick+0x2ba>
				state = SystemDriver_alarmview_HH;
			} else if(menuNavigationInput == Keypad_MM){
 968:	90 33       	cpi	r25, 0x30	; 48
 96a:	09 f0       	breq	.+2      	; 0x96e <SystemDriverSMTick+0x13a>
 96c:	d3 c0       	rjmp	.+422    	; 0xb14 <SystemDriverSMTick+0x2e0>
 96e:	c1 c0       	rjmp	.+386    	; 0xaf2 <SystemDriverSMTick+0x2be>
				state = SystemDriver_alarmview_MM;
			}
			break;
		// Input HH
		case SystemDriver_alarmview_HH:
			if(savedAlarms[savedAlarmIterator].Hour < 12){
 970:	80 91 dc 01 	lds	r24, 0x01DC
 974:	90 91 dd 01 	lds	r25, 0x01DD
 978:	fc 01       	movw	r30, r24
 97a:	ee 0f       	add	r30, r30
 97c:	ff 1f       	adc	r31, r31
 97e:	ee 0f       	add	r30, r30
 980:	ff 1f       	adc	r31, r31
 982:	ec 53       	subi	r30, 0x3C	; 60
 984:	fe 4f       	sbci	r31, 0xFE	; 254
 986:	20 81       	ld	r18, Z
 988:	2c 30       	cpi	r18, 0x0C	; 12
 98a:	58 f4       	brcc	.+22     	; 0x9a2 <SystemDriverSMTick+0x16e>
				savedAlarms[savedAlarmIterator].Hour++;
 98c:	fc 01       	movw	r30, r24
 98e:	ee 0f       	add	r30, r30
 990:	ff 1f       	adc	r31, r31
 992:	ee 0f       	add	r30, r30
 994:	ff 1f       	adc	r31, r31
 996:	ec 53       	subi	r30, 0x3C	; 60
 998:	fe 4f       	sbci	r31, 0xFE	; 254
 99a:	2f 5f       	subi	r18, 0xFF	; 255
 99c:	20 83       	st	Z, r18
			} else {
				savedAlarms[savedAlarmIterator].Hour = 0;
				savedAlarms[savedAlarmIterator].IsAM = ~savedAlarms[savedAlarmIterator].IsAM;
			}
			state = SystemDriver_alarmview_HH_fall;
 99e:	82 e1       	ldi	r24, 0x12	; 18
 9a0:	b9 c0       	rjmp	.+370    	; 0xb14 <SystemDriverSMTick+0x2e0>
		// Input HH
		case SystemDriver_alarmview_HH:
			if(savedAlarms[savedAlarmIterator].Hour < 12){
				savedAlarms[savedAlarmIterator].Hour++;
			} else {
				savedAlarms[savedAlarmIterator].Hour = 0;
 9a2:	fc 01       	movw	r30, r24
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	ee 0f       	add	r30, r30
 9aa:	ff 1f       	adc	r31, r31
 9ac:	ec 53       	subi	r30, 0x3C	; 60
 9ae:	fe 4f       	sbci	r31, 0xFE	; 254
 9b0:	10 82       	st	Z, r1
				savedAlarms[savedAlarmIterator].IsAM = ~savedAlarms[savedAlarmIterator].IsAM;
 9b2:	82 81       	ldd	r24, Z+2	; 0x02
 9b4:	80 95       	com	r24
 9b6:	82 83       	std	Z+2, r24	; 0x02
			}
			state = SystemDriver_alarmview_HH_fall;
 9b8:	82 e1       	ldi	r24, 0x12	; 18
 9ba:	ac c0       	rjmp	.+344    	; 0xb14 <SystemDriverSMTick+0x2e0>
			break;
		case SystemDriver_alarmview_HH_fall:
			if(menuNavigationInput != Keypad_HH){
 9bc:	90 91 be 01 	lds	r25, 0x01BE
 9c0:	9a 32       	cpi	r25, 0x2A	; 42
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <SystemDriverSMTick+0x192>
 9c4:	98 c0       	rjmp	.+304    	; 0xaf6 <SystemDriverSMTick+0x2c2>
 9c6:	a6 c0       	rjmp	.+332    	; 0xb14 <SystemDriverSMTick+0x2e0>
				state = SystemDriver_alarmview;
			}
			break;
		// Input MM
		case SystemDriver_alarmview_MM:
			if(savedAlarms[savedAlarmIterator].Minute < 59){
 9c8:	80 91 dc 01 	lds	r24, 0x01DC
 9cc:	90 91 dd 01 	lds	r25, 0x01DD
 9d0:	fc 01       	movw	r30, r24
 9d2:	ee 0f       	add	r30, r30
 9d4:	ff 1f       	adc	r31, r31
 9d6:	ee 0f       	add	r30, r30
 9d8:	ff 1f       	adc	r31, r31
 9da:	ec 53       	subi	r30, 0x3C	; 60
 9dc:	fe 4f       	sbci	r31, 0xFE	; 254
 9de:	21 81       	ldd	r18, Z+1	; 0x01
 9e0:	2b 33       	cpi	r18, 0x3B	; 59
 9e2:	58 f4       	brcc	.+22     	; 0x9fa <SystemDriverSMTick+0x1c6>
				savedAlarms[savedAlarmIterator].Minute++;
 9e4:	fc 01       	movw	r30, r24
 9e6:	ee 0f       	add	r30, r30
 9e8:	ff 1f       	adc	r31, r31
 9ea:	ee 0f       	add	r30, r30
 9ec:	ff 1f       	adc	r31, r31
 9ee:	ec 53       	subi	r30, 0x3C	; 60
 9f0:	fe 4f       	sbci	r31, 0xFE	; 254
 9f2:	2f 5f       	subi	r18, 0xFF	; 255
 9f4:	21 83       	std	Z+1, r18	; 0x01
			} else {
				savedAlarms[savedAlarmIterator].Minute = 0;
			}
			state = SystemDriver_alarmview_MM_fall;
 9f6:	83 e1       	ldi	r24, 0x13	; 19
 9f8:	8d c0       	rjmp	.+282    	; 0xb14 <SystemDriverSMTick+0x2e0>
		// Input MM
		case SystemDriver_alarmview_MM:
			if(savedAlarms[savedAlarmIterator].Minute < 59){
				savedAlarms[savedAlarmIterator].Minute++;
			} else {
				savedAlarms[savedAlarmIterator].Minute = 0;
 9fa:	fc 01       	movw	r30, r24
 9fc:	ee 0f       	add	r30, r30
 9fe:	ff 1f       	adc	r31, r31
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31
 a04:	ec 53       	subi	r30, 0x3C	; 60
 a06:	fe 4f       	sbci	r31, 0xFE	; 254
 a08:	11 82       	std	Z+1, r1	; 0x01
			}
			state = SystemDriver_alarmview_MM_fall;
 a0a:	83 e1       	ldi	r24, 0x13	; 19
 a0c:	83 c0       	rjmp	.+262    	; 0xb14 <SystemDriverSMTick+0x2e0>
			break;
		case SystemDriver_alarmview_MM_fall:
			if(menuNavigationInput != Keypad_MM){
 a0e:	90 91 be 01 	lds	r25, 0x01BE
 a12:	90 33       	cpi	r25, 0x30	; 48
 a14:	09 f0       	breq	.+2      	; 0xa18 <SystemDriverSMTick+0x1e4>
 a16:	71 c0       	rjmp	.+226    	; 0xafa <SystemDriverSMTick+0x2c6>
 a18:	7d c0       	rjmp	.+250    	; 0xb14 <SystemDriverSMTick+0x2e0>
				state = SystemDriver_alarmview;
			}
			break;
		case SystemDriver_alarmview_fall:
			if(menuNavigationInput != Keypad_menu){
 a1a:	90 91 be 01 	lds	r25, 0x01BE
 a1e:	93 32       	cpi	r25, 0x23	; 35
 a20:	09 f0       	breq	.+2      	; 0xa24 <SystemDriverSMTick+0x1f0>
 a22:	6d c0       	rjmp	.+218    	; 0xafe <SystemDriverSMTick+0x2ca>
 a24:	77 c0       	rjmp	.+238    	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			break;
		// Input NEXT
		case SystemDriver_alarmview_next:
			// increment alarm index
			if(savedAlarmIterator < NUMALARMS-1){
 a26:	80 91 dc 01 	lds	r24, 0x01DC
 a2a:	90 91 dd 01 	lds	r25, 0x01DD
 a2e:	85 30       	cpi	r24, 0x05	; 5
 a30:	91 05       	cpc	r25, r1
 a32:	08 f0       	brcs	.+2      	; 0xa36 <SystemDriverSMTick+0x202>
 a34:	66 c0       	rjmp	.+204    	; 0xb02 <SystemDriverSMTick+0x2ce>
				savedAlarmIterator++;
 a36:	01 96       	adiw	r24, 0x01	; 1
 a38:	90 93 dd 01 	sts	0x01DD, r25
 a3c:	80 93 dc 01 	sts	0x01DC, r24
			}			
			state = SystemDriver_alarmview_next_fall;
 a40:	87 e1       	ldi	r24, 0x17	; 23
 a42:	68 c0       	rjmp	.+208    	; 0xb14 <SystemDriverSMTick+0x2e0>
			break;
		case SystemDriver_alarmview_next_fall:
			if(menuNavigationInput != Keypad_next){
 a44:	90 91 be 01 	lds	r25, 0x01BE
 a48:	91 34       	cpi	r25, 0x41	; 65
 a4a:	09 f0       	breq	.+2      	; 0xa4e <SystemDriverSMTick+0x21a>
 a4c:	5c c0       	rjmp	.+184    	; 0xb06 <SystemDriverSMTick+0x2d2>
 a4e:	62 c0       	rjmp	.+196    	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			break;
		// Input SELECT
		case SystemDriver_alarmview_select:
			// reverse active for alarm at index
			savedAlarms[savedAlarmIterator].IsActive = ~savedAlarms[savedAlarmIterator].IsActive;
 a50:	e0 91 dc 01 	lds	r30, 0x01DC
 a54:	f0 91 dd 01 	lds	r31, 0x01DD
 a58:	ee 0f       	add	r30, r30
 a5a:	ff 1f       	adc	r31, r31
 a5c:	ee 0f       	add	r30, r30
 a5e:	ff 1f       	adc	r31, r31
 a60:	ec 53       	subi	r30, 0x3C	; 60
 a62:	fe 4f       	sbci	r31, 0xFE	; 254
 a64:	83 81       	ldd	r24, Z+3	; 0x03
 a66:	80 95       	com	r24
 a68:	83 83       	std	Z+3, r24	; 0x03
			state = SystemDriver_alarmview_select_fall;
 a6a:	88 e1       	ldi	r24, 0x18	; 24
			break;
 a6c:	53 c0       	rjmp	.+166    	; 0xb14 <SystemDriverSMTick+0x2e0>
		case SystemDriver_alarmview_select_fall:
			if(menuNavigationInput != Keypad_select){
 a6e:	90 91 be 01 	lds	r25, 0x01BE
 a72:	93 34       	cpi	r25, 0x43	; 67
 a74:	09 f0       	breq	.+2      	; 0xa78 <SystemDriverSMTick+0x244>
 a76:	49 c0       	rjmp	.+146    	; 0xb0a <SystemDriverSMTick+0x2d6>
 a78:	4d c0       	rjmp	.+154    	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			break;
		// Input BACK
		case SystemDriver_alarmview_back:
			// decrement alarm index
			if(savedAlarmIterator > 0){
 a7a:	80 91 dc 01 	lds	r24, 0x01DC
 a7e:	90 91 dd 01 	lds	r25, 0x01DD
 a82:	00 97       	sbiw	r24, 0x00	; 0
 a84:	09 f4       	brne	.+2      	; 0xa88 <SystemDriverSMTick+0x254>
 a86:	43 c0       	rjmp	.+134    	; 0xb0e <SystemDriverSMTick+0x2da>
				savedAlarmIterator--;
 a88:	01 97       	sbiw	r24, 0x01	; 1
 a8a:	90 93 dd 01 	sts	0x01DD, r25
 a8e:	80 93 dc 01 	sts	0x01DC, r24
			}
			state = SystemDriver_alarmview_back_fall;
 a92:	89 e1       	ldi	r24, 0x19	; 25
 a94:	3f c0       	rjmp	.+126    	; 0xb14 <SystemDriverSMTick+0x2e0>
			break;
		case SystemDriver_alarmview_back_fall:
			if(menuNavigationInput != Keypad_back){
 a96:	90 91 be 01 	lds	r25, 0x01BE
 a9a:	92 34       	cpi	r25, 0x42	; 66
 a9c:	d1 f5       	brne	.+116    	; 0xb12 <SystemDriverSMTick+0x2de>
 a9e:	3a c0       	rjmp	.+116    	; 0xb14 <SystemDriverSMTick+0x2e0>
				state = SystemDriver_alarmview;
			}
			break;
		case SystemDriver_alarmview_nextmenuitem:
			if(menuNavigationInput != Keypad_next){
 aa0:	90 91 be 01 	lds	r25, 0x01BE
 aa4:	91 34       	cpi	r25, 0x41	; 65
 aa6:	b1 f1       	breq	.+108    	; 0xb14 <SystemDriverSMTick+0x2e0>
				saveAlarmsToEEPROM();
 aa8:	91 de       	rcall	.-734    	; 0x7cc <saveAlarmsToEEPROM>
				state = FIRSTMENUITEM;
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	33 c0       	rjmp	.+102    	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			break;
		//=================================================================
		default:
			state = FIRSTMENUITEM;
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	31 c0       	rjmp	.+98     	; 0xb14 <SystemDriverSMTick+0x2e0>
			stateTimer++;
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
				state = SystemDriver_timedisplaytitle_fall;
			}
			if(menuNavigationInput == Keypad_next){
				state = SystemDriver_timedisplaytitle_nextmenuitem;
 ab2:	85 e0       	ldi	r24, 0x05	; 5
 ab4:	2f c0       	rjmp	.+94     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			stateTimer = 0;
			break;
		case SystemDriver_timedisplay:
			if(menuNavigationInput == Keypad_menu){
				state = SystemDriver_timedisplay_fall;
 ab6:	84 e0       	ldi	r24, 0x04	; 4
 ab8:	2d c0       	rjmp	.+90     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			break;
		case SystemDriver_timedisplay_fall:
			if(menuNavigationInput != Keypad_menu){
				state = SystemDriver_timedisplaytitle;
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	2b c0       	rjmp	.+86     	; 0xb14 <SystemDriverSMTick+0x2e0>
			break;
		//=================================================================
		case SystemDriver_alarmaddtitle:
			stateTimer++;
			if(stateTimer >= MAXMENUTITLETIME || menuNavigationInput == Keypad_select){ // c is select
				state = SystemDriver_alarmaddtitle_fall;
 abe:	88 e0       	ldi	r24, 0x08	; 8
 ac0:	29 c0       	rjmp	.+82     	; 0xb14 <SystemDriverSMTick+0x2e0>
 ac2:	88 e0       	ldi	r24, 0x08	; 8
 ac4:	27 c0       	rjmp	.+78     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}else if (menuNavigationInput == Keypad_next){
				state = SystemDriver_alarmaddtitle_nextmenuitem;
 ac6:	8a e0       	ldi	r24, 0x0A	; 10
 ac8:	25 c0       	rjmp	.+74     	; 0xb14 <SystemDriverSMTick+0x2e0>
			} 
			stateTimer = 0;
			break;
		case SystemDriver_alarmaddscroll:
			if(menuNavigationInput == Keypad_menu){
				state = SystemDriver_alarmaddscroll_fall;
 aca:	89 e0       	ldi	r24, 0x09	; 9
 acc:	23 c0       	rjmp	.+70     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			break;
		case SystemDriver_alarmaddscroll_fall:
			if(menuNavigationInput != Keypad_menu){
				state = SystemDriver_alarmaddtitle;
 ace:	86 e0       	ldi	r24, 0x06	; 6
 ad0:	21 c0       	rjmp	.+66     	; 0xb14 <SystemDriverSMTick+0x2e0>
			stateTimer = 0;
			break;
		//=================================================================
		case SystemDriver_alarmviewtitle :
			if(menuNavigationInput == Keypad_select){ // c is select
				state = SystemDriver_alarmviewtitle_fall;
 ad2:	8d e0       	ldi	r24, 0x0D	; 13
 ad4:	1f c0       	rjmp	.+62     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}else if (menuNavigationInput == Keypad_next){
				state = SystemDriver_alarmview_nextmenuitem;
 ad6:	8f e0       	ldi	r24, 0x0F	; 15
 ad8:	1d c0       	rjmp	.+58     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			break;
		case SystemDriver_alarmviewtitle_fall:
			if(menuNavigationInput != Keypad_select){
				state = SystemDriver_alarmview;
 ada:	8c e0       	ldi	r24, 0x0C	; 12
 adc:	1b c0       	rjmp	.+54     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			break;
		case SystemDriver_alarmview:
			if(menuNavigationInput == Keypad_menu){
				state = SystemDriver_alarmview_fall;
 ade:	8e e0       	ldi	r24, 0x0E	; 14
 ae0:	19 c0       	rjmp	.+50     	; 0xb14 <SystemDriverSMTick+0x2e0>
			} else if(menuNavigationInput == Keypad_select){
				state = SystemDriver_alarmview_select;
 ae2:	85 e1       	ldi	r24, 0x15	; 21
 ae4:	17 c0       	rjmp	.+46     	; 0xb14 <SystemDriverSMTick+0x2e0>
			} else if(menuNavigationInput == Keypad_back){
				state = SystemDriver_alarmview_back;
 ae6:	86 e1       	ldi	r24, 0x16	; 22
 ae8:	15 c0       	rjmp	.+42     	; 0xb14 <SystemDriverSMTick+0x2e0>
			} else if(menuNavigationInput == Keypad_next){
				state = SystemDriver_alarmview_next;
 aea:	84 e1       	ldi	r24, 0x14	; 20
 aec:	13 c0       	rjmp	.+38     	; 0xb14 <SystemDriverSMTick+0x2e0>
			} else if(menuNavigationInput == Keypad_HH){
				state = SystemDriver_alarmview_HH;
 aee:	80 e1       	ldi	r24, 0x10	; 16
 af0:	11 c0       	rjmp	.+34     	; 0xb14 <SystemDriverSMTick+0x2e0>
			} else if(menuNavigationInput == Keypad_MM){
				state = SystemDriver_alarmview_MM;
 af2:	81 e1       	ldi	r24, 0x11	; 17
 af4:	0f c0       	rjmp	.+30     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			state = SystemDriver_alarmview_HH_fall;
			break;
		case SystemDriver_alarmview_HH_fall:
			if(menuNavigationInput != Keypad_HH){
				state = SystemDriver_alarmview;
 af6:	8c e0       	ldi	r24, 0x0C	; 12
 af8:	0d c0       	rjmp	.+26     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			state = SystemDriver_alarmview_MM_fall;
			break;
		case SystemDriver_alarmview_MM_fall:
			if(menuNavigationInput != Keypad_MM){
				state = SystemDriver_alarmview;
 afa:	8c e0       	ldi	r24, 0x0C	; 12
 afc:	0b c0       	rjmp	.+22     	; 0xb14 <SystemDriverSMTick+0x2e0>
			}
			break;
		case SystemDriver_alarmview_fall:
			if(menuNavigationInput != Keypad_menu){
				state = SystemDriver_alarmviewtitle;
 afe:	8b e0       	ldi	r24, 0x0B	; 11
 b00:	09 c0       	rjmp	.+18     	; 0xb14 <SystemDriverSMTick+0x2e0>
		case SystemDriver_alarmview_next:
			// increment alarm index
			if(savedAlarmIterator < NUMALARMS-1){
				savedAlarmIterator++;
			}			
			state = SystemDriver_alarmview_next_fall;
 b02:	87 e1       	ldi	r24, 0x17	; 23
 b04:	07 c0       	rjmp	.+14     	; 0xb14 <SystemDriverSMTick+0x2e0>
			break;
		case SystemDriver_alarmview_next_fall:
			if(menuNavigationInput != Keypad_next){
				state = SystemDriver_alarmview;
 b06:	8c e0       	ldi	r24, 0x0C	; 12
 b08:	05 c0       	rjmp	.+10     	; 0xb14 <SystemDriverSMTick+0x2e0>
			savedAlarms[savedAlarmIterator].IsActive = ~savedAlarms[savedAlarmIterator].IsActive;
			state = SystemDriver_alarmview_select_fall;
			break;
		case SystemDriver_alarmview_select_fall:
			if(menuNavigationInput != Keypad_select){
				state = SystemDriver_alarmview;
 b0a:	8c e0       	ldi	r24, 0x0C	; 12
 b0c:	03 c0       	rjmp	.+6      	; 0xb14 <SystemDriverSMTick+0x2e0>
		case SystemDriver_alarmview_back:
			// decrement alarm index
			if(savedAlarmIterator > 0){
				savedAlarmIterator--;
			}
			state = SystemDriver_alarmview_back_fall;
 b0e:	89 e1       	ldi	r24, 0x19	; 25
 b10:	01 c0       	rjmp	.+2      	; 0xb14 <SystemDriverSMTick+0x2e0>
			break;
		case SystemDriver_alarmview_back_fall:
			if(menuNavigationInput != Keypad_back){
				state = SystemDriver_alarmview;
 b12:	8c e0       	ldi	r24, 0x0C	; 12
		//=================================================================
		default:
			state = FIRSTMENUITEM;
			break;
	}
	SYSTEMSTATE = state;
 b14:	80 93 c3 01 	sts	0x01C3, r24
	return state;
}
 b18:	08 95       	ret

00000b1a <main>:
// End State Machine drivers
// 

// Scheduler
int main(void)
{
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
 b1e:	cd b7       	in	r28, 0x3d	; 61
 b20:	de b7       	in	r29, 0x3e	; 62
 b22:	28 97       	sbiw	r28, 0x08	; 8
 b24:	0f b6       	in	r0, 0x3f	; 63
 b26:	f8 94       	cli
 b28:	de bf       	out	0x3e, r29	; 62
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	cd bf       	out	0x3d, r28	; 61
	// Set DDR and initialise PORTs
	//Keypad on A
	DDRA = 0xF0; PORTA = 0x0F;
 b2e:	80 ef       	ldi	r24, 0xF0	; 240
 b30:	81 b9       	out	0x01, r24	; 1
 b32:	8f e0       	ldi	r24, 0x0F	; 15
 b34:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 b36:	1f ef       	ldi	r17, 0xFF	; 255
 b38:	14 b9       	out	0x04, r17	; 4
 b3a:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 b3c:	17 b9       	out	0x07, r17	; 7
 b3e:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 b40:	1a b9       	out	0x0a, r17	; 10
 b42:	1b b8       	out	0x0b, r1	; 11
	unsigned long int UpdateInputSM_calc = 100; // 100ms period
	unsigned long int SystemDriverSM_calc = 100; // 100ms period
	
	// Calculate GCD	
	unsigned long int tmpGCD = 1;
	tmpGCD = findGCD(TimeCrunchSM_calc, LCDDisplaySM_calc );
 b44:	28 ee       	ldi	r18, 0xE8	; 232
 b46:	33 e0       	ldi	r19, 0x03	; 3
 b48:	40 e0       	ldi	r20, 0x00	; 0
 b4a:	50 e0       	ldi	r21, 0x00	; 0
 b4c:	68 ee       	ldi	r22, 0xE8	; 232
 b4e:	73 e0       	ldi	r23, 0x03	; 3
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	79 db       	rcall	.-2318   	; 0x248 <findGCD>
	tmpGCD = findGCD(tmpGCD, UpdateInputSM_calc);
 b56:	24 e6       	ldi	r18, 0x64	; 100
 b58:	30 e0       	ldi	r19, 0x00	; 0
 b5a:	40 e0       	ldi	r20, 0x00	; 0
 b5c:	50 e0       	ldi	r21, 0x00	; 0
 b5e:	74 db       	rcall	.-2328   	; 0x248 <findGCD>
	tmpGCD = findGCD(tmpGCD, SystemDriverSM_calc);
 b60:	24 e6       	ldi	r18, 0x64	; 100
 b62:	30 e0       	ldi	r19, 0x00	; 0
 b64:	40 e0       	ldi	r20, 0x00	; 0
 b66:	50 e0       	ldi	r21, 0x00	; 0
 b68:	6f db       	rcall	.-2338   	; 0x248 <findGCD>
 b6a:	6b 01       	movw	r12, r22
 b6c:	7c 01       	movw	r14, r24
	//tmpGCD = findGCD(tmpGCD, ... );
		
	unsigned long int GCD = tmpGCD;
	
	// Recalculate GCD periods for scheduler
	unsigned long int TimeCrunchSM_period = TimeCrunchSM_calc/GCD;
 b6e:	68 ee       	ldi	r22, 0xE8	; 232
 b70:	73 e0       	ldi	r23, 0x03	; 3
 b72:	80 e0       	ldi	r24, 0x00	; 0
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	a7 01       	movw	r20, r14
 b78:	96 01       	movw	r18, r12
 b7a:	b3 d0       	rcall	.+358    	; 0xce2 <__udivmodsi4>
 b7c:	92 2e       	mov	r9, r18
 b7e:	a3 2e       	mov	r10, r19
 b80:	b4 2e       	mov	r11, r20
 b82:	05 2f       	mov	r16, r21
	unsigned long int LCDDisplaySM_period = LCDDisplaySM_calc/GCD;
	unsigned long int UpdateInputSM_period = UpdateInputSM_calc/GCD;
 b84:	64 e6       	ldi	r22, 0x64	; 100
 b86:	70 e0       	ldi	r23, 0x00	; 0
 b88:	80 e0       	ldi	r24, 0x00	; 0
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	a7 01       	movw	r20, r14
 b8e:	96 01       	movw	r18, r12
 b90:	a8 d0       	rcall	.+336    	; 0xce2 <__udivmodsi4>
	// Set up task scheduler
	static task TimeCrunchSMTask,
				LCDDisplaySMTask,
				UpdateInputSMTask,
				SystemDriverSMTask;
	task *tasks[] = {&UpdateInputSMTask, &SystemDriverSMTask, &TimeCrunchSMTask, &LCDDisplaySMTask}; // keep display at the end. keep UpdateInput in the beginning and SystemDriverSM second
 b92:	88 e0       	ldi	r24, 0x08	; 8
 b94:	e4 e0       	ldi	r30, 0x04	; 4
 b96:	f1 e0       	ldi	r31, 0x01	; 1
 b98:	de 01       	movw	r26, r28
 b9a:	11 96       	adiw	r26, 0x01	; 1
 b9c:	01 90       	ld	r0, Z+
 b9e:	0d 92       	st	X+, r0
 ba0:	8a 95       	dec	r24
 ba2:	e1 f7       	brne	.-8      	; 0xb9c <main+0x82>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	//UpdateInputSM declaration
	UpdateInputSMTask.state = -1;
 ba4:	10 93 52 01 	sts	0x0152, r17
	UpdateInputSMTask.period = UpdateInputSMTask.elapsedTime = UpdateInputSM_period;
 ba8:	e7 e5       	ldi	r30, 0x57	; 87
 baa:	f1 e0       	ldi	r31, 0x01	; 1
 bac:	20 83       	st	Z, r18
 bae:	31 83       	std	Z+1, r19	; 0x01
 bb0:	42 83       	std	Z+2, r20	; 0x02
 bb2:	53 83       	std	Z+3, r21	; 0x03
 bb4:	e3 e5       	ldi	r30, 0x53	; 83
 bb6:	f1 e0       	ldi	r31, 0x01	; 1
 bb8:	20 83       	st	Z, r18
 bba:	31 83       	std	Z+1, r19	; 0x01
 bbc:	42 83       	std	Z+2, r20	; 0x02
 bbe:	53 83       	std	Z+3, r21	; 0x03
	UpdateInputSMTask.TickFct = &UpdateInputSMTick;
 bc0:	8f e9       	ldi	r24, 0x9F	; 159
 bc2:	92 e0       	ldi	r25, 0x02	; 2
 bc4:	90 93 5c 01 	sts	0x015C, r25
 bc8:	80 93 5b 01 	sts	0x015B, r24
	
	//SystemDriverSM declaration
	SystemDriverSMTask.state = -1;
 bcc:	10 93 5d 01 	sts	0x015D, r17
	SystemDriverSMTask.period = SystemDriverSMTask.elapsedTime = SystemDriverSM_period;
 bd0:	e2 e6       	ldi	r30, 0x62	; 98
 bd2:	f1 e0       	ldi	r31, 0x01	; 1
 bd4:	20 83       	st	Z, r18
 bd6:	31 83       	std	Z+1, r19	; 0x01
 bd8:	42 83       	std	Z+2, r20	; 0x02
 bda:	53 83       	std	Z+3, r21	; 0x03
 bdc:	ee e5       	ldi	r30, 0x5E	; 94
 bde:	f1 e0       	ldi	r31, 0x01	; 1
 be0:	20 83       	st	Z, r18
 be2:	31 83       	std	Z+1, r19	; 0x01
 be4:	42 83       	std	Z+2, r20	; 0x02
 be6:	53 83       	std	Z+3, r21	; 0x03
	SystemDriverSMTask.TickFct = &SystemDriverSMTick;
 be8:	8a e1       	ldi	r24, 0x1A	; 26
 bea:	94 e0       	ldi	r25, 0x04	; 4
 bec:	90 93 67 01 	sts	0x0167, r25
 bf0:	80 93 66 01 	sts	0x0166, r24
	
	// TimeCrunchSM declaration
	TimeCrunchSMTask.state = -1;
 bf4:	10 93 68 01 	sts	0x0168, r17
	TimeCrunchSMTask.period = TimeCrunchSMTask.elapsedTime = TimeCrunchSM_period;
 bf8:	ed e6       	ldi	r30, 0x6D	; 109
 bfa:	f1 e0       	ldi	r31, 0x01	; 1
 bfc:	90 82       	st	Z, r9
 bfe:	a1 82       	std	Z+1, r10	; 0x01
 c00:	b2 82       	std	Z+2, r11	; 0x02
 c02:	03 83       	std	Z+3, r16	; 0x03
 c04:	e9 e6       	ldi	r30, 0x69	; 105
 c06:	f1 e0       	ldi	r31, 0x01	; 1
 c08:	90 82       	st	Z, r9
 c0a:	a1 82       	std	Z+1, r10	; 0x01
 c0c:	b2 82       	std	Z+2, r11	; 0x02
 c0e:	03 83       	std	Z+3, r16	; 0x03
	TimeCrunchSMTask.TickFct = &TimeCrunchSMTick;
 c10:	8a ee       	ldi	r24, 0xEA	; 234
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	90 93 72 01 	sts	0x0172, r25
 c18:	80 93 71 01 	sts	0x0171, r24
	//LCDDisplaySM declaration
	LCDDisplaySMTask.state = -1;
 c1c:	10 93 73 01 	sts	0x0173, r17
	LCDDisplaySMTask.period = LCDDisplaySMTask.elapsedTime = LCDDisplaySM_period;
 c20:	e8 e7       	ldi	r30, 0x78	; 120
 c22:	f1 e0       	ldi	r31, 0x01	; 1
 c24:	90 82       	st	Z, r9
 c26:	a1 82       	std	Z+1, r10	; 0x01
 c28:	b2 82       	std	Z+2, r11	; 0x02
 c2a:	03 83       	std	Z+3, r16	; 0x03
 c2c:	e4 e7       	ldi	r30, 0x74	; 116
 c2e:	f1 e0       	ldi	r31, 0x01	; 1
 c30:	90 82       	st	Z, r9
 c32:	a1 82       	std	Z+1, r10	; 0x01
 c34:	b2 82       	std	Z+2, r11	; 0x02
 c36:	03 83       	std	Z+3, r16	; 0x03
	LCDDisplaySMTask.TickFct = &LCDDisplaySMTick;
 c38:	80 e5       	ldi	r24, 0x50	; 80
 c3a:	93 e0       	ldi	r25, 0x03	; 3
 c3c:	90 93 7d 01 	sts	0x017D, r25
 c40:	80 93 7c 01 	sts	0x017C, r24
	
	// HW initializations ======================================================
	// Set timer and turn it on
	TimerSet(GCD);
 c44:	c7 01       	movw	r24, r14
 c46:	b6 01       	movw	r22, r12
 c48:	2e db       	rcall	.-2468   	; 0x2a6 <TimerSet>
	TimerOn();
 c4a:	3e db       	rcall	.-2436   	; 0x2c8 <TimerOn>
	// Start LCD
	LCD_init();
 c4c:	b5 da       	rcall	.-2710   	; 0x1b8 <LCD_init>
	// MEM initializations ======================================================
	initializeSavedAlarms(); // zero saved Alarms 
 c4e:	7e dd       	rcall	.-1284   	; 0x74c <initializeSavedAlarms>
	loadAlarmsFromEEPROM();  // load Alarms if previously saved.
 c50:	90 dd       	rcall	.-1248   	; 0x772 <loadAlarmsFromEEPROM>
	
	unsigned short i; // for loop iterator
    while(1)
    {
		for(i=0; i<numTasks; ++i){
 c52:	00 e0       	ldi	r16, 0x00	; 0
 c54:	10 e0       	ldi	r17, 0x00	; 0
 c56:	c1 2c       	mov	r12, r1
 c58:	d1 2c       	mov	r13, r1
 c5a:	38 c0       	rjmp	.+112    	; 0xccc <main+0x1b2>
			if(tasks[i]->elapsedTime == tasks[i]->period){
 c5c:	f8 01       	movw	r30, r16
 c5e:	ee 0f       	add	r30, r30
 c60:	ff 1f       	adc	r31, r31
 c62:	81 e0       	ldi	r24, 0x01	; 1
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	8c 0f       	add	r24, r28
 c68:	9d 1f       	adc	r25, r29
 c6a:	e8 0f       	add	r30, r24
 c6c:	f9 1f       	adc	r31, r25
 c6e:	e0 80       	ld	r14, Z
 c70:	f1 80       	ldd	r15, Z+1	; 0x01
 c72:	d7 01       	movw	r26, r14
 c74:	15 96       	adiw	r26, 0x05	; 5
 c76:	4d 91       	ld	r20, X+
 c78:	5d 91       	ld	r21, X+
 c7a:	6d 91       	ld	r22, X+
 c7c:	7c 91       	ld	r23, X
 c7e:	18 97       	sbiw	r26, 0x08	; 8
 c80:	11 96       	adiw	r26, 0x01	; 1
 c82:	8d 91       	ld	r24, X+
 c84:	9d 91       	ld	r25, X+
 c86:	0d 90       	ld	r0, X+
 c88:	bc 91       	ld	r27, X
 c8a:	a0 2d       	mov	r26, r0
 c8c:	48 17       	cp	r20, r24
 c8e:	59 07       	cpc	r21, r25
 c90:	6a 07       	cpc	r22, r26
 c92:	7b 07       	cpc	r23, r27
 c94:	69 f4       	brne	.+26     	; 0xcb0 <main+0x196>
				// tick and set next state
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 c96:	d7 01       	movw	r26, r14
 c98:	19 96       	adiw	r26, 0x09	; 9
 c9a:	ed 91       	ld	r30, X+
 c9c:	fc 91       	ld	r31, X
 c9e:	1a 97       	sbiw	r26, 0x0a	; 10
 ca0:	8c 91       	ld	r24, X
 ca2:	09 95       	icall
 ca4:	f7 01       	movw	r30, r14
 ca6:	80 83       	st	Z, r24
				//reset elapsed time
				tasks[i]->elapsedTime = 0;
 ca8:	15 82       	std	Z+5, r1	; 0x05
 caa:	16 82       	std	Z+6, r1	; 0x06
 cac:	17 82       	std	Z+7, r1	; 0x07
 cae:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 cb0:	f7 01       	movw	r30, r14
 cb2:	85 81       	ldd	r24, Z+5	; 0x05
 cb4:	96 81       	ldd	r25, Z+6	; 0x06
 cb6:	a7 81       	ldd	r26, Z+7	; 0x07
 cb8:	b0 85       	ldd	r27, Z+8	; 0x08
 cba:	01 96       	adiw	r24, 0x01	; 1
 cbc:	a1 1d       	adc	r26, r1
 cbe:	b1 1d       	adc	r27, r1
 cc0:	85 83       	std	Z+5, r24	; 0x05
 cc2:	96 83       	std	Z+6, r25	; 0x06
 cc4:	a7 83       	std	Z+7, r26	; 0x07
 cc6:	b0 87       	std	Z+8, r27	; 0x08
	loadAlarmsFromEEPROM();  // load Alarms if previously saved.
	
	unsigned short i; // for loop iterator
    while(1)
    {
		for(i=0; i<numTasks; ++i){
 cc8:	0f 5f       	subi	r16, 0xFF	; 255
 cca:	1f 4f       	sbci	r17, 0xFF	; 255
 ccc:	04 30       	cpi	r16, 0x04	; 4
 cce:	11 05       	cpc	r17, r1
 cd0:	28 f2       	brcs	.-118    	; 0xc5c <main+0x142>
				//reset elapsed time
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 cd2:	80 91 4e 01 	lds	r24, 0x014E
 cd6:	88 23       	and	r24, r24
 cd8:	e1 f3       	breq	.-8      	; 0xcd2 <main+0x1b8>
		TimerFlag = 0;
 cda:	10 92 4e 01 	sts	0x014E, r1
	loadAlarmsFromEEPROM();  // load Alarms if previously saved.
	
	unsigned short i; // for loop iterator
    while(1)
    {
		for(i=0; i<numTasks; ++i){
 cde:	86 01       	movw	r16, r12
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
		TimerFlag = 0;
    }
 ce0:	f5 cf       	rjmp	.-22     	; 0xccc <main+0x1b2>

00000ce2 <__udivmodsi4>:
 ce2:	a1 e2       	ldi	r26, 0x21	; 33
 ce4:	1a 2e       	mov	r1, r26
 ce6:	aa 1b       	sub	r26, r26
 ce8:	bb 1b       	sub	r27, r27
 cea:	fd 01       	movw	r30, r26
 cec:	0d c0       	rjmp	.+26     	; 0xd08 <__udivmodsi4_ep>

00000cee <__udivmodsi4_loop>:
 cee:	aa 1f       	adc	r26, r26
 cf0:	bb 1f       	adc	r27, r27
 cf2:	ee 1f       	adc	r30, r30
 cf4:	ff 1f       	adc	r31, r31
 cf6:	a2 17       	cp	r26, r18
 cf8:	b3 07       	cpc	r27, r19
 cfa:	e4 07       	cpc	r30, r20
 cfc:	f5 07       	cpc	r31, r21
 cfe:	20 f0       	brcs	.+8      	; 0xd08 <__udivmodsi4_ep>
 d00:	a2 1b       	sub	r26, r18
 d02:	b3 0b       	sbc	r27, r19
 d04:	e4 0b       	sbc	r30, r20
 d06:	f5 0b       	sbc	r31, r21

00000d08 <__udivmodsi4_ep>:
 d08:	66 1f       	adc	r22, r22
 d0a:	77 1f       	adc	r23, r23
 d0c:	88 1f       	adc	r24, r24
 d0e:	99 1f       	adc	r25, r25
 d10:	1a 94       	dec	r1
 d12:	69 f7       	brne	.-38     	; 0xcee <__udivmodsi4_loop>
 d14:	60 95       	com	r22
 d16:	70 95       	com	r23
 d18:	80 95       	com	r24
 d1a:	90 95       	com	r25
 d1c:	9b 01       	movw	r18, r22
 d1e:	ac 01       	movw	r20, r24
 d20:	bd 01       	movw	r22, r26
 d22:	cf 01       	movw	r24, r30
 d24:	08 95       	ret

00000d26 <__tablejump2__>:
 d26:	ee 0f       	add	r30, r30
 d28:	ff 1f       	adc	r31, r31

00000d2a <__tablejump__>:
 d2a:	05 90       	lpm	r0, Z+
 d2c:	f4 91       	lpm	r31, Z
 d2e:	e0 2d       	mov	r30, r0
 d30:	09 94       	ijmp

00000d32 <__umulhisi3>:
 d32:	a2 9f       	mul	r26, r18
 d34:	b0 01       	movw	r22, r0
 d36:	b3 9f       	mul	r27, r19
 d38:	c0 01       	movw	r24, r0
 d3a:	a3 9f       	mul	r26, r19
 d3c:	01 d0       	rcall	.+2      	; 0xd40 <__umulhisi3+0xe>
 d3e:	b2 9f       	mul	r27, r18
 d40:	70 0d       	add	r23, r0
 d42:	81 1d       	adc	r24, r1
 d44:	11 24       	eor	r1, r1
 d46:	91 1d       	adc	r25, r1
 d48:	08 95       	ret

00000d4a <__eerd_byte_m1284>:
 d4a:	f9 99       	sbic	0x1f, 1	; 31
 d4c:	fe cf       	rjmp	.-4      	; 0xd4a <__eerd_byte_m1284>
 d4e:	92 bd       	out	0x22, r25	; 34
 d50:	81 bd       	out	0x21, r24	; 33
 d52:	f8 9a       	sbi	0x1f, 0	; 31
 d54:	99 27       	eor	r25, r25
 d56:	80 b5       	in	r24, 0x20	; 32
 d58:	08 95       	ret

00000d5a <__eewr_byte_m1284>:
 d5a:	26 2f       	mov	r18, r22

00000d5c <__eewr_r18_m1284>:
 d5c:	f9 99       	sbic	0x1f, 1	; 31
 d5e:	fe cf       	rjmp	.-4      	; 0xd5c <__eewr_r18_m1284>
 d60:	1f ba       	out	0x1f, r1	; 31
 d62:	92 bd       	out	0x22, r25	; 34
 d64:	81 bd       	out	0x21, r24	; 33
 d66:	20 bd       	out	0x20, r18	; 32
 d68:	0f b6       	in	r0, 0x3f	; 63
 d6a:	f8 94       	cli
 d6c:	fa 9a       	sbi	0x1f, 2	; 31
 d6e:	f9 9a       	sbi	0x1f, 1	; 31
 d70:	0f be       	out	0x3f, r0	; 63
 d72:	01 96       	adiw	r24, 0x01	; 1
 d74:	08 95       	ret

00000d76 <_exit>:
 d76:	f8 94       	cli

00000d78 <__stop_program>:
 d78:	ff cf       	rjmp	.-2      	; 0xd78 <__stop_program>
