
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000048e  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800104  00800104  00000526  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000181  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ee9  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000751  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002f4  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000724  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001b8  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000036a  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000034f  00000000  00000000  0000265e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000098  00000000  00000000  000029ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	d0 c0       	rjmp	.+416    	; 0x1d6 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e8       	ldi	r30, 0x8E	; 142
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 32       	cpi	r26, 0x2D	; 45
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	33 d1       	rcall	.+614    	; 0x32a <main>
  c4:	e2 c1       	rjmp	.+964    	; 0x48a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <GetKeypadKey>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
  c8:	8f ee       	ldi	r24, 0xEF	; 239
  ca:	82 b9       	out	0x02, r24	; 2
  cc:	00 00       	nop
  ce:	00 9b       	sbis	0x00, 0	; 0
  d0:	29 c0       	rjmp	.+82     	; 0x124 <GetKeypadKey+0x5c>
  d2:	01 9b       	sbis	0x00, 1	; 0
  d4:	29 c0       	rjmp	.+82     	; 0x128 <GetKeypadKey+0x60>
  d6:	02 9b       	sbis	0x00, 2	; 0
  d8:	29 c0       	rjmp	.+82     	; 0x12c <GetKeypadKey+0x64>
  da:	03 9b       	sbis	0x00, 3	; 0
  dc:	29 c0       	rjmp	.+82     	; 0x130 <GetKeypadKey+0x68>
  de:	8f ed       	ldi	r24, 0xDF	; 223
  e0:	82 b9       	out	0x02, r24	; 2
  e2:	00 00       	nop
  e4:	00 9b       	sbis	0x00, 0	; 0
  e6:	26 c0       	rjmp	.+76     	; 0x134 <GetKeypadKey+0x6c>
  e8:	01 9b       	sbis	0x00, 1	; 0
  ea:	26 c0       	rjmp	.+76     	; 0x138 <GetKeypadKey+0x70>
  ec:	02 9b       	sbis	0x00, 2	; 0
  ee:	26 c0       	rjmp	.+76     	; 0x13c <GetKeypadKey+0x74>
  f0:	03 9b       	sbis	0x00, 3	; 0
  f2:	26 c0       	rjmp	.+76     	; 0x140 <GetKeypadKey+0x78>
  f4:	8f eb       	ldi	r24, 0xBF	; 191
  f6:	82 b9       	out	0x02, r24	; 2
  f8:	00 00       	nop
  fa:	00 9b       	sbis	0x00, 0	; 0
  fc:	23 c0       	rjmp	.+70     	; 0x144 <GetKeypadKey+0x7c>
  fe:	01 9b       	sbis	0x00, 1	; 0
 100:	23 c0       	rjmp	.+70     	; 0x148 <GetKeypadKey+0x80>
 102:	02 9b       	sbis	0x00, 2	; 0
 104:	23 c0       	rjmp	.+70     	; 0x14c <GetKeypadKey+0x84>
 106:	03 9b       	sbis	0x00, 3	; 0
 108:	23 c0       	rjmp	.+70     	; 0x150 <GetKeypadKey+0x88>
 10a:	8f e7       	ldi	r24, 0x7F	; 127
 10c:	82 b9       	out	0x02, r24	; 2
 10e:	00 00       	nop
 110:	00 9b       	sbis	0x00, 0	; 0
 112:	20 c0       	rjmp	.+64     	; 0x154 <GetKeypadKey+0x8c>
 114:	01 9b       	sbis	0x00, 1	; 0
 116:	20 c0       	rjmp	.+64     	; 0x158 <GetKeypadKey+0x90>
 118:	02 9b       	sbis	0x00, 2	; 0
 11a:	20 c0       	rjmp	.+64     	; 0x15c <GetKeypadKey+0x94>
 11c:	03 99       	sbic	0x00, 3	; 0
 11e:	20 c0       	rjmp	.+64     	; 0x160 <GetKeypadKey+0x98>
 120:	84 e4       	ldi	r24, 0x44	; 68
 122:	08 95       	ret
 124:	81 e3       	ldi	r24, 0x31	; 49
 126:	08 95       	ret
 128:	84 e3       	ldi	r24, 0x34	; 52
 12a:	08 95       	ret
 12c:	87 e3       	ldi	r24, 0x37	; 55
 12e:	08 95       	ret
 130:	8a e2       	ldi	r24, 0x2A	; 42
 132:	08 95       	ret
 134:	82 e3       	ldi	r24, 0x32	; 50
 136:	08 95       	ret
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	08 95       	ret
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	08 95       	ret
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	08 95       	ret
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	08 95       	ret
 148:	86 e3       	ldi	r24, 0x36	; 54
 14a:	08 95       	ret
 14c:	89 e3       	ldi	r24, 0x39	; 57
 14e:	08 95       	ret
 150:	83 e2       	ldi	r24, 0x23	; 35
 152:	08 95       	ret
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	08 95       	ret
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	08 95       	ret
 15c:	83 e4       	ldi	r24, 0x43	; 67
 15e:	08 95       	ret
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 95       	ret

00000164 <TimerSet>:
 164:	60 93 00 01 	sts	0x0100, r22
 168:	70 93 01 01 	sts	0x0101, r23
 16c:	80 93 02 01 	sts	0x0102, r24
 170:	90 93 03 01 	sts	0x0103, r25
 174:	60 93 04 01 	sts	0x0104, r22
 178:	70 93 05 01 	sts	0x0105, r23
 17c:	80 93 06 01 	sts	0x0106, r24
 180:	90 93 07 01 	sts	0x0107, r25
 184:	08 95       	ret

00000186 <TimerOn>:
 186:	8b e0       	ldi	r24, 0x0B	; 11
 188:	80 93 81 00 	sts	0x0081, r24
 18c:	8d e7       	ldi	r24, 0x7D	; 125
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 89 00 	sts	0x0089, r25
 194:	80 93 88 00 	sts	0x0088, r24
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	80 93 6f 00 	sts	0x006F, r24
 19e:	10 92 85 00 	sts	0x0085, r1
 1a2:	10 92 84 00 	sts	0x0084, r1
 1a6:	80 91 00 01 	lds	r24, 0x0100
 1aa:	90 91 01 01 	lds	r25, 0x0101
 1ae:	a0 91 02 01 	lds	r26, 0x0102
 1b2:	b0 91 03 01 	lds	r27, 0x0103
 1b6:	80 93 04 01 	sts	0x0104, r24
 1ba:	90 93 05 01 	sts	0x0105, r25
 1be:	a0 93 06 01 	sts	0x0106, r26
 1c2:	b0 93 07 01 	sts	0x0107, r27
 1c6:	8f b7       	in	r24, 0x3f	; 63
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	8f bf       	out	0x3f, r24	; 63
 1cc:	08 95       	ret

000001ce <TimerISR>:
}

void TimerISR() {
	TimerFlag = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 08 01 	sts	0x0108, r24
 1d4:	08 95       	ret

000001d6 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	0b b6       	in	r0, 0x3b	; 59
 1e2:	0f 92       	push	r0
 1e4:	2f 93       	push	r18
 1e6:	3f 93       	push	r19
 1e8:	4f 93       	push	r20
 1ea:	5f 93       	push	r21
 1ec:	6f 93       	push	r22
 1ee:	7f 93       	push	r23
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	af 93       	push	r26
 1f6:	bf 93       	push	r27
 1f8:	ef 93       	push	r30
 1fa:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 1fc:	80 91 04 01 	lds	r24, 0x0104
 200:	90 91 05 01 	lds	r25, 0x0105
 204:	a0 91 06 01 	lds	r26, 0x0106
 208:	b0 91 07 01 	lds	r27, 0x0107
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	a1 09       	sbc	r26, r1
 210:	b1 09       	sbc	r27, r1
 212:	80 93 04 01 	sts	0x0104, r24
 216:	90 93 05 01 	sts	0x0105, r25
 21a:	a0 93 06 01 	sts	0x0106, r26
 21e:	b0 93 07 01 	sts	0x0107, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 222:	89 2b       	or	r24, r25
 224:	8a 2b       	or	r24, r26
 226:	8b 2b       	or	r24, r27
 228:	89 f4       	brne	.+34     	; 0x24c <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
 22a:	d1 df       	rcall	.-94     	; 0x1ce <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 22c:	80 91 00 01 	lds	r24, 0x0100
 230:	90 91 01 01 	lds	r25, 0x0101
 234:	a0 91 02 01 	lds	r26, 0x0102
 238:	b0 91 03 01 	lds	r27, 0x0103
 23c:	80 93 04 01 	sts	0x0104, r24
 240:	90 93 05 01 	sts	0x0105, r25
 244:	a0 93 06 01 	sts	0x0106, r26
 248:	b0 93 07 01 	sts	0x0107, r27
	}
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0b be       	out	0x3b, r0	; 59
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <loadAlarmsFromEEPROM>:
} Alarm;

Alarm savedAlarms[EEPROM_ALARM_TOPADDRESS/3];

Alarm tmpAlarms[EEPROM_ALARM_TOPADDRESS/3];
void loadAlarmsFromEEPROM(){
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	c2 e0       	ldi	r28, 0x02	; 2
 27c:	d0 e0       	ldi	r29, 0x00	; 0
	for(unsigned char i = 0; i < EEPROM_ALARM_TOPADDRESS/3; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
		tmpAlarms[i].Hour = eeprom_read_byte((uint8_t*) (3*i));
 27e:	ce 01       	movw	r24, r28
 280:	02 97       	sbiw	r24, 0x02	; 2
 282:	ed d0       	rcall	.+474    	; 0x45e <__eerd_byte_m1284>
} Alarm;

Alarm savedAlarms[EEPROM_ALARM_TOPADDRESS/3];

Alarm tmpAlarms[EEPROM_ALARM_TOPADDRESS/3];
void loadAlarmsFromEEPROM(){
 284:	8e 01       	movw	r16, r28
 286:	01 5f       	subi	r16, 0xF1	; 241
 288:	1e 4f       	sbci	r17, 0xFE	; 254
 28a:	f8 01       	movw	r30, r16
 28c:	32 97       	sbiw	r30, 0x02	; 2
	for(unsigned char i = 0; i < EEPROM_ALARM_TOPADDRESS/3; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
		tmpAlarms[i].Hour = eeprom_read_byte((uint8_t*) (3*i));
 28e:	80 83       	st	Z, r24
		tmpAlarms[i].Minute = eeprom_read_byte((uint8_t*) (3*i+1));
 290:	ce 01       	movw	r24, r28
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	e4 d0       	rcall	.+456    	; 0x45e <__eerd_byte_m1284>
} Alarm;

Alarm savedAlarms[EEPROM_ALARM_TOPADDRESS/3];

Alarm tmpAlarms[EEPROM_ALARM_TOPADDRESS/3];
void loadAlarmsFromEEPROM(){
 296:	f8 01       	movw	r30, r16
 298:	31 97       	sbiw	r30, 0x01	; 1
	for(unsigned char i = 0; i < EEPROM_ALARM_TOPADDRESS/3; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
		tmpAlarms[i].Hour = eeprom_read_byte((uint8_t*) (3*i));
		tmpAlarms[i].Minute = eeprom_read_byte((uint8_t*) (3*i+1));
 29a:	80 83       	st	Z, r24
		tmpAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (3*i+2));
 29c:	ce 01       	movw	r24, r28
 29e:	df d0       	rcall	.+446    	; 0x45e <__eerd_byte_m1284>
 2a0:	f8 01       	movw	r30, r16
 2a2:	80 83       	st	Z, r24
 2a4:	23 96       	adiw	r28, 0x03	; 3

Alarm savedAlarms[EEPROM_ALARM_TOPADDRESS/3];

Alarm tmpAlarms[EEPROM_ALARM_TOPADDRESS/3];
void loadAlarmsFromEEPROM(){
	for(unsigned char i = 0; i < EEPROM_ALARM_TOPADDRESS/3; ++i){	// These addresses must be read in this order in correspondance with EEPROMAddresses enum.
 2a6:	c1 31       	cpi	r28, 0x11	; 17
 2a8:	d1 05       	cpc	r29, r1
 2aa:	49 f7       	brne	.-46     	; 0x27e <loadAlarmsFromEEPROM+0xc>
		tmpAlarms[i].Hour = eeprom_read_byte((uint8_t*) (3*i));
		tmpAlarms[i].Minute = eeprom_read_byte((uint8_t*) (3*i+1));
		tmpAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (3*i+2));
	}
}
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <saveAlarmsToEEPROM>:
void saveAlarmsToEEPROM(){
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	c2 e0       	ldi	r28, 0x02	; 2
 2c0:	d0 e0       	ldi	r29, 0x00	; 0
 2c2:	8e 01       	movw	r16, r28
 2c4:	02 5e       	subi	r16, 0xE2	; 226
 2c6:	1e 4f       	sbci	r17, 0xFE	; 254
 2c8:	f8 01       	movw	r30, r16
 2ca:	32 97       	sbiw	r30, 0x02	; 2
	for(unsigned char i = 0; i < EEPROM_ALARM_TOPADDRESS/3; ++i){
		eeprom_write_byte((uint8_t*) (3*i), savedAlarms[i].Hour);
 2cc:	60 81       	ld	r22, Z
 2ce:	ce 01       	movw	r24, r28
 2d0:	02 97       	sbiw	r24, 0x02	; 2
 2d2:	cd d0       	rcall	.+410    	; 0x46e <__eewr_byte_m1284>
		tmpAlarms[i].Hour = eeprom_read_byte((uint8_t*) (3*i));
		tmpAlarms[i].Minute = eeprom_read_byte((uint8_t*) (3*i+1));
		tmpAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (3*i+2));
	}
}
void saveAlarmsToEEPROM(){
 2d4:	f8 01       	movw	r30, r16
 2d6:	31 97       	sbiw	r30, 0x01	; 1
	for(unsigned char i = 0; i < EEPROM_ALARM_TOPADDRESS/3; ++i){
		eeprom_write_byte((uint8_t*) (3*i), savedAlarms[i].Hour);
		eeprom_write_byte((uint8_t*) (3*i+1), savedAlarms[i].Minute);
 2d8:	60 81       	ld	r22, Z
 2da:	ce 01       	movw	r24, r28
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	c7 d0       	rcall	.+398    	; 0x46e <__eewr_byte_m1284>
		eeprom_write_byte((uint8_t*) (3*i+2), savedAlarms[i].IsAM);
 2e0:	f8 01       	movw	r30, r16
 2e2:	60 81       	ld	r22, Z
 2e4:	ce 01       	movw	r24, r28
 2e6:	c3 d0       	rcall	.+390    	; 0x46e <__eewr_byte_m1284>
 2e8:	23 96       	adiw	r28, 0x03	; 3
		tmpAlarms[i].Minute = eeprom_read_byte((uint8_t*) (3*i+1));
		tmpAlarms[i].IsAM = eeprom_read_byte((uint8_t*) (3*i+2));
	}
}
void saveAlarmsToEEPROM(){
	for(unsigned char i = 0; i < EEPROM_ALARM_TOPADDRESS/3; ++i){
 2ea:	c1 31       	cpi	r28, 0x11	; 17
 2ec:	d1 05       	cpc	r29, r1
 2ee:	49 f7       	brne	.-46     	; 0x2c2 <saveAlarmsToEEPROM+0xc>
		eeprom_write_byte((uint8_t*) (3*i), savedAlarms[i].Hour);
		eeprom_write_byte((uint8_t*) (3*i+1), savedAlarms[i].Minute);
		eeprom_write_byte((uint8_t*) (3*i+2), savedAlarms[i].IsAM);
	}
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <tick>:
unsigned char keyInput;

unsigned char myString[5];
void tick(){
	keyInput = GetKeypadKey();
 2fa:	e6 de       	rcall	.-564    	; 0xc8 <GetKeypadKey>
 2fc:	80 93 09 01 	sts	0x0109, r24
	switch(keyInput){
 300:	81 34       	cpi	r24, 0x41	; 65
 302:	81 f4       	brne	.+32     	; 0x324 <tick+0x2a>
		case 'A':
			PORTB = 0xFF;
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	85 b9       	out	0x05, r24	; 5
			myString[5] = '\0';
 308:	10 92 0f 01 	sts	0x010F, r1
			myString[0] = tmpAlarms[3].Hour;
 30c:	80 91 18 01 	lds	r24, 0x0118
 310:	80 93 0a 01 	sts	0x010A, r24
			myString[1] = tmpAlarms[2].Minute;
 314:	80 91 16 01 	lds	r24, 0x0116
 318:	80 93 0b 01 	sts	0x010B, r24
			LCD_DisplayString(1, myString);
 31c:	6a e0       	ldi	r22, 0x0A	; 10
 31e:	71 e0       	ldi	r23, 0x01	; 1
 320:	81 e0       	ldi	r24, 0x01	; 1
			break;
 322:	78 c0       	rjmp	.+240    	; 0x414 <LCD_DisplayString>
		default:
			PORTB = 0x55;
 324:	85 e5       	ldi	r24, 0x55	; 85
 326:	85 b9       	out	0x05, r24	; 5
 328:	08 95       	ret

0000032a <main>:
	}
}
int main(void)
{
	DDRA = 0xF0; PORTA = 0x0F;
 32a:	80 ef       	ldi	r24, 0xF0	; 240
 32c:	81 b9       	out	0x01, r24	; 1
 32e:	8f e0       	ldi	r24, 0x0F	; 15
 330:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	84 b9       	out	0x04, r24	; 4
 336:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTB = 0x00;
 338:	87 b9       	out	0x07, r24	; 7
 33a:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTB = 0x00;
 33c:	8a b9       	out	0x0a, r24	; 10
 33e:	15 b8       	out	0x05, r1	; 5
	savedAlarms[0].Hour = 'a';
 340:	81 e6       	ldi	r24, 0x61	; 97
 342:	80 93 1e 01 	sts	0x011E, r24
	savedAlarms[0].Minute = 'b';
 346:	82 e6       	ldi	r24, 0x62	; 98
 348:	80 93 1f 01 	sts	0x011F, r24
	savedAlarms[0].IsAM = 'c';
 34c:	83 e6       	ldi	r24, 0x63	; 99
 34e:	80 93 20 01 	sts	0x0120, r24
	savedAlarms[1].Hour = 'd';
 352:	84 e6       	ldi	r24, 0x64	; 100
 354:	80 93 21 01 	sts	0x0121, r24
	savedAlarms[1].Minute = 'e';
 358:	85 e6       	ldi	r24, 0x65	; 101
 35a:	80 93 22 01 	sts	0x0122, r24
	savedAlarms[1].IsAM = 'f';
 35e:	86 e6       	ldi	r24, 0x66	; 102
 360:	80 93 23 01 	sts	0x0123, r24
	savedAlarms[2].Hour = 'g';
 364:	87 e6       	ldi	r24, 0x67	; 103
 366:	80 93 24 01 	sts	0x0124, r24
	savedAlarms[2].Minute = 'h';
 36a:	88 e6       	ldi	r24, 0x68	; 104
 36c:	80 93 25 01 	sts	0x0125, r24
	savedAlarms[2].IsAM = 'i';
 370:	89 e6       	ldi	r24, 0x69	; 105
 372:	80 93 26 01 	sts	0x0126, r24
	savedAlarms[3].Hour = 'j';
 376:	8a e6       	ldi	r24, 0x6A	; 106
 378:	80 93 27 01 	sts	0x0127, r24
	savedAlarms[3].Minute = 'l';
 37c:	8c e6       	ldi	r24, 0x6C	; 108
 37e:	80 93 28 01 	sts	0x0128, r24
	savedAlarms[3].IsAM ='m';
 382:	8d e6       	ldi	r24, 0x6D	; 109
 384:	80 93 29 01 	sts	0x0129, r24
	savedAlarms[4].Hour = 'n';
 388:	8e e6       	ldi	r24, 0x6E	; 110
 38a:	80 93 2a 01 	sts	0x012A, r24
	savedAlarms[4].Minute = 'o';
 38e:	8f e6       	ldi	r24, 0x6F	; 111
 390:	80 93 2b 01 	sts	0x012B, r24
	savedAlarms[4].IsAM = 'p';
 394:	80 e7       	ldi	r24, 0x70	; 112
 396:	80 93 2c 01 	sts	0x012C, r24
	saveAlarmsToEEPROM();
 39a:	8d df       	rcall	.-230    	; 0x2b6 <saveAlarmsToEEPROM>
	loadAlarmsFromEEPROM();
 39c:	6a df       	rcall	.-300    	; 0x272 <loadAlarmsFromEEPROM>
	TimerSet(500);
 39e:	64 ef       	ldi	r22, 0xF4	; 244
 3a0:	71 e0       	ldi	r23, 0x01	; 1
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	de de       	rcall	.-580    	; 0x164 <TimerSet>
	TimerOn();
 3a8:	ee de       	rcall	.-548    	; 0x186 <TimerOn>
	LCD_init();
 3aa:	4b d0       	rcall	.+150    	; 0x442 <LCD_init>
	while(1)
	{
		tick();
 3ac:	a6 df       	rcall	.-180    	; 0x2fa <tick>
		while(!TimerFlag);
 3ae:	80 91 08 01 	lds	r24, 0x0108
 3b2:	88 23       	and	r24, r24
 3b4:	e1 f3       	breq	.-8      	; 0x3ae <main+0x84>
		TimerFlag = 0;
 3b6:	10 92 08 01 	sts	0x0108, r1
	}
 3ba:	f8 cf       	rjmp	.-16     	; 0x3ac <main+0x82>

000003bc <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 3bc:	18 16       	cp	r1, r24
 3be:	19 06       	cpc	r1, r25
 3c0:	5c f0       	brlt	.+22     	; 0x3d8 <delay_ms+0x1c>
 3c2:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 3c4:	00 00       	nop
 3c6:	21 50       	subi	r18, 0x01	; 1
 3c8:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 3cc:	4f 5f       	subi	r20, 0xFF	; 255
 3ce:	5f 4f       	sbci	r21, 0xFF	; 255
 3d0:	48 17       	cp	r20, r24
 3d2:	59 07       	cpc	r21, r25
 3d4:	29 f4       	brne	.+10     	; 0x3e0 <delay_ms+0x24>
 3d6:	08 95       	ret
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 3dc:	67 e0       	ldi	r22, 0x07	; 7
 3de:	73 e0       	ldi	r23, 0x03	; 3
 3e0:	9b 01       	movw	r18, r22
 3e2:	f0 cf       	rjmp	.-32     	; 0x3c4 <delay_ms+0x8>

000003e4 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 3e4:	5e 9a       	sbi	0x0b, 6	; 11
   DATA_BUS = Data;
 3e6:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 3e8:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 3ea:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 3ec:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	e4 cf       	rjmp	.-56     	; 0x3bc <delay_ms>

000003f4 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 3f4:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
 3f6:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 3f8:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 3fa:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 3fc:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	dc cf       	rjmp	.-72     	; 0x3bc <delay_ms>

00000404 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 404:	81 31       	cpi	r24, 0x11	; 17
 406:	10 f4       	brcc	.+4      	; 0x40c <LCD_Cursor+0x8>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 408:	81 58       	subi	r24, 0x81	; 129
 40a:	f4 cf       	rjmp	.-24     	; 0x3f4 <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 40c:	81 55       	subi	r24, 0x51	; 81
 40e:	f2 cf       	rjmp	.-28     	; 0x3f4 <LCD_WriteCommand>

00000410 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	f0 cf       	rjmp	.-32     	; 0x3f4 <LCD_WriteCommand>

00000414 <LCD_DisplayString>:
   SET_BIT(CONTROL_BUS,E);
   asm("nop");
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}	
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	18 2f       	mov	r17, r24
 41c:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 41e:	f8 df       	rcall	.-16     	; 0x410 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 420:	98 81       	ld	r25, Y
 422:	99 23       	and	r25, r25
 424:	51 f0       	breq	.+20     	; 0x43a <LCD_DisplayString+0x26>
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}	
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
 426:	81 2f       	mov	r24, r17
   while(*string) {
      LCD_Cursor(c++);
 428:	18 2f       	mov	r17, r24
 42a:	1f 5f       	subi	r17, 0xFF	; 255
 42c:	eb df       	rcall	.-42     	; 0x404 <LCD_Cursor>
      LCD_WriteData(*string++);
 42e:	89 91       	ld	r24, Y+
 430:	d9 df       	rcall	.-78     	; 0x3e4 <LCD_WriteData>
}	
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 432:	81 2f       	mov	r24, r17
   delay_ms(1);
}	
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 434:	98 81       	ld	r25, Y
 436:	91 11       	cpse	r25, r1
 438:	f7 cf       	rjmp	.-18     	; 0x428 <LCD_DisplayString+0x14>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	08 95       	ret

00000442 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 442:	84 e6       	ldi	r24, 0x64	; 100
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	ba df       	rcall	.-140    	; 0x3bc <delay_ms>
	LCD_WriteCommand(0x38);
 448:	88 e3       	ldi	r24, 0x38	; 56
 44a:	d4 df       	rcall	.-88     	; 0x3f4 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 44c:	86 e0       	ldi	r24, 0x06	; 6
 44e:	d2 df       	rcall	.-92     	; 0x3f4 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 450:	8f e0       	ldi	r24, 0x0F	; 15
 452:	d0 df       	rcall	.-96     	; 0x3f4 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	ce df       	rcall	.-100    	; 0x3f4 <LCD_WriteCommand>
	delay_ms(10);						 
 458:	8a e0       	ldi	r24, 0x0A	; 10
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	af cf       	rjmp	.-162    	; 0x3bc <delay_ms>

0000045e <__eerd_byte_m1284>:
 45e:	f9 99       	sbic	0x1f, 1	; 31
 460:	fe cf       	rjmp	.-4      	; 0x45e <__eerd_byte_m1284>
 462:	92 bd       	out	0x22, r25	; 34
 464:	81 bd       	out	0x21, r24	; 33
 466:	f8 9a       	sbi	0x1f, 0	; 31
 468:	99 27       	eor	r25, r25
 46a:	80 b5       	in	r24, 0x20	; 32
 46c:	08 95       	ret

0000046e <__eewr_byte_m1284>:
 46e:	26 2f       	mov	r18, r22

00000470 <__eewr_r18_m1284>:
 470:	f9 99       	sbic	0x1f, 1	; 31
 472:	fe cf       	rjmp	.-4      	; 0x470 <__eewr_r18_m1284>
 474:	1f ba       	out	0x1f, r1	; 31
 476:	92 bd       	out	0x22, r25	; 34
 478:	81 bd       	out	0x21, r24	; 33
 47a:	20 bd       	out	0x20, r18	; 32
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	fa 9a       	sbi	0x1f, 2	; 31
 482:	f9 9a       	sbi	0x1f, 1	; 31
 484:	0f be       	out	0x3f, r0	; 63
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	08 95       	ret

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>
