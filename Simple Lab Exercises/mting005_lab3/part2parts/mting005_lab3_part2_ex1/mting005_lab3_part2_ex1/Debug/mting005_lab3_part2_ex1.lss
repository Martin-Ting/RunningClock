
mting005_lab3_part2_ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  00000324  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001ca  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000100  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000016f  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000bc  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016f  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000cb  00000000  00000000  00001163  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	71 c0       	rjmp	.+226    	; 0x118 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	89 d0       	rcall	.+274    	; 0x1d6 <main>
  c4:	e1 c0       	rjmp	.+450    	; 0x288 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z7TimerOnv>:
	_avr_timer_cntcurr = _avr_timer_M;
	// Enable global interrupts: 0x80: 10000000
	SREG |= 0x80;
}
void TimerOff(){
	TCCR1B=0x00;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25
  d6:	80 93 88 00 	sts	0x0088, r24
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24
  e0:	10 92 85 00 	sts	0x0085, r1
  e4:	10 92 84 00 	sts	0x0084, r1
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	90 91 01 01 	lds	r25, 0x0101
  f0:	a0 91 02 01 	lds	r26, 0x0102
  f4:	b0 91 03 01 	lds	r27, 0x0103
  f8:	80 93 08 01 	sts	0x0108, r24
  fc:	90 93 09 01 	sts	0x0109, r25
 100:	a0 93 0a 01 	sts	0x010A, r26
 104:	b0 93 0b 01 	sts	0x010B, r27
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <_Z8TimerISRv>:
}
void TimerISR(){
	TimerFlag = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 0c 01 	sts	0x010C, r24
 116:	08 95       	ret

00000118 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1ms per TimerOn settings)
	
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
 13e:	80 91 08 01 	lds	r24, 0x0108
 142:	90 91 09 01 	lds	r25, 0x0109
 146:	a0 91 0a 01 	lds	r26, 0x010A
 14a:	b0 91 0b 01 	lds	r27, 0x010B
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	a1 09       	sbc	r26, r1
 152:	b1 09       	sbc	r27, r1
 154:	80 93 08 01 	sts	0x0108, r24
 158:	90 93 09 01 	sts	0x0109, r25
 15c:	a0 93 0a 01 	sts	0x010A, r26
 160:	b0 93 0b 01 	sts	0x010B, r27
	if(_avr_timer_cntcurr == 0){
 164:	89 2b       	or	r24, r25
 166:	8a 2b       	or	r24, r26
 168:	8b 2b       	or	r24, r27
 16a:	89 f4       	brne	.+34     	; 0x18e <__vector_13+0x76>
		// call the isr that the user uses
		TimerISR();
 16c:	d1 df       	rcall	.-94     	; 0x110 <_Z8TimerISRv>
		_avr_timer_cntcurr = _avr_timer_M;
 16e:	80 91 00 01 	lds	r24, 0x0100
 172:	90 91 01 01 	lds	r25, 0x0101
 176:	a0 91 02 01 	lds	r26, 0x0102
 17a:	b0 91 03 01 	lds	r27, 0x0103
 17e:	80 93 08 01 	sts	0x0108, r24
 182:	90 93 09 01 	sts	0x0109, r25
 186:	a0 93 0a 01 	sts	0x010A, r26
 18a:	b0 93 0b 01 	sts	0x010B, r27
	}
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0b be       	out	0x3b, r0	; 59
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <_Z8TimerSetm>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M){
	_avr_timer_M = M;
 1b4:	60 93 00 01 	sts	0x0100, r22
 1b8:	70 93 01 01 	sts	0x0101, r23
 1bc:	80 93 02 01 	sts	0x0102, r24
 1c0:	90 93 03 01 	sts	0x0103, r25
	_avr_timer_cntcurr = _avr_timer_M;
 1c4:	60 93 08 01 	sts	0x0108, r22
 1c8:	70 93 09 01 	sts	0x0109, r23
 1cc:	80 93 0a 01 	sts	0x010A, r24
 1d0:	90 93 0b 01 	sts	0x010B, r25
 1d4:	08 95       	ret

000001d6 <main>:
}

unsigned long count = 0x00;
int main(void)
{
	DDRB = 0xFF;
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 1da:	15 b8       	out	0x05, r1	; 5
	TimerSet(1000);
 1dc:	68 ee       	ldi	r22, 0xE8	; 232
 1de:	73 e0       	ldi	r23, 0x03	; 3
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	e7 df       	rcall	.-50     	; 0x1b4 <_Z8TimerSetm>
	TimerOn();
 1e6:	70 df       	rcall	.-288    	; 0xc8 <_Z7TimerOnv>
				count++;
			} else if(count == 1){
				PORTB = 0x02;
				count++;
			}else if(count == 2){
				PORTB = 0x04;
 1e8:	14 e0       	ldi	r17, 0x04	; 4
			TimerFlag = 0;
			if(count == 0){
				PORTB = 0x01;
				count++;
			} else if(count == 1){
				PORTB = 0x02;
 1ea:	d2 e0       	ldi	r29, 0x02	; 2
		// Toggle PORTB; temp bad pro sty
		TimerSet(1000);
		while(!TimerFlag);
			TimerFlag = 0;
			if(count == 0){
				PORTB = 0x01;
 1ec:	c1 e0       	ldi	r28, 0x01	; 1
	unsigned char tmpB = 0x00;
    while(1)
    {
		// user code (ie syncSM calls)
		// Toggle PORTB; temp bad pro sty
		TimerSet(1000);
 1ee:	68 ee       	ldi	r22, 0xE8	; 232
 1f0:	73 e0       	ldi	r23, 0x03	; 3
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	de df       	rcall	.-68     	; 0x1b4 <_Z8TimerSetm>
		while(!TimerFlag);
 1f8:	80 91 0c 01 	lds	r24, 0x010C
 1fc:	88 23       	and	r24, r24
 1fe:	e1 f3       	breq	.-8      	; 0x1f8 <main+0x22>
			TimerFlag = 0;
 200:	10 92 0c 01 	sts	0x010C, r1
			if(count == 0){
 204:	80 91 04 01 	lds	r24, 0x0104
 208:	90 91 05 01 	lds	r25, 0x0105
 20c:	a0 91 06 01 	lds	r26, 0x0106
 210:	b0 91 07 01 	lds	r27, 0x0107
 214:	00 97       	sbiw	r24, 0x00	; 0
 216:	a1 05       	cpc	r26, r1
 218:	b1 05       	cpc	r27, r1
 21a:	69 f4       	brne	.+26     	; 0x236 <main+0x60>
				PORTB = 0x01;
 21c:	c5 b9       	out	0x05, r28	; 5
				count++;
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	a1 1d       	adc	r26, r1
 222:	b1 1d       	adc	r27, r1
 224:	80 93 04 01 	sts	0x0104, r24
 228:	90 93 05 01 	sts	0x0105, r25
 22c:	a0 93 06 01 	sts	0x0106, r26
 230:	b0 93 07 01 	sts	0x0107, r27
 234:	dc cf       	rjmp	.-72     	; 0x1ee <main+0x18>
			} else if(count == 1){
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	91 05       	cpc	r25, r1
 23a:	a1 05       	cpc	r26, r1
 23c:	b1 05       	cpc	r27, r1
 23e:	a9 f4       	brne	.+42     	; 0x26a <main+0x94>
				PORTB = 0x02;
 240:	d5 b9       	out	0x05, r29	; 5
				count++;
 242:	80 91 04 01 	lds	r24, 0x0104
 246:	90 91 05 01 	lds	r25, 0x0105
 24a:	a0 91 06 01 	lds	r26, 0x0106
 24e:	b0 91 07 01 	lds	r27, 0x0107
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	a1 1d       	adc	r26, r1
 256:	b1 1d       	adc	r27, r1
 258:	80 93 04 01 	sts	0x0104, r24
 25c:	90 93 05 01 	sts	0x0105, r25
 260:	a0 93 06 01 	sts	0x0106, r26
 264:	b0 93 07 01 	sts	0x0107, r27
 268:	c2 cf       	rjmp	.-124    	; 0x1ee <main+0x18>
			}else if(count == 2){
 26a:	02 97       	sbiw	r24, 0x02	; 2
 26c:	a1 05       	cpc	r26, r1
 26e:	b1 05       	cpc	r27, r1
 270:	09 f0       	breq	.+2      	; 0x274 <main+0x9e>
 272:	bd cf       	rjmp	.-134    	; 0x1ee <main+0x18>
				PORTB = 0x04;
 274:	15 b9       	out	0x05, r17	; 5
				count = 0;
 276:	10 92 04 01 	sts	0x0104, r1
 27a:	10 92 05 01 	sts	0x0105, r1
 27e:	10 92 06 01 	sts	0x0106, r1
 282:	10 92 07 01 	sts	0x0107, r1
 286:	b3 cf       	rjmp	.-154    	; 0x1ee <main+0x18>

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>
