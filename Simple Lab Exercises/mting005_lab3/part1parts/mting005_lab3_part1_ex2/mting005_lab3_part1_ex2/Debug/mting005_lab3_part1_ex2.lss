
mting005_lab3_part1_ex2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001d2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000266  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009cb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000012f  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000bc  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000019b  00000000  00000000  00000c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000034  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000146  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000022  00000000  00000000  00000f22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	8b d0       	rcall	.+278    	; 0x1c0 <main>
  aa:	91 c0       	rjmp	.+290    	; 0x1ce <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z4tickv>:

#define OUTPUTPORT PORTB
#define DEBUGPORT PORTC

void tick(){
	unsigned char bIncrement = ~PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
	unsigned char bDecrement = ~PINA & 0x02;
  b2:	90 b1       	in	r25, 0x00	; 0
  b4:	90 95       	com	r25
  b6:	92 70       	andi	r25, 0x02	; 2
	unsigned char bReset = (bIncrement != 0 && bDecrement != 0) ? 1 : 0;
  b8:	38 2f       	mov	r19, r24
  ba:	31 70       	andi	r19, 0x01	; 1
  bc:	80 ff       	sbrs	r24, 0
  be:	05 c0       	rjmp	.+10     	; 0xca <_Z4tickv+0x1c>
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	91 11       	cpse	r25, r1
  c4:	03 c0       	rjmp	.+6      	; 0xcc <_Z4tickv+0x1e>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	01 c0       	rjmp	.+2      	; 0xcc <_Z4tickv+0x1e>
  ca:	20 e0       	ldi	r18, 0x00	; 0
	switch(SMState){
  cc:	80 91 00 01 	lds	r24, 0x0100
  d0:	82 30       	cpi	r24, 0x02	; 2
  d2:	09 f4       	brne	.+2      	; 0xd6 <_Z4tickv+0x28>
  d4:	47 c0       	rjmp	.+142    	; 0x164 <_Z4tickv+0xb6>
  d6:	30 f4       	brcc	.+12     	; 0xe4 <_Z4tickv+0x36>
  d8:	88 23       	and	r24, r24
  da:	61 f0       	breq	.+24     	; 0xf4 <_Z4tickv+0x46>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	09 f0       	breq	.+2      	; 0xe2 <_Z4tickv+0x34>
  e0:	52 c0       	rjmp	.+164    	; 0x186 <_Z4tickv+0xd8>
  e2:	11 c0       	rjmp	.+34     	; 0x106 <_Z4tickv+0x58>
  e4:	84 30       	cpi	r24, 0x04	; 4
  e6:	71 f1       	breq	.+92     	; 0x144 <_Z4tickv+0x96>
  e8:	08 f4       	brcc	.+2      	; 0xec <_Z4tickv+0x3e>
  ea:	42 c0       	rjmp	.+132    	; 0x170 <_Z4tickv+0xc2>
  ec:	85 30       	cpi	r24, 0x05	; 5
  ee:	09 f0       	breq	.+2      	; 0xf2 <_Z4tickv+0x44>
  f0:	4a c0       	rjmp	.+148    	; 0x186 <_Z4tickv+0xd8>
  f2:	43 c0       	rjmp	.+134    	; 0x17a <_Z4tickv+0xcc>
		case SMINIT:
			DEBUGPORT = 0x10;
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	88 b9       	out	0x08, r24	; 8
			gCount = 7;
  f8:	87 e0       	ldi	r24, 0x07	; 7
  fa:	80 93 01 01 	sts	0x0101, r24
			SMState = SMWAIT;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 00 01 	sts	0x0100, r24
			break;
 104:	56 c0       	rjmp	.+172    	; 0x1b2 <_Z4tickv+0x104>
		case SMWAIT:
			DEBUGPORT = 0x01;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	88 b9       	out	0x08, r24	; 8
			if(bReset != 0){
 10a:	22 23       	and	r18, r18
 10c:	21 f0       	breq	.+8      	; 0x116 <_Z4tickv+0x68>
				SMState = SMRESET;
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	80 93 00 01 	sts	0x0100, r24
 114:	4c c0       	rjmp	.+152    	; 0x1ae <_Z4tickv+0x100>
			}else if(gCount < 9 && (bIncrement != 0 && bDecrement == 0) ){
 116:	80 91 01 01 	lds	r24, 0x0101
 11a:	89 30       	cpi	r24, 0x09	; 9
 11c:	48 f4       	brcc	.+18     	; 0x130 <_Z4tickv+0x82>
 11e:	33 23       	and	r19, r19
 120:	09 f4       	brne	.+2      	; 0x124 <_Z4tickv+0x76>
 122:	4b c0       	rjmp	.+150    	; 0x1ba <_Z4tickv+0x10c>
 124:	91 11       	cpse	r25, r1
 126:	2f c0       	rjmp	.+94     	; 0x186 <_Z4tickv+0xd8>
				// Only Increment button pressed
				SMState = SMINC;
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 93 00 01 	sts	0x0100, r24
 12e:	33 c0       	rjmp	.+102    	; 0x196 <_Z4tickv+0xe8>
			}else if(gCount > 0 && (bIncrement == 0 && bDecrement != 0) ){
 130:	88 23       	and	r24, r24
 132:	49 f1       	breq	.+82     	; 0x186 <_Z4tickv+0xd8>
 134:	31 11       	cpse	r19, r1
 136:	27 c0       	rjmp	.+78     	; 0x186 <_Z4tickv+0xd8>
 138:	99 23       	and	r25, r25
 13a:	29 f1       	breq	.+74     	; 0x186 <_Z4tickv+0xd8>
				// Only Decrement button pressed
				SMState = SMDEC;
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	80 93 00 01 	sts	0x0100, r24
 142:	2f c0       	rjmp	.+94     	; 0x1a2 <_Z4tickv+0xf4>
			}
			break;
		case RISEWAIT:
			DEBUGPORT = 0x11;
 144:	81 e1       	ldi	r24, 0x11	; 17
 146:	88 b9       	out	0x08, r24	; 8
			if(bReset != 0){
 148:	22 23       	and	r18, r18
 14a:	21 f0       	breq	.+8      	; 0x154 <_Z4tickv+0xa6>
				SMState = SMRESET;
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	80 93 00 01 	sts	0x0100, r24
 152:	2d c0       	rjmp	.+90     	; 0x1ae <_Z4tickv+0x100>
			}else if(bIncrement == 0 && bDecrement == 0){
 154:	31 11       	cpse	r19, r1
 156:	17 c0       	rjmp	.+46     	; 0x186 <_Z4tickv+0xd8>
 158:	91 11       	cpse	r25, r1
 15a:	15 c0       	rjmp	.+42     	; 0x186 <_Z4tickv+0xd8>
				SMState = SMWAIT;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 00 01 	sts	0x0100, r24
 162:	27 c0       	rjmp	.+78     	; 0x1b2 <_Z4tickv+0x104>
			}
			break;
		case SMINC:
			DEBUGPORT = 0x02;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	88 b9       	out	0x08, r24	; 8
			SMState = RISEWAIT;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	80 93 00 01 	sts	0x0100, r24
			break;
 16e:	21 c0       	rjmp	.+66     	; 0x1b2 <_Z4tickv+0x104>
		case SMDEC:
			DEBUGPORT = 0x04;
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	88 b9       	out	0x08, r24	; 8
			SMState = RISEWAIT;
 174:	80 93 00 01 	sts	0x0100, r24
			break;
 178:	1c c0       	rjmp	.+56     	; 0x1b2 <_Z4tickv+0x104>
		case SMRESET:
			DEBUGPORT = 0x1F;
 17a:	8f e1       	ldi	r24, 0x1F	; 31
 17c:	88 b9       	out	0x08, r24	; 8
			SMState = SMWAIT;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	80 93 00 01 	sts	0x0100, r24
 184:	16 c0       	rjmp	.+44     	; 0x1b2 <_Z4tickv+0x104>
		default:
			break;
	}
	switch(SMState){
 186:	80 91 00 01 	lds	r24, 0x0100
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	51 f0       	breq	.+20     	; 0x1a2 <_Z4tickv+0xf4>
 18e:	85 30       	cpi	r24, 0x05	; 5
 190:	71 f0       	breq	.+28     	; 0x1ae <_Z4tickv+0x100>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	71 f4       	brne	.+28     	; 0x1b2 <_Z4tickv+0x104>
		case SMINIT:
			break;
		case SMWAIT:
			break;
		case SMINC:
			gCount++;
 196:	80 91 01 01 	lds	r24, 0x0101
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 01 01 	sts	0x0101, r24
			break;
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <_Z4tickv+0x104>
		case SMDEC:
			gCount--;
 1a2:	80 91 01 01 	lds	r24, 0x0101
 1a6:	81 50       	subi	r24, 0x01	; 1
 1a8:	80 93 01 01 	sts	0x0101, r24
			break;
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <_Z4tickv+0x104>
		case RISEWAIT:
			break;
		case SMRESET:
			gCount = 0;
 1ae:	10 92 01 01 	sts	0x0101, r1
			break;
		default:
			break;
	}
	OUTPUTPORT = gCount;
 1b2:	80 91 01 01 	lds	r24, 0x0101
 1b6:	85 b9       	out	0x05, r24	; 5
 1b8:	08 95       	ret
			if(bReset != 0){
				SMState = SMRESET;
			}else if(gCount < 9 && (bIncrement != 0 && bDecrement == 0) ){
				// Only Increment button pressed
				SMState = SMINC;
			}else if(gCount > 0 && (bIncrement == 0 && bDecrement != 0) ){
 1ba:	81 11       	cpse	r24, r1
 1bc:	bd cf       	rjmp	.-134    	; 0x138 <_Z4tickv+0x8a>
 1be:	e3 cf       	rjmp	.-58     	; 0x186 <_Z4tickv+0xd8>

000001c0 <main>:
	OUTPUTPORT = gCount;
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 1c0:	11 b8       	out	0x01, r1	; 1
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 1c6:	84 b9       	out	0x04, r24	; 4
 1c8:	15 b8       	out	0x05, r1	; 5
    while(1)
    {
		tick();
 1ca:	71 df       	rcall	.-286    	; 0xae <_Z4tickv>
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <main+0xa>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
