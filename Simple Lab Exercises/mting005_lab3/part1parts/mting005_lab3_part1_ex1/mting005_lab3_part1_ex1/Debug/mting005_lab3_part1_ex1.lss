
mting005_lab3_part1_ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000015e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000118  00000000  00000000  000009ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000c3  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000111  00000000  00000000  00000b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000034  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000013a  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000e0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	4f d0       	rcall	.+158    	; 0x148 <main>
  aa:	57 c0       	rjmp	.+174    	; 0x15a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z4tickv>:
const unsigned char CONFIGONE = 0x02;
const unsigned char CONFIGTWO = 0x01;
enum SMStates {SMINIT, STARTONE, WAITONE, STARTTWO, WAITTWO} SMState;

void tick(){
	unsigned char input = ~PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
  b2:	98 2f       	mov	r25, r24
  b4:	91 70       	andi	r25, 0x01	; 1
	switch(SMState){
  b6:	80 91 00 01 	lds	r24, 0x0100
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	19 f1       	breq	.+70     	; 0x104 <_Z4tickv+0x56>
  be:	28 f4       	brcc	.+10     	; 0xca <_Z4tickv+0x1c>
  c0:	88 23       	and	r24, r24
  c2:	41 f0       	breq	.+16     	; 0xd4 <_Z4tickv+0x26>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	71 f5       	brne	.+92     	; 0x124 <_Z4tickv+0x76>
  c8:	0d c0       	rjmp	.+26     	; 0xe4 <_Z4tickv+0x36>
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	99 f0       	breq	.+38     	; 0xf4 <_Z4tickv+0x46>
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	49 f5       	brne	.+82     	; 0x124 <_Z4tickv+0x76>
  d2:	20 c0       	rjmp	.+64     	; 0x114 <_Z4tickv+0x66>
		case SMINIT:
			DEBUGP = 0x10;
  d4:	80 e1       	ldi	r24, 0x10	; 16
  d6:	88 b9       	out	0x08, r24	; 8
			LEDS = CONFIGONE;
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	85 b9       	out	0x05, r24	; 5
			SMState = STARTONE;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 00 01 	sts	0x0100, r24
			break;
  e2:	29 c0       	rjmp	.+82     	; 0x136 <_Z4tickv+0x88>
		case STARTONE:
			DEBUGP = 0x01;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	88 b9       	out	0x08, r24	; 8
			if(input == 0){
  e8:	91 11       	cpse	r25, r1
  ea:	1e c0       	rjmp	.+60     	; 0x128 <_Z4tickv+0x7a>
				SMState = WAITONE;
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	80 93 00 01 	sts	0x0100, r24
  f2:	21 c0       	rjmp	.+66     	; 0x136 <_Z4tickv+0x88>
			}
			break;
		case STARTTWO:
			DEBUGP = 0x02;
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	88 b9       	out	0x08, r24	; 8
			if(input == 0){
  f8:	91 11       	cpse	r25, r1
  fa:	16 c0       	rjmp	.+44     	; 0x128 <_Z4tickv+0x7a>
				SMState = WAITTWO;
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	80 93 00 01 	sts	0x0100, r24
 102:	1c c0       	rjmp	.+56     	; 0x13c <_Z4tickv+0x8e>
			}
			break;
		case WAITONE:
			DEBUGP = 0x11;
 104:	81 e1       	ldi	r24, 0x11	; 17
 106:	88 b9       	out	0x08, r24	; 8
			if(input != 0){
 108:	99 23       	and	r25, r25
 10a:	71 f0       	breq	.+28     	; 0x128 <_Z4tickv+0x7a>
				SMState = STARTTWO;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 00 01 	sts	0x0100, r24
 112:	14 c0       	rjmp	.+40     	; 0x13c <_Z4tickv+0x8e>
			}
			break;
		case WAITTWO:
			DEBUGP = 0x12;
 114:	82 e1       	ldi	r24, 0x12	; 18
 116:	88 b9       	out	0x08, r24	; 8
			if(input != 0){
 118:	99 23       	and	r25, r25
 11a:	31 f0       	breq	.+12     	; 0x128 <_Z4tickv+0x7a>
				SMState = STARTONE;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 00 01 	sts	0x0100, r24
 122:	09 c0       	rjmp	.+18     	; 0x136 <_Z4tickv+0x88>
			}
			break;
		default:
			PORTC = 0xFF;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	88 b9       	out	0x08, r24	; 8
	}
	switch(SMState){
 128:	80 91 00 01 	lds	r24, 0x0100
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	18 f0       	brcs	.+6      	; 0x136 <_Z4tickv+0x88>
 130:	85 30       	cpi	r24, 0x05	; 5
 132:	38 f4       	brcc	.+14     	; 0x142 <_Z4tickv+0x94>
 134:	03 c0       	rjmp	.+6      	; 0x13c <_Z4tickv+0x8e>
		case SMINIT:
		case STARTONE:
		case WAITONE:
			LEDS = CONFIGONE;
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	85 b9       	out	0x05, r24	; 5
			break;
 13a:	08 95       	ret
		case STARTTWO:
		case WAITTWO:
			LEDS = CONFIGTWO;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	85 b9       	out	0x05, r24	; 5
			break;
 140:	08 95       	ret
		default:
			DEBUGP = 0x18;
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	88 b9       	out	0x08, r24	; 8
 146:	08 95       	ret

00000148 <main>:
			break;
	}
}
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // input
 148:	11 b8       	out	0x01, r1	; 1
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // output
 14e:	84 b9       	out	0x04, r24	; 4
 150:	15 b8       	out	0x05, r1	; 5
	SMState = SMINIT;
 152:	10 92 00 01 	sts	0x0100, r1
    while(1)
    {
        tick();
 156:	ab df       	rcall	.-170    	; 0xae <_Z4tickv>
 158:	fe cf       	rjmp	.-4      	; 0x156 <main+0xe>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
