
mting005_lab2_ex3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001fc  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000290  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009f3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000013a  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000bc  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000019e  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000034  00000000  00000000  00000de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000156  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008e  00000000  00000000  00000f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	a0 d0       	rcall	.+320    	; 0x1ea <main>
  aa:	a6 c0       	rjmp	.+332    	; 0x1f8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z4tickv>:
#include <avr/io.h>
enum SMStates { INIT, WAIT, WAIT_TRANS, SEQ1_1, SEQ1_2, SEQ1_TRANS, SEQ2_1, SEQ2_2, SEQ2_TRANS, SEQ3_1, SEQ3_2, SEQ3_3, SEQ3_TRANS} SMstate;

void tick(){
	unsigned char sequence = 0x00;
	unsigned char input = ~PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
  b2:	98 2f       	mov	r25, r24
  b4:	91 70       	andi	r25, 0x01	; 1
	switch(SMstate){
  b6:	80 91 00 01 	lds	r24, 0x0100
  ba:	86 30       	cpi	r24, 0x06	; 6
  bc:	e9 f1       	breq	.+122    	; 0x138 <_Z4tickv+0x8a>
  be:	70 f4       	brcc	.+28     	; 0xdc <_Z4tickv+0x2e>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	49 f1       	breq	.+82     	; 0x116 <_Z4tickv+0x68>
  c4:	30 f4       	brcc	.+12     	; 0xd2 <_Z4tickv+0x24>
  c6:	88 23       	and	r24, r24
  c8:	c9 f0       	breq	.+50     	; 0xfc <_Z4tickv+0x4e>
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	09 f0       	breq	.+2      	; 0xd0 <_Z4tickv+0x22>
  ce:	64 c0       	rjmp	.+200    	; 0x198 <_Z4tickv+0xea>
  d0:	19 c0       	rjmp	.+50     	; 0x104 <_Z4tickv+0x56>
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	69 f1       	breq	.+90     	; 0x130 <_Z4tickv+0x82>
  d6:	08 f0       	brcs	.+2      	; 0xda <_Z4tickv+0x2c>
  d8:	47 c0       	rjmp	.+142    	; 0x168 <_Z4tickv+0xba>
  da:	24 c0       	rjmp	.+72     	; 0x124 <_Z4tickv+0x76>
  dc:	89 30       	cpi	r24, 0x09	; 9
  de:	b1 f1       	breq	.+108    	; 0x14c <_Z4tickv+0x9e>
  e0:	30 f4       	brcc	.+12     	; 0xee <_Z4tickv+0x40>
  e2:	87 30       	cpi	r24, 0x07	; 7
  e4:	79 f1       	breq	.+94     	; 0x144 <_Z4tickv+0x96>
  e6:	88 30       	cpi	r24, 0x08	; 8
  e8:	09 f0       	breq	.+2      	; 0xec <_Z4tickv+0x3e>
  ea:	56 c0       	rjmp	.+172    	; 0x198 <_Z4tickv+0xea>
  ec:	45 c0       	rjmp	.+138    	; 0x178 <_Z4tickv+0xca>
  ee:	8b 30       	cpi	r24, 0x0B	; 11
  f0:	b9 f1       	breq	.+110    	; 0x160 <_Z4tickv+0xb2>
  f2:	90 f1       	brcs	.+100    	; 0x158 <_Z4tickv+0xaa>
  f4:	8c 30       	cpi	r24, 0x0C	; 12
  f6:	09 f0       	breq	.+2      	; 0xfa <_Z4tickv+0x4c>
  f8:	4f c0       	rjmp	.+158    	; 0x198 <_Z4tickv+0xea>
  fa:	46 c0       	rjmp	.+140    	; 0x188 <_Z4tickv+0xda>
		case INIT:
			SMstate = WAIT;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 00 01 	sts	0x0100, r24
			break;
 102:	71 c0       	rjmp	.+226    	; 0x1e6 <_Z4tickv+0x138>
		case WAIT:
			PORTC = 0x01;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	88 b9       	out	0x08, r24	; 8
			if(input != 0){
 108:	99 23       	and	r25, r25
 10a:	09 f4       	brne	.+2      	; 0x10e <_Z4tickv+0x60>
 10c:	45 c0       	rjmp	.+138    	; 0x198 <_Z4tickv+0xea>
				SMstate = WAIT_TRANS;
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 00 01 	sts	0x0100, r24
 114:	68 c0       	rjmp	.+208    	; 0x1e6 <_Z4tickv+0x138>
			}
			break;
		case WAIT_TRANS:
			PORTC = 0x11;
 116:	81 e1       	ldi	r24, 0x11	; 17
 118:	88 b9       	out	0x08, r24	; 8
			if(!input){
 11a:	91 11       	cpse	r25, r1
 11c:	61 c0       	rjmp	.+194    	; 0x1e0 <_Z4tickv+0x132>
				SMstate = SEQ1_1;
			}
		case SEQ1_1:
			PORTC = 0x02;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	88 b9       	out	0x08, r24	; 8
 122:	02 c0       	rjmp	.+4      	; 0x128 <_Z4tickv+0x7a>
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	88 b9       	out	0x08, r24	; 8
			if(input){
				SMstate = SEQ1_TRANS;
			}
			SMstate = SEQ1_2;
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	80 93 00 01 	sts	0x0100, r24
 12e:	49 c0       	rjmp	.+146    	; 0x1c2 <_Z4tickv+0x114>
			break;
		case SEQ1_2:
			if(input){
				SMstate = SEQ1_TRANS;
			}
			SMstate = SEQ1_1;
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	80 93 00 01 	sts	0x0100, r24
			break;
 136:	43 c0       	rjmp	.+134    	; 0x1be <_Z4tickv+0x110>
		case SEQ2_1:
			PORTC = 0x04;
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	88 b9       	out	0x08, r24	; 8
			if(input){
				SMstate = SEQ2_TRANS;
			}
			SMstate = SEQ2_2;
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	80 93 00 01 	sts	0x0100, r24
 142:	43 c0       	rjmp	.+134    	; 0x1ca <_Z4tickv+0x11c>
			break;
		case SEQ2_2:
			if(input){
				SMstate = SEQ2_TRANS;
			}
			SMstate = SEQ2_1;
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 00 01 	sts	0x0100, r24
			break;
 14a:	3d c0       	rjmp	.+122    	; 0x1c6 <_Z4tickv+0x118>
		case SEQ3_1:
			PORTC = 0x08;
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	88 b9       	out	0x08, r24	; 8
			if(input){
				SMstate = SEQ3_TRANS;
			}
			SMstate = SEQ3_2;
 150:	8a e0       	ldi	r24, 0x0A	; 10
 152:	80 93 00 01 	sts	0x0100, r24
 156:	3d c0       	rjmp	.+122    	; 0x1d2 <_Z4tickv+0x124>
			break;
		case SEQ3_2:
			if(input){
				SMstate = SEQ3_TRANS;
			}
			SMstate = SEQ3_3;
 158:	8b e0       	ldi	r24, 0x0B	; 11
 15a:	80 93 00 01 	sts	0x0100, r24
 15e:	3b c0       	rjmp	.+118    	; 0x1d6 <_Z4tickv+0x128>
			break;
		case SEQ3_3:
			if(input){
				SMstate = SEQ3_TRANS;
			}
			SMstate = SEQ3_1;
 160:	89 e0       	ldi	r24, 0x09	; 9
 162:	80 93 00 01 	sts	0x0100, r24
			break;
 166:	33 c0       	rjmp	.+102    	; 0x1ce <_Z4tickv+0x120>
		case SEQ1_TRANS:
			PORTC = 0x12;
 168:	82 e1       	ldi	r24, 0x12	; 18
 16a:	88 b9       	out	0x08, r24	; 8
			if(!input){
 16c:	91 11       	cpse	r25, r1
 16e:	14 c0       	rjmp	.+40     	; 0x198 <_Z4tickv+0xea>
				SMstate = SEQ2_1;
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	80 93 00 01 	sts	0x0100, r24
 176:	27 c0       	rjmp	.+78     	; 0x1c6 <_Z4tickv+0x118>
			}
			break;
		case SEQ2_TRANS:
			PORTC = 0x14;
 178:	84 e1       	ldi	r24, 0x14	; 20
 17a:	88 b9       	out	0x08, r24	; 8
			if(!input){
 17c:	91 11       	cpse	r25, r1
 17e:	0c c0       	rjmp	.+24     	; 0x198 <_Z4tickv+0xea>
				SMstate = SEQ3_1;
 180:	89 e0       	ldi	r24, 0x09	; 9
 182:	80 93 00 01 	sts	0x0100, r24
 186:	23 c0       	rjmp	.+70     	; 0x1ce <_Z4tickv+0x120>
			}
			break;
		case SEQ3_TRANS:
			PORTC = 0x18;
 188:	88 e1       	ldi	r24, 0x18	; 24
 18a:	88 b9       	out	0x08, r24	; 8
			if(!input){
 18c:	91 11       	cpse	r25, r1
 18e:	04 c0       	rjmp	.+8      	; 0x198 <_Z4tickv+0xea>
				SMstate = SEQ1_1;
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	80 93 00 01 	sts	0x0100, r24
 196:	13 c0       	rjmp	.+38     	; 0x1be <_Z4tickv+0x110>
			}
			break;
	}
	switch(SMstate){
 198:	80 91 00 01 	lds	r24, 0x0100
 19c:	87 30       	cpi	r24, 0x07	; 7
 19e:	a9 f0       	breq	.+42     	; 0x1ca <_Z4tickv+0x11c>
 1a0:	38 f4       	brcc	.+14     	; 0x1b0 <_Z4tickv+0x102>
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	71 f0       	breq	.+28     	; 0x1c2 <_Z4tickv+0x114>
 1a6:	86 30       	cpi	r24, 0x06	; 6
 1a8:	71 f0       	breq	.+28     	; 0x1c6 <_Z4tickv+0x118>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	b1 f4       	brne	.+44     	; 0x1da <_Z4tickv+0x12c>
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <_Z4tickv+0x110>
 1b0:	8a 30       	cpi	r24, 0x0A	; 10
 1b2:	79 f0       	breq	.+30     	; 0x1d2 <_Z4tickv+0x124>
 1b4:	8b 30       	cpi	r24, 0x0B	; 11
 1b6:	79 f0       	breq	.+30     	; 0x1d6 <_Z4tickv+0x128>
 1b8:	89 30       	cpi	r24, 0x09	; 9
 1ba:	79 f4       	brne	.+30     	; 0x1da <_Z4tickv+0x12c>
 1bc:	08 c0       	rjmp	.+16     	; 0x1ce <_Z4tickv+0x120>
			sequence = 0x00;
			break;
		case WAIT_TRANS:
			break;
		case SEQ1_1:
			sequence = 0x2A;
 1be:	8a e2       	ldi	r24, 0x2A	; 42
			break;
 1c0:	0d c0       	rjmp	.+26     	; 0x1dc <_Z4tickv+0x12e>
		case SEQ1_2:
			sequence = 0x15;
 1c2:	85 e1       	ldi	r24, 0x15	; 21
			break;
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <_Z4tickv+0x12e>
		case SEQ2_1:
			sequence = 0x33;
 1c6:	83 e3       	ldi	r24, 0x33	; 51
			break;
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <_Z4tickv+0x12e>
		case SEQ2_2:
			sequence = 0x0C;
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
			break;
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <_Z4tickv+0x12e>
		case SEQ3_1:
			sequence = 0x24;
 1ce:	84 e2       	ldi	r24, 0x24	; 36
			break;
 1d0:	05 c0       	rjmp	.+10     	; 0x1dc <_Z4tickv+0x12e>
		case SEQ3_2:
			sequence = 0x12;
 1d2:	82 e1       	ldi	r24, 0x12	; 18
			break;
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <_Z4tickv+0x12e>
		case SEQ3_3:
			sequence = 0x09;
 1d6:	89 e0       	ldi	r24, 0x09	; 9
			break;
 1d8:	01 c0       	rjmp	.+2      	; 0x1dc <_Z4tickv+0x12e>

#include <avr/io.h>
enum SMStates { INIT, WAIT, WAIT_TRANS, SEQ1_1, SEQ1_2, SEQ1_TRANS, SEQ2_1, SEQ2_2, SEQ2_TRANS, SEQ3_1, SEQ3_2, SEQ3_3, SEQ3_TRANS} SMstate;

void tick(){
	unsigned char sequence = 0x00;
 1da:	80 e0       	ldi	r24, 0x00	; 0
			//sequence = 0x00;
			break;
		default:
			break;
	}
	PORTB = sequence;
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	08 95       	ret
			PORTC = 0x11;
			if(!input){
				SMstate = SEQ1_1;
			}
		case SEQ1_1:
			PORTC = 0x02;
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	88 b9       	out	0x08, r24	; 8
 1e4:	a1 cf       	rjmp	.-190    	; 0x128 <_Z4tickv+0x7a>

#include <avr/io.h>
enum SMStates { INIT, WAIT, WAIT_TRANS, SEQ1_1, SEQ1_2, SEQ1_TRANS, SEQ2_1, SEQ2_2, SEQ2_TRANS, SEQ3_1, SEQ3_2, SEQ3_3, SEQ3_TRANS} SMstate;

void tick(){
	unsigned char sequence = 0x00;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	f9 cf       	rjmp	.-14     	; 0x1dc <_Z4tickv+0x12e>

000001ea <main>:
	PORTB = sequence;
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 1ea:	11 b8       	out	0x01, r1	; 1
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 1f0:	84 b9       	out	0x04, r24	; 4
 1f2:	15 b8       	out	0x05, r1	; 5
    while(1)
    {
		tick();
 1f4:	5c df       	rcall	.-328    	; 0xae <_Z4tickv>
 1f6:	fe cf       	rjmp	.-4      	; 0x1f4 <main+0xa>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
