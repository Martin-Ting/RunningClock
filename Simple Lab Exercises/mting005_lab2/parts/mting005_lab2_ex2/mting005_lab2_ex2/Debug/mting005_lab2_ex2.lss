
mting005_lab2_ex2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000222  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000222  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002b6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000a1b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000016c  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000bc  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000209  00000000  00000000  00000ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000044  00000000  00000000  00000eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000015e  00000000  00000000  00000ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000036  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	b1 d0       	rcall	.+354    	; 0x20c <main>
  aa:	b9 c0       	rjmp	.+370    	; 0x21e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z4tickv>:
	unsigned long delay = 0;
	while (delay++ <= 100000);
}
unsigned char count = 0x00;
void tick(){
	unsigned char bIncrement = ~PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
	unsigned char bDecrement = ~PINA & 0x02;
  b2:	90 b1       	in	r25, 0x00	; 0
  b4:	90 95       	com	r25
  b6:	29 2f       	mov	r18, r25
  b8:	22 70       	andi	r18, 0x02	; 2
	unsigned char bReset = (bIncrement != 0 && bDecrement != 0) ? 1 : 0; 
  ba:	38 2f       	mov	r19, r24
  bc:	31 70       	andi	r19, 0x01	; 1
  be:	80 ff       	sbrs	r24, 0
  c0:	05 c0       	rjmp	.+10     	; 0xcc <_Z4tickv+0x1e>
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	21 11       	cpse	r18, r1
  c6:	03 c0       	rjmp	.+6      	; 0xce <_Z4tickv+0x20>
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 c0       	rjmp	.+2      	; 0xce <_Z4tickv+0x20>
  cc:	90 e0       	ldi	r25, 0x00	; 0

	switch(SMstate){
  ce:	80 91 01 01 	lds	r24, 0x0101
  d2:	83 30       	cpi	r24, 0x03	; 3
  d4:	61 f1       	breq	.+88     	; 0x12e <_Z4tickv+0x80>
  d6:	20 f4       	brcc	.+8      	; 0xe0 <_Z4tickv+0x32>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	81 f0       	breq	.+32     	; 0xfc <_Z4tickv+0x4e>
  dc:	10 f5       	brcc	.+68     	; 0x122 <_Z4tickv+0x74>
  de:	08 c0       	rjmp	.+16     	; 0xf0 <_Z4tickv+0x42>
  e0:	85 30       	cpi	r24, 0x05	; 5
  e2:	a1 f1       	breq	.+104    	; 0x14c <_Z4tickv+0x9e>
  e4:	08 f4       	brcc	.+2      	; 0xe8 <_Z4tickv+0x3a>
  e6:	40 c0       	rjmp	.+128    	; 0x168 <_Z4tickv+0xba>
  e8:	86 30       	cpi	r24, 0x06	; 6
  ea:	09 f0       	breq	.+2      	; 0xee <_Z4tickv+0x40>
  ec:	59 c0       	rjmp	.+178    	; 0x1a0 <_Z4tickv+0xf2>
  ee:	4a c0       	rjmp	.+148    	; 0x184 <_Z4tickv+0xd6>
		case SM_INIT:
			SMstate = SM_WAIT;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 01 01 	sts	0x0101, r24
			PORTC = 0x00;
  f6:	18 b8       	out	0x08, r1	; 8
			PORTB = 0x00;
  f8:	15 b8       	out	0x05, r1	; 5
			break;
  fa:	54 c0       	rjmp	.+168    	; 0x1a4 <_Z4tickv+0xf6>
		case SM_WAIT:
			if(bReset != 0){
  fc:	99 23       	and	r25, r25
  fe:	21 f0       	breq	.+8      	; 0x108 <_Z4tickv+0x5a>
				SMstate = SM_RESET;
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	80 93 01 01 	sts	0x0101, r24
 106:	77 c0       	rjmp	.+238    	; 0x1f6 <_Z4tickv+0x148>
			} else if(bIncrement != 0){
 108:	33 23       	and	r19, r19
 10a:	21 f0       	breq	.+8      	; 0x114 <_Z4tickv+0x66>
				SMstate = SM_INC;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 01 01 	sts	0x0101, r24
 112:	5a c0       	rjmp	.+180    	; 0x1c8 <_Z4tickv+0x11a>
			} else if(bDecrement != 0){
 114:	22 23       	and	r18, r18
 116:	09 f4       	brne	.+2      	; 0x11a <_Z4tickv+0x6c>
 118:	54 c0       	rjmp	.+168    	; 0x1c2 <_Z4tickv+0x114>
				SMstate = SM_DEC;
 11a:	84 e0       	ldi	r24, 0x04	; 4
 11c:	80 93 01 01 	sts	0x0101, r24
 120:	5d c0       	rjmp	.+186    	; 0x1dc <_Z4tickv+0x12e>
			}
			break;
		case SM_RESET:
			if(bReset == 0){
 122:	91 11       	cpse	r25, r1
 124:	68 c0       	rjmp	.+208    	; 0x1f6 <_Z4tickv+0x148>
				SMstate = SM_WAIT;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	80 93 01 01 	sts	0x0101, r24
 12c:	4a c0       	rjmp	.+148    	; 0x1c2 <_Z4tickv+0x114>
			}
			break;
		case SM_INC:
			if(bReset != 0){
 12e:	99 23       	and	r25, r25
 130:	21 f0       	breq	.+8      	; 0x13a <_Z4tickv+0x8c>
				SMstate = SM_RESET;
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 01 01 	sts	0x0101, r24
 138:	5e c0       	rjmp	.+188    	; 0x1f6 <_Z4tickv+0x148>
			}else if(bIncrement != 0 && bDecrement == 0){
 13a:	33 23       	and	r19, r19
 13c:	09 f4       	brne	.+2      	; 0x140 <_Z4tickv+0x92>
 13e:	44 c0       	rjmp	.+136    	; 0x1c8 <_Z4tickv+0x11a>
 140:	21 11       	cpse	r18, r1
 142:	42 c0       	rjmp	.+132    	; 0x1c8 <_Z4tickv+0x11a>
				SMstate = SM_INC_FALL;
 144:	85 e0       	ldi	r24, 0x05	; 5
 146:	80 93 01 01 	sts	0x0101, r24
 14a:	52 c0       	rjmp	.+164    	; 0x1f0 <_Z4tickv+0x142>
			}
			break;
		case SM_INC_FALL:
			if(bReset != 0){
 14c:	99 23       	and	r25, r25
 14e:	21 f0       	breq	.+8      	; 0x158 <_Z4tickv+0xaa>
				SMstate = SM_RESET;
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	80 93 01 01 	sts	0x0101, r24
 156:	4f c0       	rjmp	.+158    	; 0x1f6 <_Z4tickv+0x148>
			} else if(bIncrement == 0 && bDecrement == 0){
 158:	31 11       	cpse	r19, r1
 15a:	4a c0       	rjmp	.+148    	; 0x1f0 <_Z4tickv+0x142>
 15c:	21 11       	cpse	r18, r1
 15e:	48 c0       	rjmp	.+144    	; 0x1f0 <_Z4tickv+0x142>
				SMstate = SM_WAIT;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 01 01 	sts	0x0101, r24
 166:	2d c0       	rjmp	.+90     	; 0x1c2 <_Z4tickv+0x114>
			}
			break;
		case SM_DEC:
			if(bReset != 0){
 168:	99 23       	and	r25, r25
 16a:	21 f0       	breq	.+8      	; 0x174 <_Z4tickv+0xc6>
				SMstate = SM_RESET;
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	80 93 01 01 	sts	0x0101, r24
 172:	41 c0       	rjmp	.+130    	; 0x1f6 <_Z4tickv+0x148>
			} else if(bIncrement == 0 && bDecrement != 0){
 174:	31 11       	cpse	r19, r1
 176:	32 c0       	rjmp	.+100    	; 0x1dc <_Z4tickv+0x12e>
 178:	22 23       	and	r18, r18
 17a:	81 f1       	breq	.+96     	; 0x1dc <_Z4tickv+0x12e>
				SMstate = SM_DEC_FALL;
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	80 93 01 01 	sts	0x0101, r24
 182:	36 c0       	rjmp	.+108    	; 0x1f0 <_Z4tickv+0x142>
			}
			break;
		case SM_DEC_FALL:
			if(bReset != 0){
 184:	99 23       	and	r25, r25
 186:	21 f0       	breq	.+8      	; 0x190 <_Z4tickv+0xe2>
				SMstate = SM_RESET;
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 01 01 	sts	0x0101, r24
 18e:	33 c0       	rjmp	.+102    	; 0x1f6 <_Z4tickv+0x148>
			} else if(bIncrement == 0 && bDecrement == 0){
 190:	31 11       	cpse	r19, r1
 192:	2e c0       	rjmp	.+92     	; 0x1f0 <_Z4tickv+0x142>
 194:	21 11       	cpse	r18, r1
 196:	2c c0       	rjmp	.+88     	; 0x1f0 <_Z4tickv+0x142>
				SMstate = SM_WAIT;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 01 01 	sts	0x0101, r24
 19e:	11 c0       	rjmp	.+34     	; 0x1c2 <_Z4tickv+0x114>
			}
			break;
		default:
			PORTC = 0x05;
 1a0:	85 e0       	ldi	r24, 0x05	; 5
 1a2:	88 b9       	out	0x08, r24	; 8
			break;
	}
	switch (SMstate){
 1a4:	80 91 01 01 	lds	r24, 0x0101
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	71 f0       	breq	.+28     	; 0x1c8 <_Z4tickv+0x11a>
 1ac:	28 f4       	brcc	.+10     	; 0x1b8 <_Z4tickv+0x10a>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	41 f0       	breq	.+16     	; 0x1c2 <_Z4tickv+0x114>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	29 f5       	brne	.+74     	; 0x200 <_Z4tickv+0x152>
 1b6:	1f c0       	rjmp	.+62     	; 0x1f6 <_Z4tickv+0x148>
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	81 f0       	breq	.+32     	; 0x1dc <_Z4tickv+0x12e>
 1bc:	87 30       	cpi	r24, 0x07	; 7
 1be:	00 f5       	brcc	.+64     	; 0x200 <_Z4tickv+0x152>
 1c0:	17 c0       	rjmp	.+46     	; 0x1f0 <_Z4tickv+0x142>
		case SM_WAIT:
			PORTC = 0x01;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	88 b9       	out	0x08, r24	; 8
			break;
 1c6:	1e c0       	rjmp	.+60     	; 0x204 <_Z4tickv+0x156>
		case SM_INC:
			PORTC = 0x02;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	88 b9       	out	0x08, r24	; 8
			if(count < 9){
 1cc:	80 91 00 01 	lds	r24, 0x0100
 1d0:	89 30       	cpi	r24, 0x09	; 9
 1d2:	c0 f4       	brcc	.+48     	; 0x204 <_Z4tickv+0x156>
				count= count + 1;
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 00 01 	sts	0x0100, r24
 1da:	14 c0       	rjmp	.+40     	; 0x204 <_Z4tickv+0x156>
			}
			break;
		case SM_DEC:
			PORTC = 0x04;
 1dc:	84 e0       	ldi	r24, 0x04	; 4
 1de:	88 b9       	out	0x08, r24	; 8
			if(count > 0){
 1e0:	80 91 00 01 	lds	r24, 0x0100
 1e4:	88 23       	and	r24, r24
 1e6:	71 f0       	breq	.+28     	; 0x204 <_Z4tickv+0x156>
				count = count - 1;
 1e8:	81 50       	subi	r24, 0x01	; 1
 1ea:	80 93 00 01 	sts	0x0100, r24
 1ee:	0a c0       	rjmp	.+20     	; 0x204 <_Z4tickv+0x156>
			}
			break;
		case SM_DEC_FALL:
		case SM_INC_FALL:
			PORTC = 0x08;
 1f0:	88 e0       	ldi	r24, 0x08	; 8
 1f2:	88 b9       	out	0x08, r24	; 8
			break;
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <_Z4tickv+0x156>
		case SM_RESET:
			PORTC = 0x03;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	88 b9       	out	0x08, r24	; 8
			count = 0;
 1fa:	10 92 00 01 	sts	0x0100, r1
			break;
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <_Z4tickv+0x156>
		default:
			PORTC = 0x05;
 200:	85 e0       	ldi	r24, 0x05	; 5
 202:	88 b9       	out	0x08, r24	; 8
			break;
	}

		PORTB = count;
 204:	80 91 00 01 	lds	r24, 0x0100
 208:	85 b9       	out	0x05, r24	; 5
 20a:	08 95       	ret

0000020c <main>:
}

int main(void)
{
	DDRA = 0x00; PORTA=0xFF;
 20c:	11 b8       	out	0x01, r1	; 1
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB=0x00;
 212:	84 b9       	out	0x04, r24	; 4
 214:	15 b8       	out	0x05, r1	; 5
	SMstate = SM_INIT; 
 216:	10 92 01 01 	sts	0x0101, r1
    while(1)
    {
		tick();
 21a:	49 df       	rcall	.-366    	; 0xae <_Z4tickv>
 21c:	fe cf       	rjmp	.-4      	; 0x21a <main+0xe>

0000021e <_exit>:
 21e:	f8 94       	cli

00000220 <__stop_program>:
 220:	ff cf       	rjmp	.-2      	; 0x220 <__stop_program>
