
mting005_lab7_ex03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000064c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000064c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800106  00800106  000006e6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000e4b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000075e  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000330  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006c3  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c4  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031a  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000071c  00000000  00000000  0000256a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  00002c86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	64 c1       	rjmp	.+712    	; 0x2fe <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	ea 00       	.word	0x00ea	; ????
  8e:	1c 01       	movw	r2, r24
  90:	1c 01       	movw	r2, r24
  92:	1c 01       	movw	r2, r24
  94:	1c 01       	movw	r2, r24
  96:	1c 01       	movw	r2, r24
  98:	1c 01       	movw	r2, r24
  9a:	1c 01       	movw	r2, r24
  9c:	1c 01       	movw	r2, r24
  9e:	1c 01       	movw	r2, r24
  a0:	1c 01       	movw	r2, r24
  a2:	1c 01       	movw	r2, r24
  a4:	1c 01       	movw	r2, r24
  a6:	1c 01       	movw	r2, r24
  a8:	1c 01       	movw	r2, r24
  aa:	1c 01       	movw	r2, r24
  ac:	1c 01       	movw	r2, r24
  ae:	1c 01       	movw	r2, r24
  b0:	1c 01       	movw	r2, r24
  b2:	1c 01       	movw	r2, r24
  b4:	1c 01       	movw	r2, r24
  b6:	1c 01       	movw	r2, r24
  b8:	1c 01       	movw	r2, r24
  ba:	1c 01       	movw	r2, r24
  bc:	1c 01       	movw	r2, r24
  be:	1c 01       	movw	r2, r24
  c0:	1c 01       	movw	r2, r24
  c2:	1c 01       	movw	r2, r24
  c4:	1c 01       	movw	r2, r24
  c6:	1c 01       	movw	r2, r24
  c8:	1c 01       	movw	r2, r24
  ca:	1c 01       	movw	r2, r24
  cc:	1c 01       	movw	r2, r24
  ce:	1c 01       	movw	r2, r24
  d0:	1c 01       	movw	r2, r24
  d2:	19 01       	movw	r2, r18
  d4:	1c 01       	movw	r2, r24
  d6:	1c 01       	movw	r2, r24
  d8:	1c 01       	movw	r2, r24
  da:	1c 01       	movw	r2, r24
  dc:	1c 01       	movw	r2, r24
  de:	1c 01       	movw	r2, r24
  e0:	16 01       	movw	r2, r12
  e2:	1c 01       	movw	r2, r24
  e4:	1c 01       	movw	r2, r24
  e6:	1c 01       	movw	r2, r24
  e8:	1c 01       	movw	r2, r24
  ea:	1c 01       	movw	r2, r24
  ec:	08 01       	movw	r0, r16
  ee:	ed 00       	.word	0x00ed	; ????
  f0:	f0 00       	.word	0x00f0	; ????
  f2:	f3 00       	.word	0x00f3	; ????
  f4:	f6 00       	.word	0x00f6	; ????
  f6:	f9 00       	.word	0x00f9	; ????
  f8:	fc 00       	.word	0x00fc	; ????
  fa:	ff 00       	.word	0x00ff	; ????
  fc:	02 01       	movw	r0, r4
  fe:	05 01       	movw	r0, r10
 100:	1c 01       	movw	r2, r24
 102:	1c 01       	movw	r2, r24
 104:	1c 01       	movw	r2, r24
 106:	1c 01       	movw	r2, r24
 108:	1c 01       	movw	r2, r24
 10a:	1c 01       	movw	r2, r24
 10c:	1c 01       	movw	r2, r24
 10e:	0a 01       	movw	r0, r20
 110:	0d 01       	movw	r0, r26
 112:	10 01       	movw	r2, r0
 114:	13 01       	movw	r2, r6

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	ec e4       	ldi	r30, 0x4C	; 76
 12a:	f6 e0       	ldi	r31, 0x06	; 6
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a6 30       	cpi	r26, 0x06	; 6
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a6 e0       	ldi	r26, 0x06	; 6
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a3 32       	cpi	r26, 0x23	; 35
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	a9 d1       	rcall	.+850    	; 0x4a0 <main>
 14e:	7c c2       	rjmp	.+1272   	; 0x648 <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <delay_ms>:
   asm("nop");
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}
void LCD_DisplayStringLong(/*unsigned char column,*/ const unsigned const* displayString){
	LCD_ClearScreen();
 152:	18 16       	cp	r1, r24
 154:	19 06       	cpc	r1, r25
 156:	5c f0       	brlt	.+22     	; 0x16e <delay_ms+0x1c>
 158:	08 95       	ret
 15a:	00 00       	nop
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
 160:	e1 f7       	brne	.-8      	; 0x15a <delay_ms+0x8>
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
 166:	48 17       	cp	r20, r24
 168:	59 07       	cpc	r21, r25
 16a:	29 f4       	brne	.+10     	; 0x176 <delay_ms+0x24>
 16c:	08 95       	ret
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	67 e0       	ldi	r22, 0x07	; 7
 174:	73 e0       	ldi	r23, 0x03	; 3
 176:	9b 01       	movw	r18, r22
 178:	f0 cf       	rjmp	.-32     	; 0x15a <delay_ms+0x8>

0000017a <LCD_WriteData>:
 17a:	5e 9a       	sbi	0x0b, 6	; 11
 17c:	88 b9       	out	0x08, r24	; 8
 17e:	5f 9a       	sbi	0x0b, 7	; 11
 180:	00 00       	nop
 182:	5f 98       	cbi	0x0b, 7	; 11
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	e4 cf       	rjmp	.-56     	; 0x152 <delay_ms>

0000018a <LCD_WriteCommand>:
 18a:	5e 98       	cbi	0x0b, 6	; 11
 18c:	88 b9       	out	0x08, r24	; 8
 18e:	5f 9a       	sbi	0x0b, 7	; 11
 190:	00 00       	nop
 192:	5f 98       	cbi	0x0b, 7	; 11
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	dc cf       	rjmp	.-72     	; 0x152 <delay_ms>

0000019a <LCD_Cursor>:
 19a:	81 31       	cpi	r24, 0x11	; 17
 19c:	10 f4       	brcc	.+4      	; 0x1a2 <LCD_Cursor+0x8>
 19e:	81 58       	subi	r24, 0x81	; 129
 1a0:	f4 cf       	rjmp	.-24     	; 0x18a <LCD_WriteCommand>
 1a2:	81 55       	subi	r24, 0x51	; 81
 1a4:	f2 cf       	rjmp	.-28     	; 0x18a <LCD_WriteCommand>

000001a6 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 1a6:	84 e6       	ldi	r24, 0x64	; 100
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	d3 df       	rcall	.-90     	; 0x152 <delay_ms>
	LCD_WriteCommand(0x38);
 1ac:	88 e3       	ldi	r24, 0x38	; 56
 1ae:	ed df       	rcall	.-38     	; 0x18a <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	eb df       	rcall	.-42     	; 0x18a <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	e9 df       	rcall	.-46     	; 0x18a <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	e7 df       	rcall	.-50     	; 0x18a <LCD_WriteCommand>
	delay_ms(10);						 
 1bc:	8a e0       	ldi	r24, 0x0A	; 10
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	c8 cf       	rjmp	.-112    	; 0x152 <delay_ms>

000001c2 <displayKPInputSMtick>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
 1c2:	e0 91 06 01 	lds	r30, 0x0106
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	e5 34       	cpi	r30, 0x45	; 69
 1ca:	f1 05       	cpc	r31, r1
 1cc:	a8 f5       	brcc	.+106    	; 0x238 <displayKPInputSMtick+0x76>
 1ce:	ea 5b       	subi	r30, 0xBA	; 186
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	34 c2       	rjmp	.+1128   	; 0x63c <__tablejump2__>
 1d4:	8f e1       	ldi	r24, 0x1F	; 31
 1d6:	85 b9       	out	0x05, r24	; 5
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <displayKPInputSMtick+0x7a>
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	2e c0       	rjmp	.+92     	; 0x23c <displayKPInputSMtick+0x7a>
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <displayKPInputSMtick+0x7a>
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	85 b9       	out	0x05, r24	; 5
 1ea:	28 c0       	rjmp	.+80     	; 0x23c <displayKPInputSMtick+0x7a>
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	85 b9       	out	0x05, r24	; 5
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <displayKPInputSMtick+0x7a>
 1f2:	85 e0       	ldi	r24, 0x05	; 5
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	22 c0       	rjmp	.+68     	; 0x23c <displayKPInputSMtick+0x7a>
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	85 b9       	out	0x05, r24	; 5
 1fc:	1f c0       	rjmp	.+62     	; 0x23c <displayKPInputSMtick+0x7a>
 1fe:	87 e0       	ldi	r24, 0x07	; 7
 200:	85 b9       	out	0x05, r24	; 5
 202:	1c c0       	rjmp	.+56     	; 0x23c <displayKPInputSMtick+0x7a>
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	85 b9       	out	0x05, r24	; 5
 208:	19 c0       	rjmp	.+50     	; 0x23c <displayKPInputSMtick+0x7a>
 20a:	89 e0       	ldi	r24, 0x09	; 9
 20c:	85 b9       	out	0x05, r24	; 5
 20e:	16 c0       	rjmp	.+44     	; 0x23c <displayKPInputSMtick+0x7a>
 210:	15 b8       	out	0x05, r1	; 5
 212:	14 c0       	rjmp	.+40     	; 0x23c <displayKPInputSMtick+0x7a>
 214:	8a e0       	ldi	r24, 0x0A	; 10
 216:	85 b9       	out	0x05, r24	; 5
 218:	11 c0       	rjmp	.+34     	; 0x23c <displayKPInputSMtick+0x7a>
 21a:	8b e0       	ldi	r24, 0x0B	; 11
 21c:	85 b9       	out	0x05, r24	; 5
 21e:	0e c0       	rjmp	.+28     	; 0x23c <displayKPInputSMtick+0x7a>
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	85 b9       	out	0x05, r24	; 5
 224:	0b c0       	rjmp	.+22     	; 0x23c <displayKPInputSMtick+0x7a>
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	85 b9       	out	0x05, r24	; 5
 22a:	08 c0       	rjmp	.+16     	; 0x23c <displayKPInputSMtick+0x7a>
 22c:	8e e0       	ldi	r24, 0x0E	; 14
 22e:	85 b9       	out	0x05, r24	; 5
 230:	05 c0       	rjmp	.+10     	; 0x23c <displayKPInputSMtick+0x7a>
 232:	8f e0       	ldi	r24, 0x0F	; 15
 234:	85 b9       	out	0x05, r24	; 5
 236:	02 c0       	rjmp	.+4      	; 0x23c <displayKPInputSMtick+0x7a>
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	85 b9       	out	0x05, r24	; 5
 23c:	80 91 04 01 	lds	r24, 0x0104
 240:	81 31       	cpi	r24, 0x11	; 17
 242:	18 f0       	brcs	.+6      	; 0x24a <displayKPInputSMtick+0x88>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 04 01 	sts	0x0104, r24
 24a:	80 91 06 01 	lds	r24, 0x0106
 24e:	90 91 0c 01 	lds	r25, 0x010C
 252:	89 17       	cp	r24, r25
 254:	c1 f0       	breq	.+48     	; 0x286 <displayKPInputSMtick+0xc4>
 256:	98 2f       	mov	r25, r24
 258:	91 54       	subi	r25, 0x41	; 65
 25a:	94 30       	cpi	r25, 0x04	; 4
 25c:	38 f0       	brcs	.+14     	; 0x26c <displayKPInputSMtick+0xaa>
 25e:	9f 5e       	subi	r25, 0xEF	; 239
 260:	9a 30       	cpi	r25, 0x0A	; 10
 262:	20 f0       	brcs	.+8      	; 0x26c <displayKPInputSMtick+0xaa>
 264:	8a 32       	cpi	r24, 0x2A	; 42
 266:	11 f0       	breq	.+4      	; 0x26c <displayKPInputSMtick+0xaa>
 268:	83 32       	cpi	r24, 0x23	; 35
 26a:	69 f4       	brne	.+26     	; 0x286 <displayKPInputSMtick+0xc4>
 26c:	80 93 0c 01 	sts	0x010C, r24
 270:	80 91 04 01 	lds	r24, 0x0104
 274:	98 2f       	mov	r25, r24
 276:	9f 5f       	subi	r25, 0xFF	; 255
 278:	90 93 04 01 	sts	0x0104, r25
 27c:	8e df       	rcall	.-228    	; 0x19a <LCD_Cursor>
 27e:	80 91 06 01 	lds	r24, 0x0106
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	7a df       	rcall	.-268    	; 0x17a <LCD_WriteData>
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	08 95       	ret

0000028c <TimerSet>:
 28c:	60 93 00 01 	sts	0x0100, r22
 290:	70 93 01 01 	sts	0x0101, r23
 294:	80 93 02 01 	sts	0x0102, r24
 298:	90 93 03 01 	sts	0x0103, r25
 29c:	60 93 07 01 	sts	0x0107, r22
 2a0:	70 93 08 01 	sts	0x0108, r23
 2a4:	80 93 09 01 	sts	0x0109, r24
 2a8:	90 93 0a 01 	sts	0x010A, r25
 2ac:	08 95       	ret

000002ae <TimerOn>:
 2ae:	8b e0       	ldi	r24, 0x0B	; 11
 2b0:	80 93 81 00 	sts	0x0081, r24
 2b4:	8d e7       	ldi	r24, 0x7D	; 125
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	90 93 89 00 	sts	0x0089, r25
 2bc:	80 93 88 00 	sts	0x0088, r24
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 6f 00 	sts	0x006F, r24
 2c6:	10 92 85 00 	sts	0x0085, r1
 2ca:	10 92 84 00 	sts	0x0084, r1
 2ce:	80 91 00 01 	lds	r24, 0x0100
 2d2:	90 91 01 01 	lds	r25, 0x0101
 2d6:	a0 91 02 01 	lds	r26, 0x0102
 2da:	b0 91 03 01 	lds	r27, 0x0103
 2de:	80 93 07 01 	sts	0x0107, r24
 2e2:	90 93 08 01 	sts	0x0108, r25
 2e6:	a0 93 09 01 	sts	0x0109, r26
 2ea:	b0 93 0a 01 	sts	0x010A, r27
 2ee:	8f b7       	in	r24, 0x3f	; 63
 2f0:	80 68       	ori	r24, 0x80	; 128
 2f2:	8f bf       	out	0x3f, r24	; 63
 2f4:	08 95       	ret

000002f6 <TimerISR>:
}

void TimerISR() {
	TimerFlag = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 0b 01 	sts	0x010B, r24
 2fc:	08 95       	ret

000002fe <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	0b b6       	in	r0, 0x3b	; 59
 30a:	0f 92       	push	r0
 30c:	2f 93       	push	r18
 30e:	3f 93       	push	r19
 310:	4f 93       	push	r20
 312:	5f 93       	push	r21
 314:	6f 93       	push	r22
 316:	7f 93       	push	r23
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
 31c:	af 93       	push	r26
 31e:	bf 93       	push	r27
 320:	ef 93       	push	r30
 322:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 324:	80 91 07 01 	lds	r24, 0x0107
 328:	90 91 08 01 	lds	r25, 0x0108
 32c:	a0 91 09 01 	lds	r26, 0x0109
 330:	b0 91 0a 01 	lds	r27, 0x010A
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	a1 09       	sbc	r26, r1
 338:	b1 09       	sbc	r27, r1
 33a:	80 93 07 01 	sts	0x0107, r24
 33e:	90 93 08 01 	sts	0x0108, r25
 342:	a0 93 09 01 	sts	0x0109, r26
 346:	b0 93 0a 01 	sts	0x010A, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 34a:	89 2b       	or	r24, r25
 34c:	8a 2b       	or	r24, r26
 34e:	8b 2b       	or	r24, r27
 350:	89 f4       	brne	.+34     	; 0x374 <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
 352:	d1 df       	rcall	.-94     	; 0x2f6 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 354:	80 91 00 01 	lds	r24, 0x0100
 358:	90 91 01 01 	lds	r25, 0x0101
 35c:	a0 91 02 01 	lds	r26, 0x0102
 360:	b0 91 03 01 	lds	r27, 0x0103
 364:	80 93 07 01 	sts	0x0107, r24
 368:	90 93 08 01 	sts	0x0108, r25
 36c:	a0 93 09 01 	sts	0x0109, r26
 370:	b0 93 0a 01 	sts	0x010A, r27
	}
}
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0b be       	out	0x3b, r0	; 59
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <GetKeypadKey>:
#define KEYPADPORT PORTA


unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
 39a:	8f ee       	ldi	r24, 0xEF	; 239
 39c:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 39e:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
 3a0:	00 9b       	sbis	0x00, 0	; 0
 3a2:	29 c0       	rjmp	.+82     	; 0x3f6 <GetKeypadKey+0x5c>
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
 3a4:	01 9b       	sbis	0x00, 1	; 0
 3a6:	29 c0       	rjmp	.+82     	; 0x3fa <GetKeypadKey+0x60>
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
 3a8:	02 9b       	sbis	0x00, 2	; 0
 3aa:	29 c0       	rjmp	.+82     	; 0x3fe <GetKeypadKey+0x64>
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
 3ac:	03 9b       	sbis	0x00, 3	; 0
 3ae:	29 c0       	rjmp	.+82     	; 0x402 <GetKeypadKey+0x68>
	
	KEYPADPORT = 0xDF;
 3b0:	8f ed       	ldi	r24, 0xDF	; 223
 3b2:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 3b4:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
 3b6:	00 9b       	sbis	0x00, 0	; 0
 3b8:	26 c0       	rjmp	.+76     	; 0x406 <GetKeypadKey+0x6c>
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
 3ba:	01 9b       	sbis	0x00, 1	; 0
 3bc:	26 c0       	rjmp	.+76     	; 0x40a <GetKeypadKey+0x70>
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
 3be:	02 9b       	sbis	0x00, 2	; 0
 3c0:	26 c0       	rjmp	.+76     	; 0x40e <GetKeypadKey+0x74>
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
 3c2:	03 9b       	sbis	0x00, 3	; 0
 3c4:	26 c0       	rjmp	.+76     	; 0x412 <GetKeypadKey+0x78>

	KEYPADPORT = 0xBF;
 3c6:	8f eb       	ldi	r24, 0xBF	; 191
 3c8:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 3ca:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
 3cc:	00 9b       	sbis	0x00, 0	; 0
 3ce:	23 c0       	rjmp	.+70     	; 0x416 <GetKeypadKey+0x7c>
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
 3d0:	01 9b       	sbis	0x00, 1	; 0
 3d2:	23 c0       	rjmp	.+70     	; 0x41a <GetKeypadKey+0x80>
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
 3d4:	02 9b       	sbis	0x00, 2	; 0
 3d6:	23 c0       	rjmp	.+70     	; 0x41e <GetKeypadKey+0x84>
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
 3d8:	03 9b       	sbis	0x00, 3	; 0
 3da:	23 c0       	rjmp	.+70     	; 0x422 <GetKeypadKey+0x88>
	
	KEYPADPORT = 0x7F;
 3dc:	8f e7       	ldi	r24, 0x7F	; 127
 3de:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 3e0:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
 3e2:	00 9b       	sbis	0x00, 0	; 0
 3e4:	20 c0       	rjmp	.+64     	; 0x426 <GetKeypadKey+0x8c>
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
 3e6:	01 9b       	sbis	0x00, 1	; 0
 3e8:	20 c0       	rjmp	.+64     	; 0x42a <GetKeypadKey+0x90>
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
 3ea:	02 9b       	sbis	0x00, 2	; 0
 3ec:	20 c0       	rjmp	.+64     	; 0x42e <GetKeypadKey+0x94>
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
 3ee:	03 99       	sbic	0x00, 3	; 0
 3f0:	20 c0       	rjmp	.+64     	; 0x432 <GetKeypadKey+0x98>
 3f2:	84 e4       	ldi	r24, 0x44	; 68
 3f4:	08 95       	ret

unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
 3f6:	81 e3       	ldi	r24, 0x31	; 49
 3f8:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
 3fa:	84 e3       	ldi	r24, 0x34	; 52
 3fc:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
 3fe:	87 e3       	ldi	r24, 0x37	; 55
 400:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
 402:	8a e2       	ldi	r24, 0x2A	; 42
 404:	08 95       	ret
	
	KEYPADPORT = 0xDF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
 406:	82 e3       	ldi	r24, 0x32	; 50
 408:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
 40a:	85 e3       	ldi	r24, 0x35	; 53
 40c:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
 40e:	88 e3       	ldi	r24, 0x38	; 56
 410:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
 412:	80 e3       	ldi	r24, 0x30	; 48
 414:	08 95       	ret

	KEYPADPORT = 0xBF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
 416:	83 e3       	ldi	r24, 0x33	; 51
 418:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
 41a:	86 e3       	ldi	r24, 0x36	; 54
 41c:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
 41e:	89 e3       	ldi	r24, 0x39	; 57
 420:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
 422:	83 e2       	ldi	r24, 0x23	; 35
 424:	08 95       	ret
	
	KEYPADPORT = 0x7F;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
 426:	81 e4       	ldi	r24, 0x41	; 65
 428:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
 42a:	82 e4       	ldi	r24, 0x42	; 66
 42c:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
 42e:	83 e4       	ldi	r24, 0x43	; 67
 430:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
	
	
	return '\0';
 432:	80 e0       	ldi	r24, 0x00	; 0
}
 434:	08 95       	ret

00000436 <ReadKeypadSMtick>:
			state = ReadKeypad_update;
			break;
	}
	switch(state){
		case ReadKeypad_update:
			KeypadInput = GetKeypadKey();
 436:	b1 df       	rcall	.-158    	; 0x39a <GetKeypadKey>
 438:	80 93 06 01 	sts	0x0106, r24
			break;
		default:
			break;
	}
	return state;
}
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	08 95       	ret

00000442 <findGCD>:
#include "keypad.h"
#include "io.h"
#include <stdio.h>

unsigned long int findGCD(unsigned long int a,		//		==== find GDC function.
						  unsigned long int b){
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	b6 2f       	mov	r27, r22
 44c:	a7 2f       	mov	r26, r23
 44e:	f8 2f       	mov	r31, r24
 450:	e9 2f       	mov	r30, r25
 452:	02 2f       	mov	r16, r18
 454:	13 2f       	mov	r17, r19
 456:	d4 2f       	mov	r29, r20
 458:	c5 2f       	mov	r28, r21
 45a:	04 c0       	rjmp	.+8      	; 0x464 <findGCD+0x22>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 45c:	05 2f       	mov	r16, r21
 45e:	14 2f       	mov	r17, r20
 460:	d3 2f       	mov	r29, r19
 462:	c2 2f       	mov	r28, r18

unsigned long int findGCD(unsigned long int a,		//		==== find GDC function.
						  unsigned long int b){
	unsigned long int c;
	while(1){
		c = a%b;
 464:	6b 2f       	mov	r22, r27
 466:	7a 2f       	mov	r23, r26
 468:	8f 2f       	mov	r24, r31
 46a:	9e 2f       	mov	r25, r30
 46c:	20 2f       	mov	r18, r16
 46e:	31 2f       	mov	r19, r17
 470:	4d 2f       	mov	r20, r29
 472:	5c 2f       	mov	r21, r28
 474:	c1 d0       	rcall	.+386    	; 0x5f8 <__udivmodsi4>
 476:	b0 2f       	mov	r27, r16
 478:	a1 2f       	mov	r26, r17
 47a:	fd 2f       	mov	r31, r29
 47c:	ec 2f       	mov	r30, r28
		if(c==0){return b;}
		a = b;
		b = c;
 47e:	56 2f       	mov	r21, r22
 480:	47 2f       	mov	r20, r23
 482:	38 2f       	mov	r19, r24
 484:	29 2f       	mov	r18, r25
unsigned long int findGCD(unsigned long int a,		//		==== find GDC function.
						  unsigned long int b){
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
 486:	67 2b       	or	r22, r23
 488:	68 2b       	or	r22, r24
 48a:	69 2b       	or	r22, r25
 48c:	39 f7       	brne	.-50     	; 0x45c <findGCD+0x1a>
		a = b;
		b = c;
	}
	return 0;
}
 48e:	60 2f       	mov	r22, r16
 490:	71 2f       	mov	r23, r17
 492:	8d 2f       	mov	r24, r29
 494:	9c 2f       	mov	r25, r28
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	08 95       	ret

000004a0 <main>:
	}
	return state;
}

int main(void)
{
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <main+0x6>
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <main+0x8>
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xF0; PORTA = 0x0F; // PORTA[3:0]: IN -- KP rows
 4ac:	80 ef       	ldi	r24, 0xF0	; 240
 4ae:	81 b9       	out	0x01, r24	; 1
 4b0:	8f e0       	ldi	r24, 0x0F	; 15
 4b2:	82 b9       	out	0x02, r24	; 2
							   // PORTA[7:4]: OUT -- select KP Columns
	DDRB = 0xFF; PORTB = 0x00; // PORTB: out -- LEDs
 4b4:	1f ef       	ldi	r17, 0xFF	; 255
 4b6:	14 b9       	out	0x04, r17	; 4
 4b8:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;	
 4ba:	17 b9       	out	0x07, r17	; 7
 4bc:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // PORTD[0:3] LEDs
 4be:	1a b9       	out	0x0a, r17	; 10
 4c0:	1b b8       	out	0x0b, r1	; 11
	unsigned long int ReadKeypadSM_calc = 50;
	unsigned long int displayKPInputSM_calc = 100;
	
	//Calculating GCD
	unsigned long int GCD = 1;
	GCD = findGCD(ReadKeypadSM_calc, displayKPInputSM_calc);
 4c2:	24 e6       	ldi	r18, 0x64	; 100
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	62 e3       	ldi	r22, 0x32	; 50
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	b7 df       	rcall	.-146    	; 0x442 <findGCD>
 4d4:	6b 01       	movw	r12, r22
 4d6:	7c 01       	movw	r14, r24
	
	//recalculate GCD periods for scheduler
	unsigned long ReadKeypadSM_period = ReadKeypadSM_calc/GCD;
 4d8:	62 e3       	ldi	r22, 0x32	; 50
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	a7 01       	movw	r20, r14
 4e2:	96 01       	movw	r18, r12
 4e4:	89 d0       	rcall	.+274    	; 0x5f8 <__udivmodsi4>
 4e6:	92 2e       	mov	r9, r18
 4e8:	a3 2e       	mov	r10, r19
 4ea:	b4 2e       	mov	r11, r20
 4ec:	05 2f       	mov	r16, r21
	unsigned long displayKPInputSM_period = displayKPInputSM_calc/GCD;
 4ee:	64 e6       	ldi	r22, 0x64	; 100
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a7 01       	movw	r20, r14
 4f8:	96 01       	movw	r18, r12
 4fa:	7e d0       	rcall	.+252    	; 0x5f8 <__udivmodsi4>
	
	// Declare an array of tasks
	static task task1, task2;
	task *tasks[] = {&task1, &task2};
 4fc:	ed e0       	ldi	r30, 0x0D	; 13
 4fe:	f1 e0       	ldi	r31, 0x01	; 1
 500:	fa 83       	std	Y+2, r31	; 0x02
 502:	e9 83       	std	Y+1, r30	; 0x01
 504:	a8 e1       	ldi	r26, 0x18	; 24
 506:	b1 e0       	ldi	r27, 0x01	; 1
 508:	bc 83       	std	Y+4, r27	; 0x04
 50a:	ab 83       	std	Y+3, r26	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	//Task 1
	task1.state = -1;
 50c:	10 83       	st	Z, r17
	task1.period = ReadKeypadSM_period;
 50e:	ee e0       	ldi	r30, 0x0E	; 14
 510:	f1 e0       	ldi	r31, 0x01	; 1
 512:	90 82       	st	Z, r9
 514:	a1 82       	std	Z+1, r10	; 0x01
 516:	b2 82       	std	Z+2, r11	; 0x02
 518:	03 83       	std	Z+3, r16	; 0x03
	task1.elapsedTime = ReadKeypadSM_period;
 51a:	e2 e1       	ldi	r30, 0x12	; 18
 51c:	f1 e0       	ldi	r31, 0x01	; 1
 51e:	90 82       	st	Z, r9
 520:	a1 82       	std	Z+1, r10	; 0x01
 522:	b2 82       	std	Z+2, r11	; 0x02
 524:	03 83       	std	Z+3, r16	; 0x03
	task1.TickFct = &ReadKeypadSMtick;
 526:	8b e1       	ldi	r24, 0x1B	; 27
 528:	92 e0       	ldi	r25, 0x02	; 2
 52a:	90 93 17 01 	sts	0x0117, r25
 52e:	80 93 16 01 	sts	0x0116, r24

	//Task 2
	task2.state = -1;
 532:	1c 93       	st	X, r17
	task2.period = displayKPInputSM_period;
 534:	e9 e1       	ldi	r30, 0x19	; 25
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	20 83       	st	Z, r18
 53a:	31 83       	std	Z+1, r19	; 0x01
 53c:	42 83       	std	Z+2, r20	; 0x02
 53e:	53 83       	std	Z+3, r21	; 0x03
	task2.elapsedTime = displayKPInputSM_period;
 540:	ed e1       	ldi	r30, 0x1D	; 29
 542:	f1 e0       	ldi	r31, 0x01	; 1
 544:	20 83       	st	Z, r18
 546:	31 83       	std	Z+1, r19	; 0x01
 548:	42 83       	std	Z+2, r20	; 0x02
 54a:	53 83       	std	Z+3, r21	; 0x03
	task2.TickFct = &displayKPInputSMtick;
 54c:	81 ee       	ldi	r24, 0xE1	; 225
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	90 93 22 01 	sts	0x0122, r25
 554:	80 93 21 01 	sts	0x0121, r24
	
	//Set Timer and turn on
	TimerSet(GCD);
 558:	c7 01       	movw	r24, r14
 55a:	b6 01       	movw	r22, r12
 55c:	97 de       	rcall	.-722    	; 0x28c <TimerSet>
	TimerOn();
 55e:	a7 de       	rcall	.-690    	; 0x2ae <TimerOn>
	
	//Init LCD
	LCD_init();
 560:	22 de       	rcall	.-956    	; 0x1a6 <LCD_init>

	//scheduler for loop iterator
	unsigned short i;
    while(1)
    {
		for(i = 0; i < numTasks; i++){
 562:	00 e0       	ldi	r16, 0x00	; 0
 564:	10 e0       	ldi	r17, 0x00	; 0
 566:	c1 2c       	mov	r12, r1
 568:	d1 2c       	mov	r13, r1
 56a:	3b c0       	rjmp	.+118    	; 0x5e2 <main+0x142>
			// task is ready to tick
			if(tasks[i]->elapsedTime == tasks[i]->period){
 56c:	f8 01       	movw	r30, r16
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	8c 0f       	add	r24, r28
 578:	9d 1f       	adc	r25, r29
 57a:	e8 0f       	add	r30, r24
 57c:	f9 1f       	adc	r31, r25
 57e:	e0 80       	ld	r14, Z
 580:	f1 80       	ldd	r15, Z+1	; 0x01
 582:	d7 01       	movw	r26, r14
 584:	15 96       	adiw	r26, 0x05	; 5
 586:	4d 91       	ld	r20, X+
 588:	5d 91       	ld	r21, X+
 58a:	6d 91       	ld	r22, X+
 58c:	7c 91       	ld	r23, X
 58e:	18 97       	sbiw	r26, 0x08	; 8
 590:	11 96       	adiw	r26, 0x01	; 1
 592:	8d 91       	ld	r24, X+
 594:	9d 91       	ld	r25, X+
 596:	0d 90       	ld	r0, X+
 598:	bc 91       	ld	r27, X
 59a:	a0 2d       	mov	r26, r0
 59c:	48 17       	cp	r20, r24
 59e:	59 07       	cpc	r21, r25
 5a0:	6a 07       	cpc	r22, r26
 5a2:	7b 07       	cpc	r23, r27
 5a4:	81 f4       	brne	.+32     	; 0x5c6 <main+0x126>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);	
 5a6:	f7 01       	movw	r30, r14
 5a8:	80 81       	ld	r24, Z
 5aa:	01 84       	ldd	r0, Z+9	; 0x09
 5ac:	f2 85       	ldd	r31, Z+10	; 0x0a
 5ae:	e0 2d       	mov	r30, r0
 5b0:	99 27       	eor	r25, r25
 5b2:	87 fd       	sbrc	r24, 7
 5b4:	90 95       	com	r25
 5b6:	09 95       	icall
 5b8:	d7 01       	movw	r26, r14
 5ba:	8c 93       	st	X, r24
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 5bc:	f7 01       	movw	r30, r14
 5be:	15 82       	std	Z+5, r1	; 0x05
 5c0:	16 82       	std	Z+6, r1	; 0x06
 5c2:	17 82       	std	Z+7, r1	; 0x07
 5c4:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 5c6:	f7 01       	movw	r30, r14
 5c8:	85 81       	ldd	r24, Z+5	; 0x05
 5ca:	96 81       	ldd	r25, Z+6	; 0x06
 5cc:	a7 81       	ldd	r26, Z+7	; 0x07
 5ce:	b0 85       	ldd	r27, Z+8	; 0x08
 5d0:	01 96       	adiw	r24, 0x01	; 1
 5d2:	a1 1d       	adc	r26, r1
 5d4:	b1 1d       	adc	r27, r1
 5d6:	85 83       	std	Z+5, r24	; 0x05
 5d8:	96 83       	std	Z+6, r25	; 0x06
 5da:	a7 83       	std	Z+7, r26	; 0x07
 5dc:	b0 87       	std	Z+8, r27	; 0x08

	//scheduler for loop iterator
	unsigned short i;
    while(1)
    {
		for(i = 0; i < numTasks; i++){
 5de:	0f 5f       	subi	r16, 0xFF	; 255
 5e0:	1f 4f       	sbci	r17, 0xFF	; 255
 5e2:	02 30       	cpi	r16, 0x02	; 2
 5e4:	11 05       	cpc	r17, r1
 5e6:	10 f2       	brcs	.-124    	; 0x56c <main+0xcc>
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 5e8:	80 91 0b 01 	lds	r24, 0x010B
 5ec:	88 23       	and	r24, r24
 5ee:	e1 f3       	breq	.-8      	; 0x5e8 <main+0x148>
		TimerFlag = 0;
 5f0:	10 92 0b 01 	sts	0x010B, r1

	//scheduler for loop iterator
	unsigned short i;
    while(1)
    {
		for(i = 0; i < numTasks; i++){
 5f4:	86 01       	movw	r16, r12
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
		TimerFlag = 0;
    }
 5f6:	f5 cf       	rjmp	.-22     	; 0x5e2 <main+0x142>

000005f8 <__udivmodsi4>:
 5f8:	a1 e2       	ldi	r26, 0x21	; 33
 5fa:	1a 2e       	mov	r1, r26
 5fc:	aa 1b       	sub	r26, r26
 5fe:	bb 1b       	sub	r27, r27
 600:	fd 01       	movw	r30, r26
 602:	0d c0       	rjmp	.+26     	; 0x61e <__udivmodsi4_ep>

00000604 <__udivmodsi4_loop>:
 604:	aa 1f       	adc	r26, r26
 606:	bb 1f       	adc	r27, r27
 608:	ee 1f       	adc	r30, r30
 60a:	ff 1f       	adc	r31, r31
 60c:	a2 17       	cp	r26, r18
 60e:	b3 07       	cpc	r27, r19
 610:	e4 07       	cpc	r30, r20
 612:	f5 07       	cpc	r31, r21
 614:	20 f0       	brcs	.+8      	; 0x61e <__udivmodsi4_ep>
 616:	a2 1b       	sub	r26, r18
 618:	b3 0b       	sbc	r27, r19
 61a:	e4 0b       	sbc	r30, r20
 61c:	f5 0b       	sbc	r31, r21

0000061e <__udivmodsi4_ep>:
 61e:	66 1f       	adc	r22, r22
 620:	77 1f       	adc	r23, r23
 622:	88 1f       	adc	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	1a 94       	dec	r1
 628:	69 f7       	brne	.-38     	; 0x604 <__udivmodsi4_loop>
 62a:	60 95       	com	r22
 62c:	70 95       	com	r23
 62e:	80 95       	com	r24
 630:	90 95       	com	r25
 632:	9b 01       	movw	r18, r22
 634:	ac 01       	movw	r20, r24
 636:	bd 01       	movw	r22, r26
 638:	cf 01       	movw	r24, r30
 63a:	08 95       	ret

0000063c <__tablejump2__>:
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31

00000640 <__tablejump__>:
 640:	05 90       	lpm	r0, Z+
 642:	f4 91       	lpm	r31, Z
 644:	e0 2d       	mov	r30, r0
 646:	09 94       	ijmp

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>
