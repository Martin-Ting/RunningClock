
mting005_lab7_ex02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  000007b6  0000084a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080014a  0080014a  00000894  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ff7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c8  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000008cb  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000387  00000000  00000000  000019b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007b6  00000000  00000000  00001d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000228  00000000  00000000  000024f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000340  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000976  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  000033d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	16 c2       	rjmp	.+1068   	; 0x462 <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c1 01       	movw	r24, r2
  8e:	f3 01       	movw	r30, r6
  90:	f3 01       	movw	r30, r6
  92:	f3 01       	movw	r30, r6
  94:	f3 01       	movw	r30, r6
  96:	f3 01       	movw	r30, r6
  98:	f3 01       	movw	r30, r6
  9a:	f3 01       	movw	r30, r6
  9c:	f3 01       	movw	r30, r6
  9e:	f3 01       	movw	r30, r6
  a0:	f3 01       	movw	r30, r6
  a2:	f3 01       	movw	r30, r6
  a4:	f3 01       	movw	r30, r6
  a6:	f3 01       	movw	r30, r6
  a8:	f3 01       	movw	r30, r6
  aa:	f3 01       	movw	r30, r6
  ac:	f3 01       	movw	r30, r6
  ae:	f3 01       	movw	r30, r6
  b0:	f3 01       	movw	r30, r6
  b2:	f3 01       	movw	r30, r6
  b4:	f3 01       	movw	r30, r6
  b6:	f3 01       	movw	r30, r6
  b8:	f3 01       	movw	r30, r6
  ba:	f3 01       	movw	r30, r6
  bc:	f3 01       	movw	r30, r6
  be:	f3 01       	movw	r30, r6
  c0:	f3 01       	movw	r30, r6
  c2:	f3 01       	movw	r30, r6
  c4:	f3 01       	movw	r30, r6
  c6:	f3 01       	movw	r30, r6
  c8:	f3 01       	movw	r30, r6
  ca:	f3 01       	movw	r30, r6
  cc:	f3 01       	movw	r30, r6
  ce:	f3 01       	movw	r30, r6
  d0:	f3 01       	movw	r30, r6
  d2:	f0 01       	movw	r30, r0
  d4:	f3 01       	movw	r30, r6
  d6:	f3 01       	movw	r30, r6
  d8:	f3 01       	movw	r30, r6
  da:	f3 01       	movw	r30, r6
  dc:	f3 01       	movw	r30, r6
  de:	f3 01       	movw	r30, r6
  e0:	ed 01       	movw	r28, r26
  e2:	f3 01       	movw	r30, r6
  e4:	f3 01       	movw	r30, r6
  e6:	f3 01       	movw	r30, r6
  e8:	f3 01       	movw	r30, r6
  ea:	f3 01       	movw	r30, r6
  ec:	df 01       	movw	r26, r30
  ee:	c4 01       	movw	r24, r8
  f0:	c7 01       	movw	r24, r14
  f2:	ca 01       	movw	r24, r20
  f4:	cd 01       	movw	r24, r26
  f6:	d0 01       	movw	r26, r0
  f8:	d3 01       	movw	r26, r6
  fa:	d6 01       	movw	r26, r12
  fc:	d9 01       	movw	r26, r18
  fe:	dc 01       	movw	r26, r24
 100:	f3 01       	movw	r30, r6
 102:	f3 01       	movw	r30, r6
 104:	f3 01       	movw	r30, r6
 106:	f3 01       	movw	r30, r6
 108:	f3 01       	movw	r30, r6
 10a:	f3 01       	movw	r30, r6
 10c:	f3 01       	movw	r30, r6
 10e:	e1 01       	movw	r28, r2
 110:	e4 01       	movw	r28, r8
 112:	e7 01       	movw	r28, r14
 114:	ea 01       	movw	r28, r20

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	e6 eb       	ldi	r30, 0xB6	; 182
 12a:	f7 e0       	ldi	r31, 0x07	; 7
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	aa 34       	cpi	r26, 0x4A	; 74
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	aa e4       	ldi	r26, 0x4A	; 74
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a6 36       	cpi	r26, 0x66	; 102
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	5b d2       	rcall	.+1206   	; 0x604 <main>
 14e:	31 c3       	rjmp	.+1634   	; 0x7b2 <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <strleng>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}
unsigned short strleng(const unsigned char* displayString){
	unsigned short size = 0;
	while(displayString[size] != '\0'){
 152:	fc 01       	movw	r30, r24
 154:	20 81       	ld	r18, Z
 156:	22 23       	and	r18, r18
 158:	49 f0       	breq	.+18     	; 0x16c <strleng+0x1a>
   SET_BIT(CONTROL_BUS,E);
   asm("nop");
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}
unsigned short strleng(const unsigned char* displayString){
 15a:	31 96       	adiw	r30, 0x01	; 1
	unsigned short size = 0;
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
	while(displayString[size] != '\0'){
		size++;
 160:	2f 5f       	subi	r18, 0xFF	; 255
 162:	3f 4f       	sbci	r19, 0xFF	; 255
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}
unsigned short strleng(const unsigned char* displayString){
	unsigned short size = 0;
	while(displayString[size] != '\0'){
 164:	81 91       	ld	r24, Z+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <strleng+0xe>
 16a:	02 c0       	rjmp	.+4      	; 0x170 <strleng+0x1e>
   asm("nop");
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}
unsigned short strleng(const unsigned char* displayString){
	unsigned short size = 0;
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
	while(displayString[size] != '\0'){
		size++;
	}

	return size;
}
 170:	82 2f       	mov	r24, r18
 172:	93 2f       	mov	r25, r19
 174:	08 95       	ret

00000176 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 176:	18 16       	cp	r1, r24
 178:	19 06       	cpc	r1, r25
 17a:	5c f0       	brlt	.+22     	; 0x192 <delay_ms+0x1c>
 17c:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 17e:	00 00       	nop
 180:	21 50       	subi	r18, 0x01	; 1
 182:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 184:	e1 f7       	brne	.-8      	; 0x17e <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	48 17       	cp	r20, r24
 18c:	59 07       	cpc	r21, r25
 18e:	29 f4       	brne	.+10     	; 0x19a <delay_ms+0x24>
 190:	08 95       	ret
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 196:	67 e0       	ldi	r22, 0x07	; 7
 198:	73 e0       	ldi	r23, 0x03	; 3
 19a:	9b 01       	movw	r18, r22
 19c:	f0 cf       	rjmp	.-32     	; 0x17e <delay_ms+0x8>

0000019e <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 19e:	5e 9a       	sbi	0x0b, 6	; 11
   DATA_BUS = Data;
 1a0:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 1a2:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 1a4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 1a6:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	e4 cf       	rjmp	.-56     	; 0x176 <delay_ms>

000001ae <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 1ae:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
 1b0:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 1b2:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 1b4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 1b6:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	dc cf       	rjmp	.-72     	; 0x176 <delay_ms>

000001be <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 1be:	81 31       	cpi	r24, 0x11	; 17
 1c0:	10 f4       	brcc	.+4      	; 0x1c6 <LCD_Cursor+0x8>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 1c2:	81 58       	subi	r24, 0x81	; 129
 1c4:	f4 cf       	rjmp	.-24     	; 0x1ae <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 1c6:	81 55       	subi	r24, 0x51	; 81
 1c8:	f2 cf       	rjmp	.-28     	; 0x1ae <LCD_WriteCommand>

000001ca <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	f0 cf       	rjmp	.-32     	; 0x1ae <LCD_WriteCommand>

000001ce <LCD_DisplayString>:
		delay_ms(750);
		LCD_ClearScreen();
		LCD_DisplayString(1, displaySubStr);
	}
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	18 2f       	mov	r17, r24
 1d6:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 1d8:	f8 df       	rcall	.-16     	; 0x1ca <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 1da:	98 81       	ld	r25, Y
 1dc:	99 23       	and	r25, r25
 1de:	51 f0       	breq	.+20     	; 0x1f4 <LCD_DisplayString+0x26>
		LCD_DisplayString(1, displaySubStr);
	}
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
 1e0:	81 2f       	mov	r24, r17
   while(*string) {
      LCD_Cursor(c++);
 1e2:	18 2f       	mov	r17, r24
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
 1e6:	eb df       	rcall	.-42     	; 0x1be <LCD_Cursor>
      LCD_WriteData(*string++);
 1e8:	89 91       	ld	r24, Y+
 1ea:	d9 df       	rcall	.-78     	; 0x19e <LCD_WriteData>
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 1ec:	81 2f       	mov	r24, r17
	}
}
void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 1ee:	98 81       	ld	r25, Y
 1f0:	91 11       	cpse	r25, r1
 1f2:	f7 cf       	rjmp	.-18     	; 0x1e2 <LCD_DisplayString+0x14>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	08 95       	ret

000001fc <LCD_DisplayStringLong>:
		size++;
	}

	return size;
}
void LCD_DisplayStringLong(/*unsigned char column,*/ const unsigned char* displayString){
 1fc:	5f 92       	push	r5
 1fe:	6f 92       	push	r6
 200:	7f 92       	push	r7
 202:	8f 92       	push	r8
 204:	9f 92       	push	r9
 206:	af 92       	push	r10
 208:	bf 92       	push	r11
 20a:	cf 92       	push	r12
 20c:	df 92       	push	r13
 20e:	ef 92       	push	r14
 210:	ff 92       	push	r15
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	a0 97       	sbiw	r28, 0x20	; 32
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	5c 01       	movw	r10, r24
	LCD_ClearScreen();
 22c:	ce df       	rcall	.-100    	; 0x1ca <LCD_ClearScreen>
	//unsigned char c = column;
	unsigned short strLength = strleng(displayString);
 22e:	c5 01       	movw	r24, r10
 230:	90 df       	rcall	.-224    	; 0x152 <strleng>
 232:	3c 01       	movw	r6, r24

	if(strLength <= 32){
 234:	81 e2       	ldi	r24, 0x21	; 33
 236:	68 16       	cp	r6, r24
 238:	71 04       	cpc	r7, r1
 23a:	38 f4       	brcc	.+14     	; 0x24a <LCD_DisplayStringLong+0x4e>
		PORTD = 0x08;
 23c:	88 e0       	ldi	r24, 0x08	; 8
 23e:	8b b9       	out	0x0b, r24	; 11
		LCD_ClearScreen();
 240:	c4 df       	rcall	.-120    	; 0x1ca <LCD_ClearScreen>
		LCD_DisplayString(1, displayString);
 242:	b5 01       	movw	r22, r10
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	c3 df       	rcall	.-122    	; 0x1ce <LCD_DisplayString>
		return;
 248:	6f c0       	rjmp	.+222    	; 0x328 <LCD_DisplayStringLong+0x12c>
	} else {
		PORTD = 0x01;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	8b b9       	out	0x0b, r24	; 11
		unsigned short startIndex = 0;
		unsigned short endIndex = 31;
		
		unsigned char displaySubStr[32];
		while(endIndex < strLength-2){
 24e:	63 01       	movw	r12, r6
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	c8 1a       	sub	r12, r24
 254:	d1 08       	sbc	r13, r1
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	c8 16       	cp	r12, r24
 25a:	d1 04       	cpc	r13, r1
 25c:	98 f5       	brcc	.+102    	; 0x2c4 <LCD_DisplayStringLong+0xc8>
		LCD_DisplayString(1, displayString);
		return;
	} else {
		PORTD = 0x01;
		unsigned short startIndex = 0;
		unsigned short endIndex = 31;
 25e:	8f e1       	ldi	r24, 0x1F	; 31
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	46 c0       	rjmp	.+140    	; 0x2f0 <LCD_DisplayStringLong+0xf4>
		
		unsigned char displaySubStr[32];
		while(endIndex < strLength-2){
			// build substr i is used as an iterator throught displayString not displaySubStr
			for(unsigned short i = startIndex; i <= endIndex; ++i){
				displaySubStr[i - startIndex] = displayString[i];
 264:	2d 91       	ld	r18, X+
 266:	21 93       	st	Z+, r18
		unsigned short endIndex = 31;
		
		unsigned char displaySubStr[32];
		while(endIndex < strLength-2){
			// build substr i is used as an iterator throught displayString not displaySubStr
			for(unsigned short i = startIndex; i <= endIndex; ++i){
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	08 17       	cp	r16, r24
 26c:	19 07       	cpc	r17, r25
 26e:	d0 f7       	brcc	.-12     	; 0x264 <LCD_DisplayStringLong+0x68>
				displaySubStr[i - startIndex] = displayString[i];
			}
			// add periods
			if(startIndex == 0){ 
 270:	e1 14       	cp	r14, r1
 272:	f1 04       	cpc	r15, r1
 274:	69 f4       	brne	.+26     	; 0x290 <LCD_DisplayStringLong+0x94>
				// add in periods at the end.
				displaySubStr[30] = displaySubStr[31] = '.';
 276:	58 a2       	std	Y+32, r5	; 0x20
 278:	5f 8e       	std	Y+31, r5	; 0x1f
			}else{// add in periods
				displaySubStr[0] = displaySubStr[1] = displaySubStr[30] = displaySubStr[31] = '.';
			}
			// display substr
			delay_ms(750);
 27a:	8e ee       	ldi	r24, 0xEE	; 238
 27c:	92 e0       	ldi	r25, 0x02	; 2
 27e:	7b df       	rcall	.-266    	; 0x176 <delay_ms>
			LCD_ClearScreen();
 280:	a4 df       	rcall	.-184    	; 0x1ca <LCD_ClearScreen>
			LCD_DisplayString(1, displaySubStr);
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	a1 df       	rcall	.-190    	; 0x1ce <LCD_DisplayString>
			
			// shift Indices
			if(startIndex == 0){ // add additional offset to bring startIndex column to 3 and not 1
				startIndex += 2;
 28c:	74 01       	movw	r14, r8
 28e:	0d c0       	rjmp	.+26     	; 0x2aa <LCD_DisplayStringLong+0xae>
			// add periods
			if(startIndex == 0){ 
				// add in periods at the end.
				displaySubStr[30] = displaySubStr[31] = '.';
			}else{// add in periods
				displaySubStr[0] = displaySubStr[1] = displaySubStr[30] = displaySubStr[31] = '.';
 290:	58 a2       	std	Y+32, r5	; 0x20
 292:	5f 8e       	std	Y+31, r5	; 0x1f
 294:	5a 82       	std	Y+2, r5	; 0x02
 296:	59 82       	std	Y+1, r5	; 0x01
			}
			// display substr
			delay_ms(750);
 298:	8e ee       	ldi	r24, 0xEE	; 238
 29a:	92 e0       	ldi	r25, 0x02	; 2
 29c:	6c df       	rcall	.-296    	; 0x176 <delay_ms>
			LCD_ClearScreen();
 29e:	95 df       	rcall	.-214    	; 0x1ca <LCD_ClearScreen>
			LCD_DisplayString(1, displaySubStr);
 2a0:	be 01       	movw	r22, r28
 2a2:	6f 5f       	subi	r22, 0xFF	; 255
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	92 df       	rcall	.-220    	; 0x1ce <LCD_DisplayString>
			// shift Indices
			if(startIndex == 0){ // add additional offset to bring startIndex column to 3 and not 1
				startIndex += 2;
			}
			startIndex += 2;
			endIndex += 2;
 2aa:	0e 5f       	subi	r16, 0xFE	; 254
 2ac:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// shift Indices
			if(startIndex == 0){ // add additional offset to bring startIndex column to 3 and not 1
				startIndex += 2;
			}
			startIndex += 2;
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	e8 0e       	add	r14, r24
 2b2:	f1 1c       	adc	r15, r1
		PORTD = 0x01;
		unsigned short startIndex = 0;
		unsigned short endIndex = 31;
		
		unsigned char displaySubStr[32];
		while(endIndex < strLength-2){
 2b4:	0c 15       	cp	r16, r12
 2b6:	1d 05       	cpc	r17, r13
 2b8:	88 f0       	brcs	.+34     	; 0x2dc <LCD_DisplayStringLong+0xe0>
		size++;
	}

	return size;
}
void LCD_DisplayStringLong(/*unsigned char column,*/ const unsigned char* displayString){
 2ba:	c3 01       	movw	r24, r6
 2bc:	82 97       	sbiw	r24, 0x22	; 34
 2be:	8e 7f       	andi	r24, 0xFE	; 254
 2c0:	81 96       	adiw	r24, 0x21	; 33
 2c2:	16 c0       	rjmp	.+44     	; 0x2f0 <LCD_DisplayStringLong+0xf4>
		LCD_DisplayString(1, displayString);
		return;
	} else {
		PORTD = 0x01;
		unsigned short startIndex = 0;
		unsigned short endIndex = 31;
 2c4:	0f e1       	ldi	r16, 0x1F	; 31
 2c6:	10 e0       	ldi	r17, 0x00	; 0
		LCD_ClearScreen();
		LCD_DisplayString(1, displayString);
		return;
	} else {
		PORTD = 0x01;
		unsigned short startIndex = 0;
 2c8:	e1 2c       	mov	r14, r1
 2ca:	f1 2c       	mov	r15, r1
			// add periods
			if(startIndex == 0){ 
				// add in periods at the end.
				displaySubStr[30] = displaySubStr[31] = '.';
			}else{// add in periods
				displaySubStr[0] = displaySubStr[1] = displaySubStr[30] = displaySubStr[31] = '.';
 2cc:	0f 2e       	mov	r0, r31
 2ce:	fe e2       	ldi	r31, 0x2E	; 46
 2d0:	5f 2e       	mov	r5, r31
 2d2:	f0 2d       	mov	r31, r0
			LCD_ClearScreen();
			LCD_DisplayString(1, displaySubStr);
			
			// shift Indices
			if(startIndex == 0){ // add additional offset to bring startIndex column to 3 and not 1
				startIndex += 2;
 2d4:	68 94       	set
 2d6:	88 24       	eor	r8, r8
 2d8:	81 f8       	bld	r8, 1
 2da:	91 2c       	mov	r9, r1
		unsigned short endIndex = 31;
		
		unsigned char displaySubStr[32];
		while(endIndex < strLength-2){
			// build substr i is used as an iterator throught displayString not displaySubStr
			for(unsigned short i = startIndex; i <= endIndex; ++i){
 2dc:	0e 15       	cp	r16, r14
 2de:	1f 05       	cpc	r17, r15
 2e0:	38 f2       	brcs	.-114    	; 0x270 <LCD_DisplayStringLong+0x74>
		size++;
	}

	return size;
}
void LCD_DisplayStringLong(/*unsigned char column,*/ const unsigned char* displayString){
 2e2:	d5 01       	movw	r26, r10
 2e4:	ae 0d       	add	r26, r14
 2e6:	bf 1d       	adc	r27, r15
 2e8:	fe 01       	movw	r30, r28
 2ea:	31 96       	adiw	r30, 0x01	; 1
 2ec:	c7 01       	movw	r24, r14
 2ee:	ba cf       	rjmp	.-140    	; 0x264 <LCD_DisplayStringLong+0x68>
				startIndex += 2;
			}
			startIndex += 2;
			endIndex += 2;
		}
		endIndex -=2;
 2f0:	02 97       	sbiw	r24, 0x02	; 2
		// fix final string
		if(endIndex <= strLength-2){
 2f2:	c8 16       	cp	r12, r24
 2f4:	d9 06       	cpc	r13, r25
 2f6:	50 f0       	brcs	.+20     	; 0x30c <LCD_DisplayStringLong+0x110>
			displaySubStr[30] = displayString[strLength-1];
 2f8:	f5 01       	movw	r30, r10
 2fa:	e6 0d       	add	r30, r6
 2fc:	f7 1d       	adc	r31, r7
 2fe:	df 01       	movw	r26, r30
 300:	11 97       	sbiw	r26, 0x01	; 1
 302:	8c 91       	ld	r24, X
 304:	8f 8f       	std	Y+31, r24	; 0x1f
			displaySubStr[31] = displayString[strLength];
 306:	80 81       	ld	r24, Z
 308:	88 a3       	std	Y+32, r24	; 0x20
 30a:	05 c0       	rjmp	.+10     	; 0x316 <LCD_DisplayStringLong+0x11a>
		}else{
			displaySubStr[31] = displayString[strLength];
 30c:	f5 01       	movw	r30, r10
 30e:	e6 0d       	add	r30, r6
 310:	f7 1d       	adc	r31, r7
 312:	80 81       	ld	r24, Z
 314:	88 a3       	std	Y+32, r24	; 0x20
		}
		// display substr
		delay_ms(750);
 316:	8e ee       	ldi	r24, 0xEE	; 238
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	2d df       	rcall	.-422    	; 0x176 <delay_ms>
		LCD_ClearScreen();
 31c:	56 df       	rcall	.-340    	; 0x1ca <LCD_ClearScreen>
		LCD_DisplayString(1, displaySubStr);
 31e:	be 01       	movw	r22, r28
 320:	6f 5f       	subi	r22, 0xFF	; 255
 322:	7f 4f       	sbci	r23, 0xFF	; 255
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	53 df       	rcall	.-346    	; 0x1ce <LCD_DisplayString>
	}
}
 328:	a0 96       	adiw	r28, 0x20	; 32
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	bf 90       	pop	r11
 346:	af 90       	pop	r10
 348:	9f 90       	pop	r9
 34a:	8f 90       	pop	r8
 34c:	7f 90       	pop	r7
 34e:	6f 90       	pop	r6
 350:	5f 90       	pop	r5
 352:	08 95       	ret

00000354 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 354:	84 e6       	ldi	r24, 0x64	; 100
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e df       	rcall	.-484    	; 0x176 <delay_ms>
	LCD_WriteCommand(0x38);
 35a:	88 e3       	ldi	r24, 0x38	; 56
 35c:	28 df       	rcall	.-432    	; 0x1ae <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 35e:	86 e0       	ldi	r24, 0x06	; 6
 360:	26 df       	rcall	.-436    	; 0x1ae <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 362:	8f e0       	ldi	r24, 0x0F	; 15
 364:	24 df       	rcall	.-440    	; 0x1ae <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	22 df       	rcall	.-444    	; 0x1ae <LCD_WriteCommand>
	delay_ms(10);						 
 36a:	8a e0       	ldi	r24, 0x0A	; 10
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	03 cf       	rjmp	.-506    	; 0x176 <delay_ms>

00000370 <displayKPInputSMtick>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
 370:	e0 91 4a 01 	lds	r30, 0x014A
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	e5 34       	cpi	r30, 0x45	; 69
 378:	f1 05       	cpc	r31, r1
 37a:	a8 f5       	brcc	.+106    	; 0x3e6 <displayKPInputSMtick+0x76>
 37c:	ea 5b       	subi	r30, 0xBA	; 186
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	12 c2       	rjmp	.+1060   	; 0x7a6 <__tablejump2__>
 382:	8f e1       	ldi	r24, 0x1F	; 31
 384:	85 b9       	out	0x05, r24	; 5
 386:	31 c0       	rjmp	.+98     	; 0x3ea <displayKPInputSMtick+0x7a>
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	85 b9       	out	0x05, r24	; 5
 38c:	2e c0       	rjmp	.+92     	; 0x3ea <displayKPInputSMtick+0x7a>
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	85 b9       	out	0x05, r24	; 5
 392:	2b c0       	rjmp	.+86     	; 0x3ea <displayKPInputSMtick+0x7a>
 394:	83 e0       	ldi	r24, 0x03	; 3
 396:	85 b9       	out	0x05, r24	; 5
 398:	28 c0       	rjmp	.+80     	; 0x3ea <displayKPInputSMtick+0x7a>
 39a:	84 e0       	ldi	r24, 0x04	; 4
 39c:	85 b9       	out	0x05, r24	; 5
 39e:	25 c0       	rjmp	.+74     	; 0x3ea <displayKPInputSMtick+0x7a>
 3a0:	85 e0       	ldi	r24, 0x05	; 5
 3a2:	85 b9       	out	0x05, r24	; 5
 3a4:	22 c0       	rjmp	.+68     	; 0x3ea <displayKPInputSMtick+0x7a>
 3a6:	86 e0       	ldi	r24, 0x06	; 6
 3a8:	85 b9       	out	0x05, r24	; 5
 3aa:	1f c0       	rjmp	.+62     	; 0x3ea <displayKPInputSMtick+0x7a>
 3ac:	87 e0       	ldi	r24, 0x07	; 7
 3ae:	85 b9       	out	0x05, r24	; 5
 3b0:	1c c0       	rjmp	.+56     	; 0x3ea <displayKPInputSMtick+0x7a>
 3b2:	88 e0       	ldi	r24, 0x08	; 8
 3b4:	85 b9       	out	0x05, r24	; 5
 3b6:	19 c0       	rjmp	.+50     	; 0x3ea <displayKPInputSMtick+0x7a>
 3b8:	89 e0       	ldi	r24, 0x09	; 9
 3ba:	85 b9       	out	0x05, r24	; 5
 3bc:	16 c0       	rjmp	.+44     	; 0x3ea <displayKPInputSMtick+0x7a>
 3be:	15 b8       	out	0x05, r1	; 5
 3c0:	14 c0       	rjmp	.+40     	; 0x3ea <displayKPInputSMtick+0x7a>
 3c2:	8a e0       	ldi	r24, 0x0A	; 10
 3c4:	85 b9       	out	0x05, r24	; 5
 3c6:	11 c0       	rjmp	.+34     	; 0x3ea <displayKPInputSMtick+0x7a>
 3c8:	8b e0       	ldi	r24, 0x0B	; 11
 3ca:	85 b9       	out	0x05, r24	; 5
 3cc:	0e c0       	rjmp	.+28     	; 0x3ea <displayKPInputSMtick+0x7a>
 3ce:	8c e0       	ldi	r24, 0x0C	; 12
 3d0:	85 b9       	out	0x05, r24	; 5
 3d2:	0b c0       	rjmp	.+22     	; 0x3ea <displayKPInputSMtick+0x7a>
 3d4:	8d e0       	ldi	r24, 0x0D	; 13
 3d6:	85 b9       	out	0x05, r24	; 5
 3d8:	08 c0       	rjmp	.+16     	; 0x3ea <displayKPInputSMtick+0x7a>
 3da:	8e e0       	ldi	r24, 0x0E	; 14
 3dc:	85 b9       	out	0x05, r24	; 5
 3de:	05 c0       	rjmp	.+10     	; 0x3ea <displayKPInputSMtick+0x7a>
 3e0:	8f e0       	ldi	r24, 0x0F	; 15
 3e2:	85 b9       	out	0x05, r24	; 5
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <displayKPInputSMtick+0x7a>
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	85 b9       	out	0x05, r24	; 5
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	08 95       	ret

000003f0 <TimerSet>:
 3f0:	60 93 00 01 	sts	0x0100, r22
 3f4:	70 93 01 01 	sts	0x0101, r23
 3f8:	80 93 02 01 	sts	0x0102, r24
 3fc:	90 93 03 01 	sts	0x0103, r25
 400:	60 93 4b 01 	sts	0x014B, r22
 404:	70 93 4c 01 	sts	0x014C, r23
 408:	80 93 4d 01 	sts	0x014D, r24
 40c:	90 93 4e 01 	sts	0x014E, r25
 410:	08 95       	ret

00000412 <TimerOn>:
 412:	8b e0       	ldi	r24, 0x0B	; 11
 414:	80 93 81 00 	sts	0x0081, r24
 418:	8d e7       	ldi	r24, 0x7D	; 125
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	90 93 89 00 	sts	0x0089, r25
 420:	80 93 88 00 	sts	0x0088, r24
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	80 93 6f 00 	sts	0x006F, r24
 42a:	10 92 85 00 	sts	0x0085, r1
 42e:	10 92 84 00 	sts	0x0084, r1
 432:	80 91 00 01 	lds	r24, 0x0100
 436:	90 91 01 01 	lds	r25, 0x0101
 43a:	a0 91 02 01 	lds	r26, 0x0102
 43e:	b0 91 03 01 	lds	r27, 0x0103
 442:	80 93 4b 01 	sts	0x014B, r24
 446:	90 93 4c 01 	sts	0x014C, r25
 44a:	a0 93 4d 01 	sts	0x014D, r26
 44e:	b0 93 4e 01 	sts	0x014E, r27
 452:	8f b7       	in	r24, 0x3f	; 63
 454:	80 68       	ori	r24, 0x80	; 128
 456:	8f bf       	out	0x3f, r24	; 63
 458:	08 95       	ret

0000045a <TimerISR>:
}

void TimerISR() {
	TimerFlag = 1;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 4f 01 	sts	0x014F, r24
 460:	08 95       	ret

00000462 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	0b b6       	in	r0, 0x3b	; 59
 46e:	0f 92       	push	r0
 470:	2f 93       	push	r18
 472:	3f 93       	push	r19
 474:	4f 93       	push	r20
 476:	5f 93       	push	r21
 478:	6f 93       	push	r22
 47a:	7f 93       	push	r23
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 488:	80 91 4b 01 	lds	r24, 0x014B
 48c:	90 91 4c 01 	lds	r25, 0x014C
 490:	a0 91 4d 01 	lds	r26, 0x014D
 494:	b0 91 4e 01 	lds	r27, 0x014E
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	a1 09       	sbc	r26, r1
 49c:	b1 09       	sbc	r27, r1
 49e:	80 93 4b 01 	sts	0x014B, r24
 4a2:	90 93 4c 01 	sts	0x014C, r25
 4a6:	a0 93 4d 01 	sts	0x014D, r26
 4aa:	b0 93 4e 01 	sts	0x014E, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 4ae:	89 2b       	or	r24, r25
 4b0:	8a 2b       	or	r24, r26
 4b2:	8b 2b       	or	r24, r27
 4b4:	89 f4       	brne	.+34     	; 0x4d8 <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
 4b6:	d1 df       	rcall	.-94     	; 0x45a <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 4b8:	80 91 00 01 	lds	r24, 0x0100
 4bc:	90 91 01 01 	lds	r25, 0x0101
 4c0:	a0 91 02 01 	lds	r26, 0x0102
 4c4:	b0 91 03 01 	lds	r27, 0x0103
 4c8:	80 93 4b 01 	sts	0x014B, r24
 4cc:	90 93 4c 01 	sts	0x014C, r25
 4d0:	a0 93 4d 01 	sts	0x014D, r26
 4d4:	b0 93 4e 01 	sts	0x014E, r27
	}
}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0b be       	out	0x3b, r0	; 59
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <GetKeypadKey>:
#define KEYPADPORT PORTA


unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
 4fe:	8f ee       	ldi	r24, 0xEF	; 239
 500:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 502:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
 504:	00 9b       	sbis	0x00, 0	; 0
 506:	29 c0       	rjmp	.+82     	; 0x55a <GetKeypadKey+0x5c>
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
 508:	01 9b       	sbis	0x00, 1	; 0
 50a:	29 c0       	rjmp	.+82     	; 0x55e <GetKeypadKey+0x60>
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
 50c:	02 9b       	sbis	0x00, 2	; 0
 50e:	29 c0       	rjmp	.+82     	; 0x562 <GetKeypadKey+0x64>
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
 510:	03 9b       	sbis	0x00, 3	; 0
 512:	29 c0       	rjmp	.+82     	; 0x566 <GetKeypadKey+0x68>
	
	KEYPADPORT = 0xDF;
 514:	8f ed       	ldi	r24, 0xDF	; 223
 516:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 518:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
 51a:	00 9b       	sbis	0x00, 0	; 0
 51c:	26 c0       	rjmp	.+76     	; 0x56a <GetKeypadKey+0x6c>
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
 51e:	01 9b       	sbis	0x00, 1	; 0
 520:	26 c0       	rjmp	.+76     	; 0x56e <GetKeypadKey+0x70>
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
 522:	02 9b       	sbis	0x00, 2	; 0
 524:	26 c0       	rjmp	.+76     	; 0x572 <GetKeypadKey+0x74>
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
 526:	03 9b       	sbis	0x00, 3	; 0
 528:	26 c0       	rjmp	.+76     	; 0x576 <GetKeypadKey+0x78>

	KEYPADPORT = 0xBF;
 52a:	8f eb       	ldi	r24, 0xBF	; 191
 52c:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 52e:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
 530:	00 9b       	sbis	0x00, 0	; 0
 532:	23 c0       	rjmp	.+70     	; 0x57a <GetKeypadKey+0x7c>
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
 534:	01 9b       	sbis	0x00, 1	; 0
 536:	23 c0       	rjmp	.+70     	; 0x57e <GetKeypadKey+0x80>
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
 538:	02 9b       	sbis	0x00, 2	; 0
 53a:	23 c0       	rjmp	.+70     	; 0x582 <GetKeypadKey+0x84>
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
 53c:	03 9b       	sbis	0x00, 3	; 0
 53e:	23 c0       	rjmp	.+70     	; 0x586 <GetKeypadKey+0x88>
	
	KEYPADPORT = 0x7F;
 540:	8f e7       	ldi	r24, 0x7F	; 127
 542:	82 b9       	out	0x02, r24	; 2
	asm("nop");			// delay to allow KEYPADPORT to stabilize
 544:	00 00       	nop
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
 546:	00 9b       	sbis	0x00, 0	; 0
 548:	20 c0       	rjmp	.+64     	; 0x58a <GetKeypadKey+0x8c>
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
 54a:	01 9b       	sbis	0x00, 1	; 0
 54c:	20 c0       	rjmp	.+64     	; 0x58e <GetKeypadKey+0x90>
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
 54e:	02 9b       	sbis	0x00, 2	; 0
 550:	20 c0       	rjmp	.+64     	; 0x592 <GetKeypadKey+0x94>
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
 552:	03 99       	sbic	0x00, 3	; 0
 554:	20 c0       	rjmp	.+64     	; 0x596 <GetKeypadKey+0x98>
 556:	84 e4       	ldi	r24, 0x44	; 68
 558:	08 95       	ret

unsigned char GetKeypadKey(){
	// Check keys in col 1
	KEYPADPORT = 0xEF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('1');}
 55a:	81 e3       	ldi	r24, 0x31	; 49
 55c:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('4');}
 55e:	84 e3       	ldi	r24, 0x34	; 52
 560:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('7');}
 562:	87 e3       	ldi	r24, 0x37	; 55
 564:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('*');}
 566:	8a e2       	ldi	r24, 0x2A	; 42
 568:	08 95       	ret
	
	KEYPADPORT = 0xDF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('2');}
 56a:	82 e3       	ldi	r24, 0x32	; 50
 56c:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('5');}
 56e:	85 e3       	ldi	r24, 0x35	; 53
 570:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('8');}
 572:	88 e3       	ldi	r24, 0x38	; 56
 574:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('0');}
 576:	80 e3       	ldi	r24, 0x30	; 48
 578:	08 95       	ret

	KEYPADPORT = 0xBF;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('3');}
 57a:	83 e3       	ldi	r24, 0x33	; 51
 57c:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('6');}
 57e:	86 e3       	ldi	r24, 0x36	; 54
 580:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('9');}
 582:	89 e3       	ldi	r24, 0x39	; 57
 584:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('#');}
 586:	83 e2       	ldi	r24, 0x23	; 35
 588:	08 95       	ret
	
	KEYPADPORT = 0x7F;
	asm("nop");			// delay to allow KEYPADPORT to stabilize
	if( (KEYPADPIN & 0x01) == 0) {return ('A');}
 58a:	81 e4       	ldi	r24, 0x41	; 65
 58c:	08 95       	ret
	if( (KEYPADPIN & 0x02) == 0) {return ('B');}
 58e:	82 e4       	ldi	r24, 0x42	; 66
 590:	08 95       	ret
	if( (KEYPADPIN & 0x04) == 0) {return ('C');}
 592:	83 e4       	ldi	r24, 0x43	; 67
 594:	08 95       	ret
	if( (KEYPADPIN & 0x08) == 0) {return ('D');}
	
	
	return '\0';
 596:	80 e0       	ldi	r24, 0x00	; 0
}
 598:	08 95       	ret

0000059a <ReadKeypadSMtick>:
			state = ReadKeypad_update;
			break;
	}
	switch(state){
		case ReadKeypad_update:
			KeypadInput = GetKeypadKey();
 59a:	b1 df       	rcall	.-158    	; 0x4fe <GetKeypadKey>
 59c:	80 93 4a 01 	sts	0x014A, r24
			break;
		default:
			break;
	}
	return state;
}
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	08 95       	ret

000005a6 <findGCD>:
#include "keypad.h"
#include "io.h"
#include <stdio.h>

unsigned long int findGCD(unsigned long int a,		//		==== find GDC function.
						  unsigned long int b){
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	b6 2f       	mov	r27, r22
 5b0:	a7 2f       	mov	r26, r23
 5b2:	f8 2f       	mov	r31, r24
 5b4:	e9 2f       	mov	r30, r25
 5b6:	02 2f       	mov	r16, r18
 5b8:	13 2f       	mov	r17, r19
 5ba:	d4 2f       	mov	r29, r20
 5bc:	c5 2f       	mov	r28, r21
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <findGCD+0x22>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 5c0:	05 2f       	mov	r16, r21
 5c2:	14 2f       	mov	r17, r20
 5c4:	d3 2f       	mov	r29, r19
 5c6:	c2 2f       	mov	r28, r18

unsigned long int findGCD(unsigned long int a,		//		==== find GDC function.
						  unsigned long int b){
	unsigned long int c;
	while(1){
		c = a%b;
 5c8:	6b 2f       	mov	r22, r27
 5ca:	7a 2f       	mov	r23, r26
 5cc:	8f 2f       	mov	r24, r31
 5ce:	9e 2f       	mov	r25, r30
 5d0:	20 2f       	mov	r18, r16
 5d2:	31 2f       	mov	r19, r17
 5d4:	4d 2f       	mov	r20, r29
 5d6:	5c 2f       	mov	r21, r28
 5d8:	c4 d0       	rcall	.+392    	; 0x762 <__udivmodsi4>
 5da:	b0 2f       	mov	r27, r16
 5dc:	a1 2f       	mov	r26, r17
 5de:	fd 2f       	mov	r31, r29
 5e0:	ec 2f       	mov	r30, r28
		if(c==0){return b;}
		a = b;
		b = c;
 5e2:	56 2f       	mov	r21, r22
 5e4:	47 2f       	mov	r20, r23
 5e6:	38 2f       	mov	r19, r24
 5e8:	29 2f       	mov	r18, r25
unsigned long int findGCD(unsigned long int a,		//		==== find GDC function.
						  unsigned long int b){
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
 5ea:	67 2b       	or	r22, r23
 5ec:	68 2b       	or	r22, r24
 5ee:	69 2b       	or	r22, r25
 5f0:	39 f7       	brne	.-50     	; 0x5c0 <findGCD+0x1a>
		a = b;
		b = c;
	}
	return 0;
}
 5f2:	60 2f       	mov	r22, r16
 5f4:	71 2f       	mov	r23, r17
 5f6:	8d 2f       	mov	r24, r29
 5f8:	9c 2f       	mov	r25, r28
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	08 95       	ret

00000604 <main>:
	}
	return state;
}

int main(void)
{
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	00 d0       	rcall	.+0      	; 0x60a <main+0x6>
 60a:	00 d0       	rcall	.+0      	; 0x60c <main+0x8>
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xF0; PORTA = 0x0F; // PORTA[3:0]: IN -- KP rows
 610:	80 ef       	ldi	r24, 0xF0	; 240
 612:	81 b9       	out	0x01, r24	; 1
 614:	8f e0       	ldi	r24, 0x0F	; 15
 616:	82 b9       	out	0x02, r24	; 2
							   // PORTA[7:4]: OUT -- select KP Columns
	DDRB = 0xFF; PORTB = 0x00; // PORTB: out -- LEDs
 618:	1f ef       	ldi	r17, 0xFF	; 255
 61a:	14 b9       	out	0x04, r17	; 4
 61c:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;	
 61e:	17 b9       	out	0x07, r17	; 7
 620:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // PORTD[0:3] LEDs
 622:	1a b9       	out	0x0a, r17	; 10
 624:	1b b8       	out	0x0b, r1	; 11
	unsigned long int ReadKeypadSM_calc = 50;
	unsigned long int displayKPInputSM_calc = 100;
	
	//Calculating GCD
	unsigned long int GCD = 1;
	GCD = findGCD(ReadKeypadSM_calc, displayKPInputSM_calc);
 626:	24 e6       	ldi	r18, 0x64	; 100
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	40 e0       	ldi	r20, 0x00	; 0
 62c:	50 e0       	ldi	r21, 0x00	; 0
 62e:	62 e3       	ldi	r22, 0x32	; 50
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	b7 df       	rcall	.-146    	; 0x5a6 <findGCD>
 638:	6b 01       	movw	r12, r22
 63a:	7c 01       	movw	r14, r24
	
	//recalculate GCD periods for scheduler
	unsigned long ReadKeypadSM_period = ReadKeypadSM_calc/GCD;
 63c:	62 e3       	ldi	r22, 0x32	; 50
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	a7 01       	movw	r20, r14
 646:	96 01       	movw	r18, r12
 648:	8c d0       	rcall	.+280    	; 0x762 <__udivmodsi4>
 64a:	92 2e       	mov	r9, r18
 64c:	a3 2e       	mov	r10, r19
 64e:	b4 2e       	mov	r11, r20
 650:	05 2f       	mov	r16, r21
	unsigned long displayKPInputSM_period = displayKPInputSM_calc/GCD;
 652:	64 e6       	ldi	r22, 0x64	; 100
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	a7 01       	movw	r20, r14
 65c:	96 01       	movw	r18, r12
 65e:	81 d0       	rcall	.+258    	; 0x762 <__udivmodsi4>
	
	// Declare an array of tasks
	static task task1, task2;
	task *tasks[] = {&task1, &task2};
 660:	e0 e5       	ldi	r30, 0x50	; 80
 662:	f1 e0       	ldi	r31, 0x01	; 1
 664:	fa 83       	std	Y+2, r31	; 0x02
 666:	e9 83       	std	Y+1, r30	; 0x01
 668:	ab e5       	ldi	r26, 0x5B	; 91
 66a:	b1 e0       	ldi	r27, 0x01	; 1
 66c:	bc 83       	std	Y+4, r27	; 0x04
 66e:	ab 83       	std	Y+3, r26	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	//Task 1
	task1.state = -1;
 670:	10 83       	st	Z, r17
	task1.period = ReadKeypadSM_period;
 672:	e1 e5       	ldi	r30, 0x51	; 81
 674:	f1 e0       	ldi	r31, 0x01	; 1
 676:	90 82       	st	Z, r9
 678:	a1 82       	std	Z+1, r10	; 0x01
 67a:	b2 82       	std	Z+2, r11	; 0x02
 67c:	03 83       	std	Z+3, r16	; 0x03
	task1.elapsedTime = ReadKeypadSM_period;
 67e:	e5 e5       	ldi	r30, 0x55	; 85
 680:	f1 e0       	ldi	r31, 0x01	; 1
 682:	90 82       	st	Z, r9
 684:	a1 82       	std	Z+1, r10	; 0x01
 686:	b2 82       	std	Z+2, r11	; 0x02
 688:	03 83       	std	Z+3, r16	; 0x03
	task1.TickFct = &ReadKeypadSMtick;
 68a:	8d ec       	ldi	r24, 0xCD	; 205
 68c:	92 e0       	ldi	r25, 0x02	; 2
 68e:	90 93 5a 01 	sts	0x015A, r25
 692:	80 93 59 01 	sts	0x0159, r24

	//Task 2
	task2.state = -1;
 696:	1c 93       	st	X, r17
	task2.period = displayKPInputSM_period;
 698:	ec e5       	ldi	r30, 0x5C	; 92
 69a:	f1 e0       	ldi	r31, 0x01	; 1
 69c:	20 83       	st	Z, r18
 69e:	31 83       	std	Z+1, r19	; 0x01
 6a0:	42 83       	std	Z+2, r20	; 0x02
 6a2:	53 83       	std	Z+3, r21	; 0x03
	task2.elapsedTime = displayKPInputSM_period;
 6a4:	e0 e6       	ldi	r30, 0x60	; 96
 6a6:	f1 e0       	ldi	r31, 0x01	; 1
 6a8:	20 83       	st	Z, r18
 6aa:	31 83       	std	Z+1, r19	; 0x01
 6ac:	42 83       	std	Z+2, r20	; 0x02
 6ae:	53 83       	std	Z+3, r21	; 0x03
	task2.TickFct = &displayKPInputSMtick;
 6b0:	88 eb       	ldi	r24, 0xB8	; 184
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	90 93 65 01 	sts	0x0165, r25
 6b8:	80 93 64 01 	sts	0x0164, r24
	
	//Set Timer and turn on
	TimerSet(GCD);
 6bc:	c7 01       	movw	r24, r14
 6be:	b6 01       	movw	r22, r12
 6c0:	97 de       	rcall	.-722    	; 0x3f0 <TimerSet>
	TimerOn();
 6c2:	a7 de       	rcall	.-690    	; 0x412 <TimerOn>
	
	//Init LCD
	LCD_init();
 6c4:	47 de       	rcall	.-882    	; 0x354 <LCD_init>
	LCD_DisplayStringLong("Welcome to the  breadboard! This text now overflows the LCD Screen!!");
 6c6:	84 e0       	ldi	r24, 0x04	; 4
 6c8:	91 e0       	ldi	r25, 0x01	; 1
 6ca:	98 dd       	rcall	.-1232   	; 0x1fc <LCD_DisplayStringLong>
	//scheduler for loop iterator
	unsigned short i;
    while(1)
    {
		for(i = 0; i < numTasks; i++){
 6cc:	00 e0       	ldi	r16, 0x00	; 0
 6ce:	10 e0       	ldi	r17, 0x00	; 0
 6d0:	c1 2c       	mov	r12, r1
 6d2:	d1 2c       	mov	r13, r1
 6d4:	3b c0       	rjmp	.+118    	; 0x74c <main+0x148>
			// task is ready to tick
			if(tasks[i]->elapsedTime == tasks[i]->period){
 6d6:	f8 01       	movw	r30, r16
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	8c 0f       	add	r24, r28
 6e2:	9d 1f       	adc	r25, r29
 6e4:	e8 0f       	add	r30, r24
 6e6:	f9 1f       	adc	r31, r25
 6e8:	e0 80       	ld	r14, Z
 6ea:	f1 80       	ldd	r15, Z+1	; 0x01
 6ec:	d7 01       	movw	r26, r14
 6ee:	15 96       	adiw	r26, 0x05	; 5
 6f0:	4d 91       	ld	r20, X+
 6f2:	5d 91       	ld	r21, X+
 6f4:	6d 91       	ld	r22, X+
 6f6:	7c 91       	ld	r23, X
 6f8:	18 97       	sbiw	r26, 0x08	; 8
 6fa:	11 96       	adiw	r26, 0x01	; 1
 6fc:	8d 91       	ld	r24, X+
 6fe:	9d 91       	ld	r25, X+
 700:	0d 90       	ld	r0, X+
 702:	bc 91       	ld	r27, X
 704:	a0 2d       	mov	r26, r0
 706:	48 17       	cp	r20, r24
 708:	59 07       	cpc	r21, r25
 70a:	6a 07       	cpc	r22, r26
 70c:	7b 07       	cpc	r23, r27
 70e:	81 f4       	brne	.+32     	; 0x730 <main+0x12c>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);	
 710:	f7 01       	movw	r30, r14
 712:	80 81       	ld	r24, Z
 714:	01 84       	ldd	r0, Z+9	; 0x09
 716:	f2 85       	ldd	r31, Z+10	; 0x0a
 718:	e0 2d       	mov	r30, r0
 71a:	99 27       	eor	r25, r25
 71c:	87 fd       	sbrc	r24, 7
 71e:	90 95       	com	r25
 720:	09 95       	icall
 722:	d7 01       	movw	r26, r14
 724:	8c 93       	st	X, r24
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 726:	f7 01       	movw	r30, r14
 728:	15 82       	std	Z+5, r1	; 0x05
 72a:	16 82       	std	Z+6, r1	; 0x06
 72c:	17 82       	std	Z+7, r1	; 0x07
 72e:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 730:	f7 01       	movw	r30, r14
 732:	85 81       	ldd	r24, Z+5	; 0x05
 734:	96 81       	ldd	r25, Z+6	; 0x06
 736:	a7 81       	ldd	r26, Z+7	; 0x07
 738:	b0 85       	ldd	r27, Z+8	; 0x08
 73a:	01 96       	adiw	r24, 0x01	; 1
 73c:	a1 1d       	adc	r26, r1
 73e:	b1 1d       	adc	r27, r1
 740:	85 83       	std	Z+5, r24	; 0x05
 742:	96 83       	std	Z+6, r25	; 0x06
 744:	a7 83       	std	Z+7, r26	; 0x07
 746:	b0 87       	std	Z+8, r27	; 0x08
	LCD_DisplayStringLong("Welcome to the  breadboard! This text now overflows the LCD Screen!!");
	//scheduler for loop iterator
	unsigned short i;
    while(1)
    {
		for(i = 0; i < numTasks; i++){
 748:	0f 5f       	subi	r16, 0xFF	; 255
 74a:	1f 4f       	sbci	r17, 0xFF	; 255
 74c:	02 30       	cpi	r16, 0x02	; 2
 74e:	11 05       	cpc	r17, r1
 750:	10 f2       	brcs	.-124    	; 0x6d6 <main+0xd2>
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 752:	80 91 4f 01 	lds	r24, 0x014F
 756:	88 23       	and	r24, r24
 758:	e1 f3       	breq	.-8      	; 0x752 <main+0x14e>
		TimerFlag = 0;
 75a:	10 92 4f 01 	sts	0x014F, r1
	LCD_DisplayStringLong("Welcome to the  breadboard! This text now overflows the LCD Screen!!");
	//scheduler for loop iterator
	unsigned short i;
    while(1)
    {
		for(i = 0; i < numTasks; i++){
 75e:	86 01       	movw	r16, r12
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
		TimerFlag = 0;
    }
 760:	f5 cf       	rjmp	.-22     	; 0x74c <main+0x148>

00000762 <__udivmodsi4>:
 762:	a1 e2       	ldi	r26, 0x21	; 33
 764:	1a 2e       	mov	r1, r26
 766:	aa 1b       	sub	r26, r26
 768:	bb 1b       	sub	r27, r27
 76a:	fd 01       	movw	r30, r26
 76c:	0d c0       	rjmp	.+26     	; 0x788 <__udivmodsi4_ep>

0000076e <__udivmodsi4_loop>:
 76e:	aa 1f       	adc	r26, r26
 770:	bb 1f       	adc	r27, r27
 772:	ee 1f       	adc	r30, r30
 774:	ff 1f       	adc	r31, r31
 776:	a2 17       	cp	r26, r18
 778:	b3 07       	cpc	r27, r19
 77a:	e4 07       	cpc	r30, r20
 77c:	f5 07       	cpc	r31, r21
 77e:	20 f0       	brcs	.+8      	; 0x788 <__udivmodsi4_ep>
 780:	a2 1b       	sub	r26, r18
 782:	b3 0b       	sbc	r27, r19
 784:	e4 0b       	sbc	r30, r20
 786:	f5 0b       	sbc	r31, r21

00000788 <__udivmodsi4_ep>:
 788:	66 1f       	adc	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	1a 94       	dec	r1
 792:	69 f7       	brne	.-38     	; 0x76e <__udivmodsi4_loop>
 794:	60 95       	com	r22
 796:	70 95       	com	r23
 798:	80 95       	com	r24
 79a:	90 95       	com	r25
 79c:	9b 01       	movw	r18, r22
 79e:	ac 01       	movw	r20, r24
 7a0:	bd 01       	movw	r22, r26
 7a2:	cf 01       	movw	r24, r30
 7a4:	08 95       	ret

000007a6 <__tablejump2__>:
 7a6:	ee 0f       	add	r30, r30
 7a8:	ff 1f       	adc	r31, r31

000007aa <__tablejump__>:
 7aa:	05 90       	lpm	r0, Z+
 7ac:	f4 91       	lpm	r31, Z
 7ae:	e0 2d       	mov	r30, r0
 7b0:	09 94       	ijmp

000007b2 <_exit>:
 7b2:	f8 94       	cli

000007b4 <__stop_program>:
 7b4:	ff cf       	rjmp	.-2      	; 0x7b4 <__stop_program>
