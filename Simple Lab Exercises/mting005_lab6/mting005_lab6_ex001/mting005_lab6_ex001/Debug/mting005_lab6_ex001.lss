
mting005_lab6_ex001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000019a  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  0000022e  2**0
                  ALLOC
  3 .stab         00001b90  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000763  00000000  00000000  00001dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002523  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  00002552  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001fd  00000000  00000000  0000259a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000106  00000000  00000000  00002797  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000024d  00000000  00000000  0000289d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000088  00000000  00000000  00002aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000187  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008d  00000000  00000000  00002cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 30       	cpi	r26, 0x09	; 9
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6b d0       	rcall	.+214    	; 0x180 <main>
  aa:	75 c0       	rjmp	.+234    	; 0x196 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <ADC_tick>:
	static unsigned short minADC;
	static unsigned short maxADC;
	static unsigned char outputPORTB;
	static unsigned char outputPORTD;
	
	switch(ADCState){
  ae:	80 91 08 01 	lds	r24, 0x0108
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	c1 f0       	breq	.+48     	; 0xe6 <ADC_tick+0x38>
  b6:	20 f0       	brcs	.+8      	; 0xc0 <ADC_tick+0x12>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	09 f0       	breq	.+2      	; 0xbe <ADC_tick+0x10>
  bc:	41 c0       	rjmp	.+130    	; 0x140 <ADC_tick+0x92>
  be:	32 c0       	rjmp	.+100    	; 0x124 <ADC_tick+0x76>
		case INIT:
			currentADC = 0;
  c0:	10 92 01 01 	sts	0x0101, r1
  c4:	10 92 00 01 	sts	0x0100, r1
			outputPORTB = 0;
  c8:	10 92 02 01 	sts	0x0102, r1
			outputPORTD = 0;
  cc:	10 92 03 01 	sts	0x0103, r1
			minADC = 0xFFFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	9f ef       	ldi	r25, 0xFF	; 255
  d4:	90 93 05 01 	sts	0x0105, r25
  d8:	80 93 04 01 	sts	0x0104, r24
			maxADC = 0x0000;
  dc:	10 92 07 01 	sts	0x0107, r1
  e0:	10 92 06 01 	sts	0x0106, r1
			break;
  e4:	2d c0       	rjmp	.+90     	; 0x140 <ADC_tick+0x92>
		case READADC:
			currentADC = ADC;
  e6:	80 91 78 00 	lds	r24, 0x0078
  ea:	90 91 79 00 	lds	r25, 0x0079
  ee:	90 93 01 01 	sts	0x0101, r25
  f2:	80 93 00 01 	sts	0x0100, r24
			if(currentADC < minADC){
  f6:	20 91 04 01 	lds	r18, 0x0104
  fa:	30 91 05 01 	lds	r19, 0x0105
  fe:	82 17       	cp	r24, r18
 100:	93 07       	cpc	r25, r19
 102:	20 f4       	brcc	.+8      	; 0x10c <ADC_tick+0x5e>
				minADC = currentADC;
 104:	90 93 05 01 	sts	0x0105, r25
 108:	80 93 04 01 	sts	0x0104, r24
			}
			if(currentADC > maxADC){
 10c:	20 91 06 01 	lds	r18, 0x0106
 110:	30 91 07 01 	lds	r19, 0x0107
 114:	28 17       	cp	r18, r24
 116:	39 07       	cpc	r19, r25
 118:	98 f4       	brcc	.+38     	; 0x140 <ADC_tick+0x92>
				maxADC = currentADC;
 11a:	90 93 07 01 	sts	0x0107, r25
 11e:	80 93 06 01 	sts	0x0106, r24
 122:	0e c0       	rjmp	.+28     	; 0x140 <ADC_tick+0x92>
			}
			break;
		case OUTPUTLED:
			currentADC = minADC;
 124:	80 91 04 01 	lds	r24, 0x0104
 128:	90 91 05 01 	lds	r25, 0x0105
 12c:	90 93 01 01 	sts	0x0101, r25
 130:	80 93 00 01 	sts	0x0100, r24
			//shift bits
			outputPORTB = currentADC & 0x00FF;
 134:	80 93 02 01 	sts	0x0102, r24
			// mask top 8 bits of currentADC then shift over 2 bytes
			// mask out first two bits of the shifted value for output to two LEDs
			outputPORTD = ((currentADC & 0x0300) >> 8) & 0x03; 
 138:	88 27       	eor	r24, r24
 13a:	93 70       	andi	r25, 0x03	; 3
 13c:	90 93 03 01 	sts	0x0103, r25
			break;
		default:
			break;
	};
	PORTB = outputPORTB;
 140:	80 91 02 01 	lds	r24, 0x0102
 144:	85 b9       	out	0x05, r24	; 5
	PORTD = outputPORTD;
 146:	80 91 03 01 	lds	r24, 0x0103
 14a:	8b b9       	out	0x0b, r24	; 11
	switch(ADCState){
 14c:	80 91 08 01 	lds	r24, 0x0108
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	41 f0       	breq	.+16     	; 0x164 <ADC_tick+0xb6>
 154:	18 f0       	brcs	.+6      	; 0x15c <ADC_tick+0xae>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	61 f4       	brne	.+24     	; 0x172 <ADC_tick+0xc4>
 15a:	08 c0       	rjmp	.+16     	; 0x16c <ADC_tick+0xbe>
		case INIT:
			ADCState = READADC;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 08 01 	sts	0x0108, r24
			break;
 162:	08 95       	ret
		case READADC:
			ADCState = OUTPUTLED;
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 08 01 	sts	0x0108, r24
			break;
 16a:	08 95       	ret
		case OUTPUTLED:
			ADCState= READADC;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 08 01 	sts	0x0108, r24
 172:	08 95       	ret

00000174 <ADC_init>:
		ADC_tick();
	}
}

void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 174:	ea e7       	ldi	r30, 0x7A	; 122
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	80 6e       	ori	r24, 0xE0	; 224
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <main>:
}


int main(void)
{
	ADC_init();
 180:	f9 df       	rcall	.-14     	; 0x174 <ADC_init>
	DDRA = 0x00; PORTA = 0xFF;
 182:	11 b8       	out	0x01, r1	; 1
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 188:	84 b9       	out	0x04, r24	; 4
 18a:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x0F;
 18c:	8a b9       	out	0x0a, r24	; 10
 18e:	8f e0       	ldi	r24, 0x0F	; 15
 190:	8b b9       	out	0x0b, r24	; 11
	while(1){
		ADC_tick();
 192:	8d df       	rcall	.-230    	; 0xae <ADC_tick>
 194:	fe cf       	rjmp	.-4      	; 0x192 <main+0x12>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
