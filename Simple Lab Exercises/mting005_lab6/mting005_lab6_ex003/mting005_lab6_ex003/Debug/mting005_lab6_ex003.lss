
mting005_lab6_ex003.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000172  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000172  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000206  2**0
                  ALLOC
  3 .stab         00001b90  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000763  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000024fb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  0000252a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001f3  00000000  00000000  00002572  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000010d  00000000  00000000  00002765  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000210  00000000  00000000  00002872  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000088  00000000  00000000  00002a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000182  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000008d  00000000  00000000  00002c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  00002d1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e7       	ldi	r30, 0x72	; 114
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 30       	cpi	r26, 0x05	; 5
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4b d0       	rcall	.+150    	; 0x15a <main>
  c4:	54 c0       	rjmp	.+168    	; 0x16e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_tick>:
const unsigned short MAXADCVALUE = 0x01c1;
const unsigned short MINADCVALUE = 0x0010;
void ADC_tick(){
	
	static unsigned short midadcvalue;
	midadcvalue = MINADCVALUE + ( (MAXADCVALUE - MINADCVALUE) / 2 );
  c8:	88 ee       	ldi	r24, 0xE8	; 232
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 01 01 	sts	0x0101, r25
  d0:	80 93 00 01 	sts	0x0100, r24
	static unsigned short currentADC;
	currentADC = ADC;
  d4:	80 91 78 00 	lds	r24, 0x0078
  d8:	90 91 79 00 	lds	r25, 0x0079
  dc:	90 93 03 01 	sts	0x0103, r25
  e0:	80 93 02 01 	sts	0x0102, r24
	switch(ADCState){
  e4:	80 91 04 01 	lds	r24, 0x0104
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	19 f0       	breq	.+6      	; 0xf2 <ADC_tick+0x2a>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	29 f4       	brne	.+10     	; 0xfa <ADC_tick+0x32>
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <ADC_tick+0x2e>
		case INIT:
			break;
		case LED_OFF:
			PORTB = 0x00;
  f2:	15 b8       	out	0x05, r1	; 5
			break;
  f4:	02 c0       	rjmp	.+4      	; 0xfa <ADC_tick+0x32>
		case LED_ON:
			PORTB = 0xFF;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	85 b9       	out	0x05, r24	; 5
			break;
		default:
			break;
	}
	switch(ADCState){
  fa:	80 91 04 01 	lds	r24, 0x0104
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	41 f0       	breq	.+16     	; 0x112 <ADC_tick+0x4a>
 102:	18 f0       	brcs	.+6      	; 0x10a <ADC_tick+0x42>
 104:	82 30       	cpi	r24, 0x02	; 2
 106:	11 f5       	brne	.+68     	; 0x14c <ADC_tick+0x84>
 108:	13 c0       	rjmp	.+38     	; 0x130 <ADC_tick+0x68>
		case INIT:
			ADCState = LED_OFF;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 04 01 	sts	0x0104, r24
			break;
 110:	08 95       	ret
		case LED_OFF:
			if(currentADC < midadcvalue){
 112:	20 91 02 01 	lds	r18, 0x0102
 116:	30 91 03 01 	lds	r19, 0x0103
 11a:	80 91 00 01 	lds	r24, 0x0100
 11e:	90 91 01 01 	lds	r25, 0x0101
 122:	28 17       	cp	r18, r24
 124:	39 07       	cpc	r19, r25
 126:	90 f4       	brcc	.+36     	; 0x14c <ADC_tick+0x84>
				ADCState = LED_ON;
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 93 04 01 	sts	0x0104, r24
 12e:	08 95       	ret
			}
			break;
		case LED_ON:
			if(currentADC >= midadcvalue){
 130:	20 91 02 01 	lds	r18, 0x0102
 134:	30 91 03 01 	lds	r19, 0x0103
 138:	80 91 00 01 	lds	r24, 0x0100
 13c:	90 91 01 01 	lds	r25, 0x0101
 140:	28 17       	cp	r18, r24
 142:	39 07       	cpc	r19, r25
 144:	18 f0       	brcs	.+6      	; 0x14c <ADC_tick+0x84>
				ADCState = LED_OFF;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	80 93 04 01 	sts	0x0104, r24
 14c:	08 95       	ret

0000014e <ADC_init>:
		ADC_tick();
	}
}

void ADC_init(){
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 6e       	ori	r24, 0xE0	; 224
 156:	80 83       	st	Z, r24
 158:	08 95       	ret

0000015a <main>:
}


int main(void)
{
	ADC_init();
 15a:	f9 df       	rcall	.-14     	; 0x14e <ADC_init>
	DDRA = 0x00; PORTA = 0xFF;
 15c:	11 b8       	out	0x01, r1	; 1
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 162:	84 b9       	out	0x04, r24	; 4
 164:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 166:	8a b9       	out	0x0a, r24	; 10
 168:	1b b8       	out	0x0b, r1	; 11
	while(1){
		ADC_tick();
 16a:	ae df       	rcall	.-164    	; 0xc8 <ADC_tick>
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x10>

0000016e <_exit>:
 16e:	f8 94       	cli

00000170 <__stop_program>:
 170:	ff cf       	rjmp	.-2      	; 0x170 <__stop_program>
