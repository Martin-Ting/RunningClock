
mting005_lab5_ex001.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000041a  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800104  00800104  000004b2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000070  00000000  00000000  00000c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000417  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000013f  00000000  00000000  000010cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003e3  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000010c  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000cb  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	71 c0       	rjmp	.+226    	; 0x118 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e1       	ldi	r30, 0x1A	; 26
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	53 d1       	rcall	.+678    	; 0x36a <main>
  c4:	a8 c1       	rjmp	.+848    	; 0x416 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	_avr_timer_cntcurr = _avr_timer_M;
	// Enable global interrupts: 0x80: 10000000
	SREG |= 0x80;
}
void TimerOff(){
	TCCR1B=0x00;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25
  d6:	80 93 88 00 	sts	0x0088, r24
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24
  e0:	10 92 85 00 	sts	0x0085, r1
  e4:	10 92 84 00 	sts	0x0084, r1
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	90 91 01 01 	lds	r25, 0x0101
  f0:	a0 91 02 01 	lds	r26, 0x0102
  f4:	b0 91 03 01 	lds	r27, 0x0103
  f8:	80 93 04 01 	sts	0x0104, r24
  fc:	90 93 05 01 	sts	0x0105, r25
 100:	a0 93 06 01 	sts	0x0106, r26
 104:	b0 93 07 01 	sts	0x0107, r27
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <TimerISR>:
}
void TimerISR(){
	TimerFlag = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 08 01 	sts	0x0108, r24
 116:	08 95       	ret

00000118 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1ms per TimerOn settings)
	
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
 13e:	80 91 04 01 	lds	r24, 0x0104
 142:	90 91 05 01 	lds	r25, 0x0105
 146:	a0 91 06 01 	lds	r26, 0x0106
 14a:	b0 91 07 01 	lds	r27, 0x0107
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	a1 09       	sbc	r26, r1
 152:	b1 09       	sbc	r27, r1
 154:	80 93 04 01 	sts	0x0104, r24
 158:	90 93 05 01 	sts	0x0105, r25
 15c:	a0 93 06 01 	sts	0x0106, r26
 160:	b0 93 07 01 	sts	0x0107, r27
	if(_avr_timer_cntcurr == 0){
 164:	89 2b       	or	r24, r25
 166:	8a 2b       	or	r24, r26
 168:	8b 2b       	or	r24, r27
 16a:	89 f4       	brne	.+34     	; 0x18e <__vector_13+0x76>
		// call the isr that the user uses
		TimerISR();
 16c:	d1 df       	rcall	.-94     	; 0x110 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 16e:	80 91 00 01 	lds	r24, 0x0100
 172:	90 91 01 01 	lds	r25, 0x0101
 176:	a0 91 02 01 	lds	r26, 0x0102
 17a:	b0 91 03 01 	lds	r27, 0x0103
 17e:	80 93 04 01 	sts	0x0104, r24
 182:	90 93 05 01 	sts	0x0105, r25
 186:	a0 93 06 01 	sts	0x0106, r26
 18a:	b0 93 07 01 	sts	0x0107, r27
	}
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0b be       	out	0x3b, r0	; 59
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <TimerSet>:
//
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M){
	_avr_timer_M = M;
 1b4:	60 93 00 01 	sts	0x0100, r22
 1b8:	70 93 01 01 	sts	0x0101, r23
 1bc:	80 93 02 01 	sts	0x0102, r24
 1c0:	90 93 03 01 	sts	0x0103, r25
	_avr_timer_cntcurr = _avr_timer_M;
 1c4:	60 93 04 01 	sts	0x0104, r22
 1c8:	70 93 05 01 	sts	0x0105, r23
 1cc:	80 93 06 01 	sts	0x0106, r24
 1d0:	90 93 07 01 	sts	0x0107, r25
 1d4:	08 95       	ret

000001d6 <tickThreeLED>:
}
// =============================================================================
enum ThreeTickLEDStates {TLINIT, ONE, TWO, THREE } StateTL;
unsigned char threeLED;
void tickThreeLED(){
	switch (StateTL){
 1d6:	80 91 11 01 	lds	r24, 0x0111
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	51 f0       	breq	.+20     	; 0x1f2 <tickThreeLED+0x1c>
 1de:	28 f0       	brcs	.+10     	; 0x1ea <tickThreeLED+0x14>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	59 f0       	breq	.+22     	; 0x1fa <tickThreeLED+0x24>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	89 f4       	brne	.+34     	; 0x20a <tickThreeLED+0x34>
 1e8:	0c c0       	rjmp	.+24     	; 0x202 <tickThreeLED+0x2c>
		case TLINIT:
			threeLED = 0x01;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 13 01 	sts	0x0113, r24
 1f0:	14 c0       	rjmp	.+40     	; 0x21a <tickThreeLED+0x44>
			break;
		case ONE:
			threeLED = 0x01;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 13 01 	sts	0x0113, r24
 1f8:	14 c0       	rjmp	.+40     	; 0x222 <tickThreeLED+0x4c>
			break;
		case TWO:
			threeLED = 0x02;
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	80 93 13 01 	sts	0x0113, r24
 200:	14 c0       	rjmp	.+40     	; 0x22a <tickThreeLED+0x54>
			break;
		case THREE:
			threeLED = 0x04;
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	80 93 13 01 	sts	0x0113, r24
 208:	14 c0       	rjmp	.+40     	; 0x232 <tickThreeLED+0x5c>
			break;
		default:
			break;
	}
	switch (StateTL){
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	51 f0       	breq	.+20     	; 0x222 <tickThreeLED+0x4c>
 20e:	28 f0       	brcs	.+10     	; 0x21a <tickThreeLED+0x44>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	59 f0       	breq	.+22     	; 0x22a <tickThreeLED+0x54>
 214:	83 30       	cpi	r24, 0x03	; 3
 216:	89 f4       	brne	.+34     	; 0x23a <tickThreeLED+0x64>
 218:	0c c0       	rjmp	.+24     	; 0x232 <tickThreeLED+0x5c>
		case TLINIT:
			StateTL = ONE;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 11 01 	sts	0x0111, r24
			break;
 220:	08 95       	ret
		case ONE:
			StateTL = TWO;
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 11 01 	sts	0x0111, r24
			break;
 228:	08 95       	ret
		case TWO:
			StateTL = THREE;
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	80 93 11 01 	sts	0x0111, r24
			break;
 230:	08 95       	ret
		case THREE:
			StateTL = ONE;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 11 01 	sts	0x0111, r24
			break;
 238:	08 95       	ret
		default:
			StateTL = TLINIT;
 23a:	10 92 11 01 	sts	0x0111, r1
 23e:	08 95       	ret

00000240 <tickBlinkLED>:
	}
}
enum BlinkLEDStates {BLINIT, ON, OFF} StateBL;
unsigned char blinkLED;
void tickBlinkLED(){
	switch (StateBL){
 240:	80 91 16 01 	lds	r24, 0x0116
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	41 f0       	breq	.+16     	; 0x258 <tickBlinkLED+0x18>
 248:	18 f0       	brcs	.+6      	; 0x250 <tickBlinkLED+0x10>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	61 f4       	brne	.+24     	; 0x266 <tickBlinkLED+0x26>
 24e:	08 c0       	rjmp	.+16     	; 0x260 <tickBlinkLED+0x20>
		case BLINIT:
			blinkLED = 0x08;
 250:	88 e0       	ldi	r24, 0x08	; 8
 252:	80 93 10 01 	sts	0x0110, r24
 256:	0d c0       	rjmp	.+26     	; 0x272 <tickBlinkLED+0x32>
			break;
		case ON:
			blinkLED = 0x08;
 258:	88 e0       	ldi	r24, 0x08	; 8
 25a:	80 93 10 01 	sts	0x0110, r24
 25e:	0d c0       	rjmp	.+26     	; 0x27a <tickBlinkLED+0x3a>
			break;
		case OFF:
			blinkLED = 0x00;
 260:	10 92 10 01 	sts	0x0110, r1
 264:	0e c0       	rjmp	.+28     	; 0x282 <tickBlinkLED+0x42>
			break;
		default:
			break;
	};
	switch (StateBL){
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	41 f0       	breq	.+16     	; 0x27a <tickBlinkLED+0x3a>
 26a:	18 f0       	brcs	.+6      	; 0x272 <tickBlinkLED+0x32>
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	61 f4       	brne	.+24     	; 0x288 <tickBlinkLED+0x48>
 270:	08 c0       	rjmp	.+16     	; 0x282 <tickBlinkLED+0x42>
		case BLINIT:
			StateBL = ON;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 16 01 	sts	0x0116, r24
			break;
 278:	08 95       	ret
		case ON:
			StateBL = OFF;
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	80 93 16 01 	sts	0x0116, r24
			break;
 280:	08 95       	ret
		case OFF:
			StateBL = ON;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	80 93 16 01 	sts	0x0116, r24
 288:	08 95       	ret

0000028a <tickSpeaker>:
unsigned char outputLED;
enum SpeakerStates { SPINIT, SPON, SPOFF } StateSP;
unsigned char speakerStatus;
unsigned char speakerFreq;
void tickSpeaker(){
	unsigned char bInput = ~PINA & 0x01;
 28a:	90 b1       	in	r25, 0x00	; 0
	switch(StateSP){
 28c:	80 91 12 01 	lds	r24, 0x0112
 290:	81 30       	cpi	r24, 0x01	; 1
 292:	39 f0       	breq	.+14     	; 0x2a2 <tickSpeaker+0x18>
 294:	18 f0       	brcs	.+6      	; 0x29c <tickSpeaker+0x12>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	59 f4       	brne	.+22     	; 0x2b0 <tickSpeaker+0x26>
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <tickSpeaker+0x20>
		case SPINIT:
			speakerStatus = 0x00;
 29c:	10 92 17 01 	sts	0x0117, r1
 2a0:	0d c0       	rjmp	.+26     	; 0x2bc <tickSpeaker+0x32>
			break;
		case SPON:
			speakerStatus = 0x10;
 2a2:	80 e1       	ldi	r24, 0x10	; 16
 2a4:	80 93 17 01 	sts	0x0117, r24
 2a8:	0d c0       	rjmp	.+26     	; 0x2c4 <tickSpeaker+0x3a>
			break;
		case SPOFF:
			speakerStatus = 0x00;
 2aa:	10 92 17 01 	sts	0x0117, r1
 2ae:	0e c0       	rjmp	.+28     	; 0x2cc <tickSpeaker+0x42>
			break;
	}
	switch(StateSP){
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	41 f0       	breq	.+16     	; 0x2c4 <tickSpeaker+0x3a>
 2b4:	18 f0       	brcs	.+6      	; 0x2bc <tickSpeaker+0x32>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	71 f4       	brne	.+28     	; 0x2d6 <tickSpeaker+0x4c>
 2ba:	08 c0       	rjmp	.+16     	; 0x2cc <tickSpeaker+0x42>
		case SPINIT:
			StateSP = SPOFF;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	80 93 12 01 	sts	0x0112, r24
			break;
 2c2:	08 95       	ret
		case SPON:
			StateSP = SPOFF;
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	80 93 12 01 	sts	0x0112, r24
			break;
 2ca:	08 95       	ret
		case SPOFF:
			if(bInput != 0){
 2cc:	90 fd       	sbrc	r25, 0
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <tickSpeaker+0x4c>
				StateSP = SPON;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	80 93 12 01 	sts	0x0112, r24
 2d6:	08 95       	ret

000002d8 <tickFreqChanger>:
	}
	//PORTB = outputLED | speakerStatus;
}
enum FreqChangerStates { FCINIT, CHECKINPUTS } StateFC;
void tickFreqChanger(){
	unsigned char bLowFreq = ~PINA & 0x02;
 2d8:	20 b1       	in	r18, 0x00	; 0
	unsigned char bHighFreq = ~PINA & 0x04;
 2da:	90 b1       	in	r25, 0x00	; 0
	unsigned char bExtra = ~PINA & 0x08;
 2dc:	30 b1       	in	r19, 0x00	; 0
	unsigned char bLol = ~PINA & 0x10;
 2de:	40 b1       	in	r20, 0x00	; 0
	unsigned char bSuperLowFreq = ((bLowFreq != 0 && bHighFreq != 0) ? 1 : 0);
	
	switch(StateFC){
 2e0:	80 91 14 01 	lds	r24, 0x0114
 2e4:	88 23       	and	r24, r24
 2e6:	19 f0       	breq	.+6      	; 0x2ee <tickFreqChanger+0x16>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	01 f5       	brne	.+64     	; 0x32c <tickFreqChanger+0x54>
 2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <tickFreqChanger+0x1e>
		case FCINIT:
			StateFC = CHECKINPUTS;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 14 01 	sts	0x0114, r24
			break;
 2f4:	08 95       	ret
		case CHECKINPUTS:
			if(bHighFreq != 0){
 2f6:	92 fd       	sbrc	r25, 2
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <tickFreqChanger+0x2a>
				speakerFreq = 3;
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	80 93 0e 01 	sts	0x010E, r24
 300:	08 95       	ret
			}else if(bLowFreq != 0){
 302:	21 fd       	sbrc	r18, 1
 304:	04 c0       	rjmp	.+8      	; 0x30e <tickFreqChanger+0x36>
				speakerFreq = 6;
 306:	86 e0       	ldi	r24, 0x06	; 6
 308:	80 93 0e 01 	sts	0x010E, r24
 30c:	08 95       	ret
			}else if(bExtra != 0){
 30e:	33 fd       	sbrc	r19, 3
 310:	04 c0       	rjmp	.+8      	; 0x31a <tickFreqChanger+0x42>
				speakerFreq = 2;
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	80 93 0e 01 	sts	0x010E, r24
 318:	08 95       	ret
			} else if (bLol != 0){
 31a:	44 fd       	sbrc	r20, 4
 31c:	04 c0       	rjmp	.+8      	; 0x326 <tickFreqChanger+0x4e>
				speakerFreq = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 0e 01 	sts	0x010E, r24
 324:	08 95       	ret
			} else {
				speakerFreq = 4;
 326:	84 e0       	ldi	r24, 0x04	; 4
 328:	80 93 0e 01 	sts	0x010E, r24
 32c:	08 95       	ret

0000032e <tickOutput>:
	};
}
enum OutputStates {OPINIT, OUTPUT} StateOP;
unsigned char outputLED;
void tickOutput(){
	switch(StateOP){
 32e:	80 91 15 01 	lds	r24, 0x0115
 332:	81 11       	cpse	r24, r1
 334:	04 c0       	rjmp	.+8      	; 0x33e <tickOutput+0x10>
		case OPINIT:
			StateOP = OUTPUT;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 15 01 	sts	0x0115, r24
 33c:	08 c0       	rjmp	.+16     	; 0x34e <tickOutput+0x20>
		case OUTPUT:
			break;
		default:
			break;
	}
	switch(StateOP){
 33e:	88 23       	and	r24, r24
 340:	19 f0       	breq	.+6      	; 0x348 <tickOutput+0x1a>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	71 f4       	brne	.+28     	; 0x362 <tickOutput+0x34>
 346:	03 c0       	rjmp	.+6      	; 0x34e <tickOutput+0x20>
		case OPINIT:
			outputLED = 0x00;
 348:	10 92 0f 01 	sts	0x010F, r1
			break;
 34c:	0a c0       	rjmp	.+20     	; 0x362 <tickOutput+0x34>
		case OUTPUT:
			outputLED = threeLED | blinkLED | speakerStatus;
 34e:	90 91 10 01 	lds	r25, 0x0110
 352:	80 91 13 01 	lds	r24, 0x0113
 356:	89 2b       	or	r24, r25
 358:	90 91 17 01 	lds	r25, 0x0117
 35c:	89 2b       	or	r24, r25
 35e:	80 93 0f 01 	sts	0x010F, r24
			break;
		default:
			break;
	}
	PORTB = outputLED;
 362:	80 91 0f 01 	lds	r24, 0x010F
 366:	85 b9       	out	0x05, r24	; 5
 368:	08 95       	ret

0000036a <main>:
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 36a:	11 b8       	out	0x01, r1	; 1
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 370:	84 b9       	out	0x04, r24	; 4
 372:	15 b8       	out	0x05, r1	; 5
	TimerSet(1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	1b df       	rcall	.-458    	; 0x1b4 <TimerSet>
	TimerOn();
 37e:	a4 de       	rcall	.-696    	; 0xc8 <TimerOn>
	StateBL = BLINIT;
 380:	10 92 16 01 	sts	0x0116, r1
	StateTL = TLINIT;
 384:	10 92 11 01 	sts	0x0111, r1
	StateOP = OPINIT;
 388:	10 92 15 01 	sts	0x0115, r1
	StateSP = SPINIT;
 38c:	10 92 12 01 	sts	0x0112, r1
	StateFC = FCINIT;
 390:	10 92 14 01 	sts	0x0114, r1
	static unsigned char counterSP = 0;
	static unsigned short counterTB = 0;
	static unsigned short counterTL = 0;
	speakerStatus = 0;
 394:	10 92 17 01 	sts	0x0117, r1
	speakerFreq = 3;
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	80 93 0e 01 	sts	0x010E, r24
    while(1)
    {
		tickFreqChanger();
 39e:	9c df       	rcall	.-200    	; 0x2d8 <tickFreqChanger>
		if(counterSP++ >= speakerFreq){//% 2 == 0){
 3a0:	80 91 09 01 	lds	r24, 0x0109
 3a4:	90 91 0e 01 	lds	r25, 0x010E
 3a8:	28 2f       	mov	r18, r24
 3aa:	2f 5f       	subi	r18, 0xFF	; 255
 3ac:	20 93 09 01 	sts	0x0109, r18
 3b0:	89 17       	cp	r24, r25
 3b2:	18 f0       	brcs	.+6      	; 0x3ba <main+0x50>
			tickSpeaker();
 3b4:	6a df       	rcall	.-300    	; 0x28a <tickSpeaker>
			counterSP = 0;
 3b6:	10 92 09 01 	sts	0x0109, r1
		}
		if(counterTB++ >= 1000){//% 300 == 0){
 3ba:	80 91 0a 01 	lds	r24, 0x010A
 3be:	90 91 0b 01 	lds	r25, 0x010B
 3c2:	9c 01       	movw	r18, r24
 3c4:	2f 5f       	subi	r18, 0xFF	; 255
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
 3c8:	30 93 0b 01 	sts	0x010B, r19
 3cc:	20 93 0a 01 	sts	0x010A, r18
 3d0:	88 3e       	cpi	r24, 0xE8	; 232
 3d2:	93 40       	sbci	r25, 0x03	; 3
 3d4:	28 f0       	brcs	.+10     	; 0x3e0 <main+0x76>
			tickBlinkLED();
 3d6:	34 df       	rcall	.-408    	; 0x240 <tickBlinkLED>
			counterTB = 0;
 3d8:	10 92 0b 01 	sts	0x010B, r1
 3dc:	10 92 0a 01 	sts	0x010A, r1
		}
		if(counterTL++ >= 300){//% 1000 == 0){
 3e0:	80 91 0c 01 	lds	r24, 0x010C
 3e4:	90 91 0d 01 	lds	r25, 0x010D
 3e8:	9c 01       	movw	r18, r24
 3ea:	2f 5f       	subi	r18, 0xFF	; 255
 3ec:	3f 4f       	sbci	r19, 0xFF	; 255
 3ee:	30 93 0d 01 	sts	0x010D, r19
 3f2:	20 93 0c 01 	sts	0x010C, r18
 3f6:	8c 32       	cpi	r24, 0x2C	; 44
 3f8:	91 40       	sbci	r25, 0x01	; 1
 3fa:	28 f0       	brcs	.+10     	; 0x406 <main+0x9c>
			tickThreeLED();
 3fc:	ec de       	rcall	.-552    	; 0x1d6 <tickThreeLED>
			counterTL = 0;
 3fe:	10 92 0d 01 	sts	0x010D, r1
 402:	10 92 0c 01 	sts	0x010C, r1
		}
		tickOutput();
 406:	93 df       	rcall	.-218    	; 0x32e <tickOutput>
		while(!TimerFlag);
 408:	80 91 08 01 	lds	r24, 0x0108
 40c:	88 23       	and	r24, r24
 40e:	e1 f3       	breq	.-8      	; 0x408 <main+0x9e>
		TimerFlag = 0;
 410:	10 92 08 01 	sts	0x0108, r1
    }
 414:	c4 cf       	rjmp	.-120    	; 0x39e <main+0x34>

00000416 <_exit>:
 416:	f8 94       	cli

00000418 <__stop_program>:
 418:	ff cf       	rjmp	.-2      	; 0x418 <__stop_program>
