
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800138  00800138  000004dc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c3f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000062d  00000000  00000000  00000d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000285  00000000  00000000  00001343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000545  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00001b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000023e  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000318  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	71 c0       	rjmp	.+226    	; 0x118 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 33       	cpi	r26, 0x38	; 56
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e3       	ldi	r26, 0x38	; 56
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 34       	cpi	r26, 0x41	; 65
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	37 d1       	rcall	.+622    	; 0x332 <main>
  c4:	a3 c1       	rjmp	.+838    	; 0x40c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	_avr_timer_cntcurr = _avr_timer_M;
	// Enable global interrupts: 0x80: 10000000
	SREG |= 0x80;
}
void TimerOff(){
	TCCR1B=0x00;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25
  d6:	80 93 88 00 	sts	0x0088, r24
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24
  e0:	10 92 85 00 	sts	0x0085, r1
  e4:	10 92 84 00 	sts	0x0084, r1
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	90 91 01 01 	lds	r25, 0x0101
  f0:	a0 91 02 01 	lds	r26, 0x0102
  f4:	b0 91 03 01 	lds	r27, 0x0103
  f8:	80 93 3b 01 	sts	0x013B, r24
  fc:	90 93 3c 01 	sts	0x013C, r25
 100:	a0 93 3d 01 	sts	0x013D, r26
 104:	b0 93 3e 01 	sts	0x013E, r27
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <TimerISR>:
}
void TimerISR(){
	TimerFlag = 1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 3f 01 	sts	0x013F, r24
 116:	08 95       	ret

00000118 <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1ms per TimerOn settings)
	
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
 13e:	80 91 3b 01 	lds	r24, 0x013B
 142:	90 91 3c 01 	lds	r25, 0x013C
 146:	a0 91 3d 01 	lds	r26, 0x013D
 14a:	b0 91 3e 01 	lds	r27, 0x013E
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	a1 09       	sbc	r26, r1
 152:	b1 09       	sbc	r27, r1
 154:	80 93 3b 01 	sts	0x013B, r24
 158:	90 93 3c 01 	sts	0x013C, r25
 15c:	a0 93 3d 01 	sts	0x013D, r26
 160:	b0 93 3e 01 	sts	0x013E, r27
	if(_avr_timer_cntcurr == 0){
 164:	89 2b       	or	r24, r25
 166:	8a 2b       	or	r24, r26
 168:	8b 2b       	or	r24, r27
 16a:	89 f4       	brne	.+34     	; 0x18e <__vector_13+0x76>
		// call the isr that the user uses
		TimerISR();
 16c:	d1 df       	rcall	.-94     	; 0x110 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 16e:	80 91 00 01 	lds	r24, 0x0100
 172:	90 91 01 01 	lds	r25, 0x0101
 176:	a0 91 02 01 	lds	r26, 0x0102
 17a:	b0 91 03 01 	lds	r27, 0x0103
 17e:	80 93 3b 01 	sts	0x013B, r24
 182:	90 93 3c 01 	sts	0x013C, r25
 186:	a0 93 3d 01 	sts	0x013D, r26
 18a:	b0 93 3e 01 	sts	0x013E, r27
	}
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0b be       	out	0x3b, r0	; 59
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <TimerSet>:
//
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M){
	_avr_timer_M = M;
 1b4:	60 93 00 01 	sts	0x0100, r22
 1b8:	70 93 01 01 	sts	0x0101, r23
 1bc:	80 93 02 01 	sts	0x0102, r24
 1c0:	90 93 03 01 	sts	0x0103, r25
	_avr_timer_cntcurr = _avr_timer_M;
 1c4:	60 93 3b 01 	sts	0x013B, r22
 1c8:	70 93 3c 01 	sts	0x013C, r23
 1cc:	80 93 3d 01 	sts	0x013D, r24
 1d0:	90 93 3e 01 	sts	0x013E, r25
 1d4:	08 95       	ret

000001d6 <displayScore>:
}
// =============================================================================
enum SMStates {INIT, LEDON, CHECKINPUT, CHECKINPUTFALL, GAMEWINNER, WINLED1, WINLED2} SMState;

void displayScore(unsigned char score){
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24
	LCD_DisplayString(1, "Score: ");
 1da:	64 e0       	ldi	r22, 0x04	; 4
 1dc:	71 e0       	ldi	r23, 0x01	; 1
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	f0 d0       	rcall	.+480    	; 0x3c2 <LCD_DisplayString>
	LCD_WriteData('0' + score);
 1e2:	8c 2f       	mov	r24, r28
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	c0 96       	adiw	r24, 0x30	; 48
 1e8:	d4 d0       	rcall	.+424    	; 0x392 <LCD_WriteData>
}
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <tick>:
// variable data
unsigned char gameScore = 0;
unsigned char elapsedDuration = 0;
unsigned char currLED = 0x00;
#define GAMELIGHTS PORTB
void tick(){
 1ee:	cf 93       	push	r28
	unsigned char bInput = ~PINA & 0x01;
 1f0:	80 b1       	in	r24, 0x00	; 0
 1f2:	80 95       	com	r24
 1f4:	c8 2f       	mov	r28, r24
 1f6:	c1 70       	andi	r28, 0x01	; 1
	// state actions
	switch(SMState){
 1f8:	80 91 40 01 	lds	r24, 0x0140
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	91 f1       	breq	.+100    	; 0x264 <tick+0x76>
 200:	30 f4       	brcc	.+12     	; 0x20e <tick+0x20>
 202:	88 23       	and	r24, r24
 204:	71 f0       	breq	.+28     	; 0x222 <tick+0x34>
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	09 f0       	breq	.+2      	; 0x20c <tick+0x1e>
 20a:	4f c0       	rjmp	.+158    	; 0x2aa <tick+0xbc>
 20c:	14 c0       	rjmp	.+40     	; 0x236 <tick+0x48>
 20e:	85 30       	cpi	r24, 0x05	; 5
 210:	09 f4       	brne	.+2      	; 0x214 <tick+0x26>
 212:	44 c0       	rjmp	.+136    	; 0x29c <tick+0xae>
 214:	86 30       	cpi	r24, 0x06	; 6
 216:	09 f4       	brne	.+2      	; 0x21a <tick+0x2c>
 218:	45 c0       	rjmp	.+138    	; 0x2a4 <tick+0xb6>
 21a:	84 30       	cpi	r24, 0x04	; 4
 21c:	09 f0       	breq	.+2      	; 0x220 <tick+0x32>
 21e:	45 c0       	rjmp	.+138    	; 0x2aa <tick+0xbc>
 220:	38 c0       	rjmp	.+112    	; 0x292 <tick+0xa4>
		case INIT:
			gameScore = 0;
 222:	10 92 3a 01 	sts	0x013A, r1
			currLED = 0x01;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 38 01 	sts	0x0138, r24
			elapsedDuration = 0;
 22c:	10 92 39 01 	sts	0x0139, r1
			displayScore(gameScore);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	d1 df       	rcall	.-94     	; 0x1d6 <displayScore>
			break;
 234:	3a c0       	rjmp	.+116    	; 0x2aa <tick+0xbc>
		case LEDON:
			if(!(elapsedDuration < LEDTIMER)){ // ran out of time for current LED
 236:	80 91 39 01 	lds	r24, 0x0139
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	68 f0       	brcs	.+26     	; 0x258 <tick+0x6a>
				// change LED
				currLED = currLED * 2;
 23e:	80 91 38 01 	lds	r24, 0x0138
 242:	88 0f       	add	r24, r24
				if(currLED > 4){
 244:	85 30       	cpi	r24, 0x05	; 5
 246:	18 f4       	brcc	.+6      	; 0x24e <tick+0x60>
			displayScore(gameScore);
			break;
		case LEDON:
			if(!(elapsedDuration < LEDTIMER)){ // ran out of time for current LED
				// change LED
				currLED = currLED * 2;
 248:	80 93 38 01 	sts	0x0138, r24
 24c:	03 c0       	rjmp	.+6      	; 0x254 <tick+0x66>
				if(currLED > 4){
					currLED = 0x01;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 38 01 	sts	0x0138, r24
				}
				// reset "timer"
				elapsedDuration = 0;
 254:	10 92 39 01 	sts	0x0139, r1
			}
			// increment "timer"
			elapsedDuration++;
 258:	80 91 39 01 	lds	r24, 0x0139
 25c:	8f 5f       	subi	r24, 0xFF	; 255
 25e:	80 93 39 01 	sts	0x0139, r24
			break;
 262:	23 c0       	rjmp	.+70     	; 0x2aa <tick+0xbc>
		case CHECKINPUT:
			if(currLED == 2){ // goal achieved
 264:	80 91 38 01 	lds	r24, 0x0138
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	41 f4       	brne	.+16     	; 0x27c <tick+0x8e>
				if(gameScore < MAXPOINTS) // increase points
 26c:	80 91 3a 01 	lds	r24, 0x013A
 270:	89 30       	cpi	r24, 0x09	; 9
 272:	58 f4       	brcc	.+22     	; 0x28a <tick+0x9c>
					gameScore++;
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 93 3a 01 	sts	0x013A, r24
 27a:	07 c0       	rjmp	.+14     	; 0x28a <tick+0x9c>
			}else{
				if(gameScore > 0) // decrease points
 27c:	80 91 3a 01 	lds	r24, 0x013A
 280:	88 23       	and	r24, r24
 282:	19 f0       	breq	.+6      	; 0x28a <tick+0x9c>
					gameScore--;
 284:	81 50       	subi	r24, 0x01	; 1
 286:	80 93 3a 01 	sts	0x013A, r24
			}
			displayScore(gameScore);
 28a:	80 91 3a 01 	lds	r24, 0x013A
 28e:	a3 df       	rcall	.-186    	; 0x1d6 <displayScore>
			
			break;
 290:	0c c0       	rjmp	.+24     	; 0x2aa <tick+0xbc>
		case CHECKINPUTFALL:
			break;
		case GAMEWINNER:
			LCD_DisplayString(1, "Winner!!!");
 292:	6c e0       	ldi	r22, 0x0C	; 12
 294:	71 e0       	ldi	r23, 0x01	; 1
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	94 d0       	rcall	.+296    	; 0x3c2 <LCD_DisplayString>
			break;
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <tick+0xbc>
		case WINLED1:
			currLED = 0x55;
 29c:	85 e5       	ldi	r24, 0x55	; 85
 29e:	80 93 38 01 	sts	0x0138, r24
			break;
 2a2:	03 c0       	rjmp	.+6      	; 0x2aa <tick+0xbc>
		case WINLED2:
			currLED = 0xAA;
 2a4:	8a ea       	ldi	r24, 0xAA	; 170
 2a6:	80 93 38 01 	sts	0x0138, r24
			break;
		default:
			break;
	}
	switch(SMState){
 2aa:	80 91 40 01 	lds	r24, 0x0140
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	01 f1       	breq	.+64     	; 0x2f2 <tick+0x104>
 2b2:	20 f4       	brcc	.+8      	; 0x2bc <tick+0xce>
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	61 f0       	breq	.+24     	; 0x2d0 <tick+0xe2>
 2b8:	c0 f4       	brcc	.+48     	; 0x2ea <tick+0xfc>
 2ba:	06 c0       	rjmp	.+12     	; 0x2c8 <tick+0xda>
 2bc:	85 30       	cpi	r24, 0x05	; 5
 2be:	19 f1       	breq	.+70     	; 0x306 <tick+0x118>
 2c0:	f0 f0       	brcs	.+60     	; 0x2fe <tick+0x110>
 2c2:	86 30       	cpi	r24, 0x06	; 6
 2c4:	89 f5       	brne	.+98     	; 0x328 <tick+0x13a>
 2c6:	28 c0       	rjmp	.+80     	; 0x318 <tick+0x12a>
		case INIT:
			SMState = LEDON;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	80 93 40 01 	sts	0x0140, r24
			break;
 2ce:	2c c0       	rjmp	.+88     	; 0x328 <tick+0x13a>
		case LEDON:
			if(gameScore == MAXPOINTS){
 2d0:	80 91 3a 01 	lds	r24, 0x013A
 2d4:	89 30       	cpi	r24, 0x09	; 9
 2d6:	19 f4       	brne	.+6      	; 0x2de <tick+0xf0>
				SMState = GAMEWINNER;
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	80 93 40 01 	sts	0x0140, r24
			}
			if(bInput != 0){
 2de:	cc 23       	and	r28, r28
 2e0:	19 f1       	breq	.+70     	; 0x328 <tick+0x13a>
				SMState = CHECKINPUT;
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	80 93 40 01 	sts	0x0140, r24
 2e8:	1f c0       	rjmp	.+62     	; 0x328 <tick+0x13a>
			}
			break;
		case CHECKINPUT:
			SMState = CHECKINPUTFALL;
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	80 93 40 01 	sts	0x0140, r24
			
			break;
 2f0:	1b c0       	rjmp	.+54     	; 0x328 <tick+0x13a>
		case CHECKINPUTFALL:
			/*if(gameScore == MAXPOINTS){
				SMState = GAMEWINNER;
			}*/
			if(!bInput){
 2f2:	c1 11       	cpse	r28, r1
 2f4:	19 c0       	rjmp	.+50     	; 0x328 <tick+0x13a>
				SMState = LEDON;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 40 01 	sts	0x0140, r24
 2fc:	15 c0       	rjmp	.+42     	; 0x328 <tick+0x13a>
			}
			break;
		case GAMEWINNER:
			SMState = WINLED1;
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	80 93 40 01 	sts	0x0140, r24
			break;
 304:	11 c0       	rjmp	.+34     	; 0x328 <tick+0x13a>
		case WINLED1:
			if(bInput != 0){
 306:	cc 23       	and	r28, r28
 308:	19 f0       	breq	.+6      	; 0x310 <tick+0x122>
				SMState = INIT;
 30a:	10 92 40 01 	sts	0x0140, r1
 30e:	0c c0       	rjmp	.+24     	; 0x328 <tick+0x13a>
			}else{
				SMState = WINLED2;
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	80 93 40 01 	sts	0x0140, r24
 316:	08 c0       	rjmp	.+16     	; 0x328 <tick+0x13a>
			}
			break;
		case WINLED2:
			if(bInput != 0){
 318:	cc 23       	and	r28, r28
 31a:	19 f0       	breq	.+6      	; 0x322 <tick+0x134>
				SMState = INIT;
 31c:	10 92 40 01 	sts	0x0140, r1
 320:	03 c0       	rjmp	.+6      	; 0x328 <tick+0x13a>
			}else {
				SMState = WINLED1;
 322:	85 e0       	ldi	r24, 0x05	; 5
 324:	80 93 40 01 	sts	0x0140, r24
			}
			break;
		default:
			break;
	}
	PORTB = currLED;
 328:	80 91 38 01 	lds	r24, 0x0138
 32c:	85 b9       	out	0x05, r24	; 5
}
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <main>:

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // button input
 332:	11 b8       	out	0x01, r1	; 1
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // LED output
 338:	84 b9       	out	0x04, r24	; 4
 33a:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // LCD Data Lines
 33c:	87 b9       	out	0x07, r24	; 7
 33e:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD Control Lines [ PD6 | PD7 ]
 340:	8a b9       	out	0x0a, r24	; 10
 342:	1b b8       	out	0x0b, r1	; 11
	LCD_init();		
 344:	55 d0       	rcall	.+170    	; 0x3f0 <LCD_init>
	
	LCD_DisplayString(1, "Welcome to             the GAME.");
 346:	66 e1       	ldi	r22, 0x16	; 22
 348:	71 e0       	ldi	r23, 0x01	; 1
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	3a d0       	rcall	.+116    	; 0x3c2 <LCD_DisplayString>
	
	TimerSet(100);
 34e:	64 e6       	ldi	r22, 0x64	; 100
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	2e df       	rcall	.-420    	; 0x1b4 <TimerSet>
	TimerOn();
 358:	b7 de       	rcall	.-658    	; 0xc8 <TimerOn>
	while(1)
	{
		while(!TimerFlag);
 35a:	80 91 3f 01 	lds	r24, 0x013F
 35e:	88 23       	and	r24, r24
 360:	e1 f3       	breq	.-8      	; 0x35a <main+0x28>
		TimerFlag = 0;
 362:	10 92 3f 01 	sts	0x013F, r1
		
		tick();
 366:	43 df       	rcall	.-378    	; 0x1ee <tick>
	}
 368:	f8 cf       	rjmp	.-16     	; 0x35a <main+0x28>

0000036a <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 36a:	18 16       	cp	r1, r24
 36c:	19 06       	cpc	r1, r25
 36e:	5c f0       	brlt	.+22     	; 0x386 <delay_ms+0x1c>
 370:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 372:	00 00       	nop
 374:	21 50       	subi	r18, 0x01	; 1
 376:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 378:	e1 f7       	brne	.-8      	; 0x372 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 37a:	4f 5f       	subi	r20, 0xFF	; 255
 37c:	5f 4f       	sbci	r21, 0xFF	; 255
 37e:	48 17       	cp	r20, r24
 380:	59 07       	cpc	r21, r25
 382:	29 f4       	brne	.+10     	; 0x38e <delay_ms+0x24>
 384:	08 95       	ret
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 38a:	67 e0       	ldi	r22, 0x07	; 7
 38c:	73 e0       	ldi	r23, 0x03	; 3
 38e:	9b 01       	movw	r18, r22
 390:	f0 cf       	rjmp	.-32     	; 0x372 <delay_ms+0x8>

00000392 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
 392:	5e 9a       	sbi	0x0b, 6	; 11
   DATA_BUS = Data;
 394:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 396:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 398:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 39a:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	e4 cf       	rjmp	.-56     	; 0x36a <delay_ms>

000003a2 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 3a2:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
 3a4:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 3a6:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 3a8:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 3aa:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	dc cf       	rjmp	.-72     	; 0x36a <delay_ms>

000003b2 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 3b2:	81 31       	cpi	r24, 0x11	; 17
 3b4:	10 f4       	brcc	.+4      	; 0x3ba <LCD_Cursor+0x8>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 3b6:	81 58       	subi	r24, 0x81	; 129
 3b8:	f4 cf       	rjmp	.-24     	; 0x3a2 <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 3ba:	81 55       	subi	r24, 0x51	; 81
 3bc:	f2 cf       	rjmp	.-28     	; 0x3a2 <LCD_WriteCommand>

000003be <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	f0 cf       	rjmp	.-32     	; 0x3a2 <LCD_WriteCommand>

000003c2 <LCD_DisplayString>:
   asm("nop");
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	18 2f       	mov	r17, r24
 3ca:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 3cc:	f8 df       	rcall	.-16     	; 0x3be <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 3ce:	98 81       	ld	r25, Y
 3d0:	99 23       	and	r25, r25
 3d2:	51 f0       	breq	.+20     	; 0x3e8 <LCD_DisplayString+0x26>
   delay_ms(1);
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
 3d4:	81 2f       	mov	r24, r17
   while(*string) {
      LCD_Cursor(c++);
 3d6:	18 2f       	mov	r17, r24
 3d8:	1f 5f       	subi	r17, 0xFF	; 255
 3da:	eb df       	rcall	.-42     	; 0x3b2 <LCD_Cursor>
      LCD_WriteData(*string++);
 3dc:	89 91       	ld	r24, Y+
 3de:	d9 df       	rcall	.-78     	; 0x392 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 3e0:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 3e2:	98 81       	ld	r25, Y
 3e4:	91 11       	cpse	r25, r1
 3e6:	f7 cf       	rjmp	.-18     	; 0x3d6 <LCD_DisplayString+0x14>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	08 95       	ret

000003f0 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 3f0:	84 e6       	ldi	r24, 0x64	; 100
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	ba df       	rcall	.-140    	; 0x36a <delay_ms>
	LCD_WriteCommand(0x38);
 3f6:	88 e3       	ldi	r24, 0x38	; 56
 3f8:	d4 df       	rcall	.-88     	; 0x3a2 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	d2 df       	rcall	.-92     	; 0x3a2 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 3fe:	8f e0       	ldi	r24, 0x0F	; 15
 400:	d0 df       	rcall	.-96     	; 0x3a2 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	ce df       	rcall	.-100    	; 0x3a2 <LCD_WriteCommand>
	delay_ms(10);						 
 406:	8a e0       	ldi	r24, 0x0A	; 10
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	af cf       	rjmp	.-162    	; 0x36a <delay_ms>

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
