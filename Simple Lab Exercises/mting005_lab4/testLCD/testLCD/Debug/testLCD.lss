
testLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080012e  0080012e  0000049a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000bff  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000060b  00000000  00000000  00000cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000029d  00000000  00000000  000012e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000515  00000000  00000000  0000157e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000188  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ef  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003b4  00000000  00000000  00001e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  000021bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c2 c0       	rjmp	.+388    	; 0x1ba <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 33       	cpi	r26, 0x35	; 53
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6c d1       	rcall	.+728    	; 0x39c <main>
  c4:	87 c1       	rjmp	.+782    	; 0x3d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	48 17       	cp	r20, r24
  de:	59 07       	cpc	r21, r25
  e0:	29 f4       	brne	.+10     	; 0xec <delay_ms+0x24>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  e8:	67 e0       	ldi	r22, 0x07	; 7
  ea:	73 e0       	ldi	r23, 0x03	; 3
  ec:	9b 01       	movw	r18, r22
  ee:	f0 cf       	rjmp	.-32     	; 0xd0 <delay_ms+0x8>

000000f0 <LCD_WriteData>:
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
  f0:	5e 9a       	sbi	0x0b, 6	; 11
   DATA_BUS = Data;
  f2:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
  f4:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
  f6:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
  f8:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	e4 cf       	rjmp	.-56     	; 0xc8 <delay_ms>

00000100 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 100:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
 102:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 104:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 106:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 108:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	dc cf       	rjmp	.-72     	; 0xc8 <delay_ms>

00000110 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 110:	81 31       	cpi	r24, 0x11	; 17
 112:	10 f4       	brcc	.+4      	; 0x118 <LCD_Cursor+0x8>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 114:	81 58       	subi	r24, 0x81	; 129
 116:	f4 cf       	rjmp	.-24     	; 0x100 <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 118:	81 55       	subi	r24, 0x51	; 81
 11a:	f2 cf       	rjmp	.-28     	; 0x100 <LCD_WriteCommand>

0000011c <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	f0 cf       	rjmp	.-32     	; 0x100 <LCD_WriteCommand>

00000120 <LCD_DisplayString>:
   asm("nop");
   CLR_BIT(CONTROL_BUS,E);
   delay_ms(1);
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	18 2f       	mov	r17, r24
 128:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 12a:	f8 df       	rcall	.-16     	; 0x11c <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 12c:	98 81       	ld	r25, Y
 12e:	99 23       	and	r25, r25
 130:	51 f0       	breq	.+20     	; 0x146 <LCD_DisplayString+0x26>
   delay_ms(1);
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
 132:	81 2f       	mov	r24, r17
   while(*string) {
      LCD_Cursor(c++);
 134:	18 2f       	mov	r17, r24
 136:	1f 5f       	subi	r17, 0xFF	; 255
 138:	eb df       	rcall	.-42     	; 0x110 <LCD_Cursor>
      LCD_WriteData(*string++);
 13a:	89 91       	ld	r24, Y+
 13c:	d9 df       	rcall	.-78     	; 0xf0 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 13e:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 140:	98 81       	ld	r25, Y
 142:	91 11       	cpse	r25, r1
 144:	f7 cf       	rjmp	.-18     	; 0x134 <LCD_DisplayString+0x14>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	08 95       	ret

0000014e <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 14e:	84 e6       	ldi	r24, 0x64	; 100
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ba df       	rcall	.-140    	; 0xc8 <delay_ms>
	LCD_WriteCommand(0x38);
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	d4 df       	rcall	.-88     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	d2 df       	rcall	.-92     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	d0 df       	rcall	.-96     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	ce df       	rcall	.-100    	; 0x100 <LCD_WriteCommand>
	delay_ms(10);						 
 164:	8a e0       	ldi	r24, 0x0A	; 10
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	af cf       	rjmp	.-162    	; 0xc8 <delay_ms>

0000016a <TimerOn>:
	_avr_timer_cntcurr = _avr_timer_M;
	// Enable global interrupts: 0x80: 10000000
	SREG |= 0x80;
}
void TimerOff(){
	TCCR1B=0x00;
 16a:	8b e0       	ldi	r24, 0x0B	; 11
 16c:	80 93 81 00 	sts	0x0081, r24
 170:	8d e7       	ldi	r24, 0x7D	; 125
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 89 00 	sts	0x0089, r25
 178:	80 93 88 00 	sts	0x0088, r24
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	80 93 6f 00 	sts	0x006F, r24
 182:	10 92 85 00 	sts	0x0085, r1
 186:	10 92 84 00 	sts	0x0084, r1
 18a:	80 91 00 01 	lds	r24, 0x0100
 18e:	90 91 01 01 	lds	r25, 0x0101
 192:	a0 91 02 01 	lds	r26, 0x0102
 196:	b0 91 03 01 	lds	r27, 0x0103
 19a:	80 93 2f 01 	sts	0x012F, r24
 19e:	90 93 30 01 	sts	0x0130, r25
 1a2:	a0 93 31 01 	sts	0x0131, r26
 1a6:	b0 93 32 01 	sts	0x0132, r27
 1aa:	8f b7       	in	r24, 0x3f	; 63
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	8f bf       	out	0x3f, r24	; 63
 1b0:	08 95       	ret

000001b2 <TimerISR>:
}
void TimerISR(){
	TimerFlag = 1;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 33 01 	sts	0x0133, r24
 1b8:	08 95       	ret

000001ba <__vector_13>:
}

ISR(TIMER1_COMPA_vect){
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	0b b6       	in	r0, 0x3b	; 59
 1c6:	0f 92       	push	r0
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1ms per TimerOn settings)
	
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
 1e0:	80 91 2f 01 	lds	r24, 0x012F
 1e4:	90 91 30 01 	lds	r25, 0x0130
 1e8:	a0 91 31 01 	lds	r26, 0x0131
 1ec:	b0 91 32 01 	lds	r27, 0x0132
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	a1 09       	sbc	r26, r1
 1f4:	b1 09       	sbc	r27, r1
 1f6:	80 93 2f 01 	sts	0x012F, r24
 1fa:	90 93 30 01 	sts	0x0130, r25
 1fe:	a0 93 31 01 	sts	0x0131, r26
 202:	b0 93 32 01 	sts	0x0132, r27
	if(_avr_timer_cntcurr == 0){
 206:	89 2b       	or	r24, r25
 208:	8a 2b       	or	r24, r26
 20a:	8b 2b       	or	r24, r27
 20c:	89 f4       	brne	.+34     	; 0x230 <__vector_13+0x76>
		// call the isr that the user uses
		TimerISR();
 20e:	d1 df       	rcall	.-94     	; 0x1b2 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 210:	80 91 00 01 	lds	r24, 0x0100
 214:	90 91 01 01 	lds	r25, 0x0101
 218:	a0 91 02 01 	lds	r26, 0x0102
 21c:	b0 91 03 01 	lds	r27, 0x0103
 220:	80 93 2f 01 	sts	0x012F, r24
 224:	90 93 30 01 	sts	0x0130, r25
 228:	a0 93 31 01 	sts	0x0131, r26
 22c:	b0 93 32 01 	sts	0x0132, r27
	}
}
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0b be       	out	0x3b, r0	; 59
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <TimerSet>:
//
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M){
	_avr_timer_M = M;
 256:	60 93 00 01 	sts	0x0100, r22
 25a:	70 93 01 01 	sts	0x0101, r23
 25e:	80 93 02 01 	sts	0x0102, r24
 262:	90 93 03 01 	sts	0x0103, r25
	_avr_timer_cntcurr = _avr_timer_M;
 266:	60 93 2f 01 	sts	0x012F, r22
 26a:	70 93 30 01 	sts	0x0130, r23
 26e:	80 93 31 01 	sts	0x0131, r24
 272:	90 93 32 01 	sts	0x0132, r25
 276:	08 95       	ret

00000278 <displayScore>:
// =============================================================================
enum SMStates {INIT, WAIT, INC, DEC, RESET} SMState;
#define DEBUGPORT PORTB

unsigned char DisplayCount = 0;
void displayScore(unsigned char score){
 278:	cf 93       	push	r28
 27a:	c8 2f       	mov	r28, r24
	LCD_DisplayString(1, "Score: ");
 27c:	64 e0       	ldi	r22, 0x04	; 4
 27e:	71 e0       	ldi	r23, 0x01	; 1
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	4e df       	rcall	.-356    	; 0x120 <LCD_DisplayString>
	LCD_WriteData('0' + score);
 284:	8c 2f       	mov	r24, r28
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	c0 96       	adiw	r24, 0x30	; 48
 28a:	32 df       	rcall	.-412    	; 0xf0 <LCD_WriteData>
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <tick>:

void tick(){
 290:	1f 93       	push	r17
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
	unsigned char bIncrement = ~PINA & 0x01;
 296:	80 b1       	in	r24, 0x00	; 0
 298:	80 95       	com	r24
	unsigned char bDecrement = ~PINA & 0x02;
 29a:	90 b1       	in	r25, 0x00	; 0
 29c:	90 95       	com	r25
 29e:	d9 2f       	mov	r29, r25
 2a0:	d2 70       	andi	r29, 0x02	; 2
	unsigned char bReset = (bIncrement != 0 && bDecrement != 0) ? 1 : 0;
 2a2:	18 2f       	mov	r17, r24
 2a4:	11 70       	andi	r17, 0x01	; 1
 2a6:	80 ff       	sbrs	r24, 0
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <tick+0x28>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	d1 11       	cpse	r29, r1
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <tick+0x2c>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <tick+0x2c>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	c8 2f       	mov	r28, r24
	// state actions
	switch(SMState){
 2be:	90 91 34 01 	lds	r25, 0x0134
 2c2:	92 30       	cpi	r25, 0x02	; 2
 2c4:	79 f0       	breq	.+30     	; 0x2e4 <tick+0x54>
 2c6:	18 f4       	brcc	.+6      	; 0x2ce <tick+0x3e>
 2c8:	99 23       	and	r25, r25
 2ca:	31 f0       	breq	.+12     	; 0x2d8 <tick+0x48>
 2cc:	25 c0       	rjmp	.+74     	; 0x318 <tick+0x88>
 2ce:	93 30       	cpi	r25, 0x03	; 3
 2d0:	a1 f0       	breq	.+40     	; 0x2fa <tick+0x6a>
 2d2:	94 30       	cpi	r25, 0x04	; 4
 2d4:	09 f5       	brne	.+66     	; 0x318 <tick+0x88>
 2d6:	1c c0       	rjmp	.+56     	; 0x310 <tick+0x80>
		case INIT:
			PORTB = 0x00;
 2d8:	15 b8       	out	0x05, r1	; 5
			DisplayCount = 0;
 2da:	10 92 2e 01 	sts	0x012E, r1
			displayScore(DisplayCount);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	cb df       	rcall	.-106    	; 0x278 <displayScore>
			break;
 2e2:	1a c0       	rjmp	.+52     	; 0x318 <tick+0x88>
		case WAIT:
			// waiting for input
			// Do nothing
			break;
		case INC:
			if(DisplayCount < 9)
 2e4:	80 91 2e 01 	lds	r24, 0x012E
 2e8:	89 30       	cpi	r24, 0x09	; 9
 2ea:	18 f4       	brcc	.+6      	; 0x2f2 <tick+0x62>
				DisplayCount += 1;
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	80 93 2e 01 	sts	0x012E, r24
			displayScore(DisplayCount);
 2f2:	80 91 2e 01 	lds	r24, 0x012E
 2f6:	c0 df       	rcall	.-128    	; 0x278 <displayScore>
			break;
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <tick+0x88>
		case DEC:
			if(DisplayCount > 0)
 2fa:	80 91 2e 01 	lds	r24, 0x012E
 2fe:	88 23       	and	r24, r24
 300:	19 f0       	breq	.+6      	; 0x308 <tick+0x78>
				DisplayCount -= 1;
 302:	81 50       	subi	r24, 0x01	; 1
 304:	80 93 2e 01 	sts	0x012E, r24
			displayScore(DisplayCount);
 308:	80 91 2e 01 	lds	r24, 0x012E
 30c:	b5 df       	rcall	.-150    	; 0x278 <displayScore>
			break;
 30e:	04 c0       	rjmp	.+8      	; 0x318 <tick+0x88>
		case RESET:
			DisplayCount = 0;
 310:	10 92 2e 01 	sts	0x012E, r1
			displayScore(DisplayCount);
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	b0 df       	rcall	.-160    	; 0x278 <displayScore>
			break;
		default:
			break;
	}
	// SM transitions
	switch(SMState){
 318:	90 91 34 01 	lds	r25, 0x0134
 31c:	92 30       	cpi	r25, 0x02	; 2
 31e:	09 f1       	breq	.+66     	; 0x362 <tick+0xd2>
 320:	28 f4       	brcc	.+10     	; 0x32c <tick+0x9c>
 322:	99 23       	and	r25, r25
 324:	41 f0       	breq	.+16     	; 0x336 <tick+0xa6>
 326:	91 30       	cpi	r25, 0x01	; 1
 328:	a9 f5       	brne	.+106    	; 0x394 <tick+0x104>
 32a:	09 c0       	rjmp	.+18     	; 0x33e <tick+0xae>
 32c:	93 30       	cpi	r25, 0x03	; 3
 32e:	19 f1       	breq	.+70     	; 0x376 <tick+0xe6>
 330:	94 30       	cpi	r25, 0x04	; 4
 332:	81 f5       	brne	.+96     	; 0x394 <tick+0x104>
 334:	2a c0       	rjmp	.+84     	; 0x38a <tick+0xfa>
		case INIT:
			SMState = WAIT;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 34 01 	sts	0x0134, r24
			break;
 33c:	2b c0       	rjmp	.+86     	; 0x394 <tick+0x104>
		case WAIT:
			if(bReset != 0){
 33e:	cc 23       	and	r28, r28
 340:	21 f0       	breq	.+8      	; 0x34a <tick+0xba>
				SMState = RESET;
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	80 93 34 01 	sts	0x0134, r24
 348:	25 c0       	rjmp	.+74     	; 0x394 <tick+0x104>
			}else if(bIncrement != 0){
 34a:	11 23       	and	r17, r17
 34c:	21 f0       	breq	.+8      	; 0x356 <tick+0xc6>
				SMState = INC;
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	80 93 34 01 	sts	0x0134, r24
 354:	1f c0       	rjmp	.+62     	; 0x394 <tick+0x104>
			}else if(bDecrement != 0){
 356:	dd 23       	and	r29, r29
 358:	e9 f0       	breq	.+58     	; 0x394 <tick+0x104>
				SMState = DEC;
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	80 93 34 01 	sts	0x0134, r24
 360:	19 c0       	rjmp	.+50     	; 0x394 <tick+0x104>
			}
			break;
		case INC:
			if(bReset != 0){
 362:	cc 23       	and	r28, r28
 364:	21 f0       	breq	.+8      	; 0x36e <tick+0xde>
				SMState = RESET;
 366:	84 e0       	ldi	r24, 0x04	; 4
 368:	80 93 34 01 	sts	0x0134, r24
 36c:	13 c0       	rjmp	.+38     	; 0x394 <tick+0x104>
			}else if(bReset == 0){
				SMState = WAIT;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 34 01 	sts	0x0134, r24
 374:	0f c0       	rjmp	.+30     	; 0x394 <tick+0x104>
			}else if(bDecrement != 0){
				SMState = DEC;
			}
			break;
		case DEC:
			if(bReset != 0){
 376:	cc 23       	and	r28, r28
 378:	21 f0       	breq	.+8      	; 0x382 <tick+0xf2>
				SMState = RESET;
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	80 93 34 01 	sts	0x0134, r24
 380:	09 c0       	rjmp	.+18     	; 0x394 <tick+0x104>
			}else if(bReset == 0){
				SMState = WAIT;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 34 01 	sts	0x0134, r24
 388:	05 c0       	rjmp	.+10     	; 0x394 <tick+0x104>
			}else if(bIncrement != 0){
				SMState = INC;
			}
			break;
		case RESET:
			if(bReset == 0){
 38a:	c1 11       	cpse	r28, r1
 38c:	03 c0       	rjmp	.+6      	; 0x394 <tick+0x104>
				SMState = WAIT;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 34 01 	sts	0x0134, r24
			}
			break;
		default:
			break;
	}
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	08 95       	ret

0000039c <main>:

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // button input
 39c:	11 b8       	out	0x01, r1	; 1
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; // LED output
 3a2:	84 b9       	out	0x04, r24	; 4
 3a4:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00; // LCD Data Lines
 3a6:	87 b9       	out	0x07, r24	; 7
 3a8:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; // LCD Control Lines [ PD6 | PD7 ]
 3aa:	8a b9       	out	0x0a, r24	; 10
 3ac:	1b b8       	out	0x0b, r1	; 11
	LCD_init();		
 3ae:	cf de       	rcall	.-610    	; 0x14e <LCD_init>
	
	LCD_DisplayString(1, "Welcome to             the GAME.");
 3b0:	6c e0       	ldi	r22, 0x0C	; 12
 3b2:	71 e0       	ldi	r23, 0x01	; 1
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	b4 de       	rcall	.-664    	; 0x120 <LCD_DisplayString>
	
	TimerSet(1000);
 3b8:	68 ee       	ldi	r22, 0xE8	; 232
 3ba:	73 e0       	ldi	r23, 0x03	; 3
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	4a df       	rcall	.-364    	; 0x256 <TimerSet>
	TimerOn();
 3c2:	d3 de       	rcall	.-602    	; 0x16a <TimerOn>
	unsigned char count = 0x00;
	unsigned char tmpB = 0x00;
	while(1)
	{
		while(!TimerFlag);
 3c4:	80 91 33 01 	lds	r24, 0x0133
 3c8:	88 23       	and	r24, r24
 3ca:	e1 f3       	breq	.-8      	; 0x3c4 <main+0x28>
		TimerFlag = 0;
 3cc:	10 92 33 01 	sts	0x0133, r1
		
		tick();
 3d0:	5f df       	rcall	.-322    	; 0x290 <tick>
	}
 3d2:	f8 cf       	rjmp	.-16     	; 0x3c4 <main+0x28>

000003d4 <_exit>:
 3d4:	f8 94       	cli

000003d6 <__stop_program>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <__stop_program>
