
mting005_lab1_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000126  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008ff  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000178  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000e0  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000f0  00000000  00000000  00000bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f2  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f0  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000ece  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1f d0       	rcall	.+62     	; 0xd8 <main>
  9a:	43 c0       	rjmp	.+134    	; 0x122 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_Z6SetBithhh>:
 */ 


#include <avr/io.h>
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b){
	return (b ? (0x01 << k) : x & ~(0x01 << k));
  9e:	44 23       	and	r20, r20
  a0:	39 f0       	breq	.+14     	; 0xb0 <_Z6SetBithhh+0x12>
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	01 c0       	rjmp	.+2      	; 0xaa <_Z6SetBithhh+0xc>
  a8:	88 0f       	add	r24, r24
  aa:	6a 95       	dec	r22
  ac:	ea f7       	brpl	.-6      	; 0xa8 <_Z6SetBithhh+0xa>
  ae:	08 95       	ret
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	a9 01       	movw	r20, r18
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_Z6SetBithhh+0x1e>
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <_Z6SetBithhh+0x1a>
  c0:	ba 01       	movw	r22, r20
  c2:	60 95       	com	r22
  c4:	86 23       	and	r24, r22
}
  c6:	08 95       	ret

000000c8 <_Z6GetBithh>:

unsigned char GetBit(unsigned char x, unsigned char k){
	return ( (x&(0x01 << k)) != 0 );
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <_Z6GetBithh+0x8>
  cc:	95 95       	asr	r25
  ce:	87 95       	ror	r24
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <_Z6GetBithh+0x4>
}
  d4:	81 70       	andi	r24, 0x01	; 1
  d6:	08 95       	ret

000000d8 <main>:
int main(void)
{
	DDRA = 0x00; PORTA = 0x00;
  d8:	11 b8       	out	0x01, r1	; 1
  da:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 b9       	out	0x04, r24	; 4
  e0:	15 b8       	out	0x05, r1	; 5
	unsigned char totalSpots = 4;
	while(1){
		unsigned char i = 0;
		unsigned numAvailable = 0;
  e2:	c1 2c       	mov	r12, r1
  e4:	d1 2c       	mov	r13, r1
{
	DDRA = 0x00; PORTA = 0x00;
	DDRB = 0xFF; PORTB = 0x00;
	unsigned char totalSpots = 4;
	while(1){
		unsigned char i = 0;
  e6:	e1 2c       	mov	r14, r1
		unsigned numAvailable = 0;
  e8:	e6 01       	movw	r28, r12
{
	DDRA = 0x00; PORTA = 0x00;
	DDRB = 0xFF; PORTB = 0x00;
	unsigned char totalSpots = 4;
	while(1){
		unsigned char i = 0;
  ea:	1e 2d       	mov	r17, r14
		unsigned numAvailable = 0;
		while( i < totalSpots ){
			if(GetBit(PINA, i)){
  ec:	80 b1       	in	r24, 0x00	; 0
  ee:	61 2f       	mov	r22, r17
  f0:	eb df       	rcall	.-42     	; 0xc8 <_Z6GetBithh>
  f2:	81 11       	cpse	r24, r1
				++numAvailable;
  f4:	21 96       	adiw	r28, 0x01	; 1
			}
			++i;
  f6:	1f 5f       	subi	r17, 0xFF	; 255
	DDRB = 0xFF; PORTB = 0x00;
	unsigned char totalSpots = 4;
	while(1){
		unsigned char i = 0;
		unsigned numAvailable = 0;
		while( i < totalSpots ){
  f8:	14 30       	cpi	r17, 0x04	; 4
  fa:	c1 f7       	brne	.-16     	; 0xec <main+0x14>
			if(GetBit(PINA, i)){
				++numAvailable;
			}
			++i;
		}
		PORTB = numAvailable;
  fc:	c5 b9       	out	0x05, r28	; 5
		if(numAvailable == totalSpots){
  fe:	24 97       	sbiw	r28, 0x04	; 4
 100:	41 f4       	brne	.+16     	; 0x112 <main+0x3a>
			PORTB = PORTB | SetBit(PORTB, 7, 1);
 102:	c5 b1       	in	r28, 0x05	; 5
 104:	85 b1       	in	r24, 0x05	; 5
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	67 e0       	ldi	r22, 0x07	; 7
 10a:	c9 df       	rcall	.-110    	; 0x9e <_Z6SetBithhh>
 10c:	8c 2b       	or	r24, r28
 10e:	85 b9       	out	0x05, r24	; 5
 110:	eb cf       	rjmp	.-42     	; 0xe8 <main+0x10>
			}else{
			PORTB = PORTB & SetBit(PORTB, 7, 0);
 112:	c5 b1       	in	r28, 0x05	; 5
 114:	85 b1       	in	r24, 0x05	; 5
 116:	4e 2d       	mov	r20, r14
 118:	67 e0       	ldi	r22, 0x07	; 7
 11a:	c1 df       	rcall	.-126    	; 0x9e <_Z6SetBithhh>
 11c:	8c 23       	and	r24, r28
 11e:	85 b9       	out	0x05, r24	; 5
 120:	e3 cf       	rjmp	.-58     	; 0xe8 <main+0x10>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
