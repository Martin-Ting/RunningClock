
mting005_lab1_part6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001a4  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000097b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000009aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001a7  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ca  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016c  00000000  00000000  00000c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000010f  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d9  00000000  00000000  00000f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	17 d0       	rcall	.+46     	; 0xc8 <main>
  9a:	82 c0       	rjmp	.+260    	; 0x1a0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <_Z6SetBithhh>:
	return (b ? (0x01 << k) : x & ~(0x01 << k));
}

unsigned char GetBit(unsigned char x, unsigned char k){
	return ( (x&(0x01 << k)) != 0 );
}
  9e:	44 23       	and	r20, r20
  a0:	39 f0       	breq	.+14     	; 0xb0 <_Z6SetBithhh+0x12>
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	01 c0       	rjmp	.+2      	; 0xaa <_Z6SetBithhh+0xc>
  a8:	88 0f       	add	r24, r24
  aa:	6a 95       	dec	r22
  ac:	ea f7       	brpl	.-6      	; 0xa8 <_Z6SetBithhh+0xa>
  ae:	08 95       	ret
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	a9 01       	movw	r20, r18
  b6:	02 c0       	rjmp	.+4      	; 0xbc <_Z6SetBithhh+0x1e>
  b8:	44 0f       	add	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <_Z6SetBithhh+0x1a>
  c0:	ba 01       	movw	r22, r20
  c2:	60 95       	com	r22
  c4:	86 23       	and	r24, r22
  c6:	08 95       	ret

000000c8 <main>:

int main(void)
{
	DDRA = 0x00; PORTA=0x00;
  c8:	11 b8       	out	0x01, r1	; 1
  ca:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
  d0:	15 b8       	out	0x05, r1	; 5
		}else if (fuelData >= 7 && fuelData <= 9){
			PORTB = 0x3C;
		}else if (fuelData >= 10 && fuelData <= 12){
			PORTB = 0x3E;
		}else if (fuelData >= 13 || fuelData <= 15){
			PORTB = 0x3F;
  d2:	0f 2e       	mov	r0, r31
  d4:	ff e3       	ldi	r31, 0x3F	; 63
  d6:	af 2e       	mov	r10, r31
  d8:	f0 2d       	mov	r31, r0
		}else if (fuelData == 5 || fuelData == 6){
			PORTB = 0x38;
		}else if (fuelData >= 7 && fuelData <= 9){
			PORTB = 0x3C;
		}else if (fuelData >= 10 && fuelData <= 12){
			PORTB = 0x3E;
  da:	0f 2e       	mov	r0, r31
  dc:	fe e3       	ldi	r31, 0x3E	; 62
  de:	bf 2e       	mov	r11, r31
  e0:	f0 2d       	mov	r31, r0
		}else if (fuelData == 3 || fuelData == 4){
			PORTB = 0x30;
		}else if (fuelData == 5 || fuelData == 6){
			PORTB = 0x38;
		}else if (fuelData >= 7 && fuelData <= 9){
			PORTB = 0x3C;
  e2:	0f 2e       	mov	r0, r31
  e4:	fc e3       	ldi	r31, 0x3C	; 60
  e6:	df 2e       	mov	r13, r31
  e8:	f0 2d       	mov	r31, r0
		}else if(fuelData == 1 || fuelData == 2){
			PORTB = 0x20;
		}else if (fuelData == 3 || fuelData == 4){
			PORTB = 0x30;
		}else if (fuelData == 5 || fuelData == 6){
			PORTB = 0x38;
  ea:	0f 2e       	mov	r0, r31
  ec:	f8 e3       	ldi	r31, 0x38	; 56
  ee:	cf 2e       	mov	r12, r31
  f0:	f0 2d       	mov	r31, r0
		if(fuelData == 0){
			PORTB = 0x00;
		}else if(fuelData == 1 || fuelData == 2){
			PORTB = 0x20;
		}else if (fuelData == 3 || fuelData == 4){
			PORTB = 0x30;
  f2:	0f 2e       	mov	r0, r31
  f4:	f0 e3       	ldi	r31, 0x30	; 48
  f6:	ef 2e       	mov	r14, r31
  f8:	f0 2d       	mov	r31, r0
		unsigned char seatbeltFastened = PINA & 0x40;
		
		if(fuelData == 0){
			PORTB = 0x00;
		}else if(fuelData == 1 || fuelData == 2){
			PORTB = 0x20;
  fa:	68 94       	set
  fc:	ff 24       	eor	r15, r15
  fe:	f5 f8       	bld	r15, 5
int main(void)
{
	DDRA = 0x00; PORTA=0x00;
	DDRB = 0xFF; PORTB = 0x00;
	while(1){
	unsigned char fuelData = PINA & 0x0F;
 100:	80 b1       	in	r24, 0x00	; 0
 102:	8f 70       	andi	r24, 0x0F	; 15
		unsigned char keyInIgnition = PINA & 0x10;
 104:	c0 b1       	in	r28, 0x00	; 0
 106:	c0 71       	andi	r28, 0x10	; 16
		unsigned char driverSeated = PINA & 0x20;
 108:	d0 b1       	in	r29, 0x00	; 0
		unsigned char seatbeltFastened = PINA & 0x40;
 10a:	10 b1       	in	r17, 0x00	; 0
		
		if(fuelData == 0){
 10c:	81 11       	cpse	r24, r1
 10e:	02 c0       	rjmp	.+4      	; 0x114 <main+0x4c>
			PORTB = 0x00;
 110:	15 b8       	out	0x05, r1	; 5
 112:	21 c0       	rjmp	.+66     	; 0x156 <main+0x8e>
		}else if(fuelData == 1 || fuelData == 2){
 114:	98 2f       	mov	r25, r24
 116:	91 50       	subi	r25, 0x01	; 1
 118:	92 30       	cpi	r25, 0x02	; 2
 11a:	10 f4       	brcc	.+4      	; 0x120 <main+0x58>
			PORTB = 0x20;
 11c:	f5 b8       	out	0x05, r15	; 5
 11e:	19 c0       	rjmp	.+50     	; 0x152 <main+0x8a>
		}else if (fuelData == 3 || fuelData == 4){
 120:	98 2f       	mov	r25, r24
 122:	93 50       	subi	r25, 0x03	; 3
 124:	92 30       	cpi	r25, 0x02	; 2
 126:	10 f4       	brcc	.+4      	; 0x12c <main+0x64>
			PORTB = 0x30;
 128:	e5 b8       	out	0x05, r14	; 5
 12a:	13 c0       	rjmp	.+38     	; 0x152 <main+0x8a>
		}else if (fuelData == 5 || fuelData == 6){
 12c:	98 2f       	mov	r25, r24
 12e:	95 50       	subi	r25, 0x05	; 5
 130:	92 30       	cpi	r25, 0x02	; 2
 132:	10 f4       	brcc	.+4      	; 0x138 <main+0x70>
			PORTB = 0x38;
 134:	c5 b8       	out	0x05, r12	; 5
 136:	0d c0       	rjmp	.+26     	; 0x152 <main+0x8a>
		}else if (fuelData >= 7 && fuelData <= 9){
 138:	98 2f       	mov	r25, r24
 13a:	97 50       	subi	r25, 0x07	; 7
 13c:	93 30       	cpi	r25, 0x03	; 3
 13e:	10 f4       	brcc	.+4      	; 0x144 <main+0x7c>
			PORTB = 0x3C;
 140:	d5 b8       	out	0x05, r13	; 5
 142:	07 c0       	rjmp	.+14     	; 0x152 <main+0x8a>
		}else if (fuelData >= 10 && fuelData <= 12){
 144:	98 2f       	mov	r25, r24
 146:	9a 50       	subi	r25, 0x0A	; 10
 148:	93 30       	cpi	r25, 0x03	; 3
 14a:	10 f4       	brcc	.+4      	; 0x150 <main+0x88>
			PORTB = 0x3E;
 14c:	b5 b8       	out	0x05, r11	; 5
 14e:	01 c0       	rjmp	.+2      	; 0x152 <main+0x8a>
		}else if (fuelData >= 13 || fuelData <= 15){
			PORTB = 0x3F;
 150:	a5 b8       	out	0x05, r10	; 5
		}else{
			PORTB = 0x00;
		}
	
		if(fuelData <= 4){
 152:	85 30       	cpi	r24, 0x05	; 5
 154:	40 f4       	brcc	.+16     	; 0x166 <main+0x9e>
			//light PC6
			PORTB = PORTB | SetBit(PORTB, 6, 1);
 156:	05 b1       	in	r16, 0x05	; 5
 158:	85 b1       	in	r24, 0x05	; 5
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	66 e0       	ldi	r22, 0x06	; 6
 15e:	9f df       	rcall	.-194    	; 0x9e <_Z6SetBithhh>
 160:	80 2b       	or	r24, r16
 162:	85 b9       	out	0x05, r24	; 5
 164:	07 c0       	rjmp	.+14     	; 0x174 <main+0xac>
		}
		else{
			PORTB = PORTB & SetBit(PORTB, 6, 0);
 166:	05 b1       	in	r16, 0x05	; 5
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	66 e0       	ldi	r22, 0x06	; 6
 16e:	97 df       	rcall	.-210    	; 0x9e <_Z6SetBithhh>
 170:	80 23       	and	r24, r16
 172:	85 b9       	out	0x05, r24	; 5
		}
		
		if(keyInIgnition != 0 && driverSeated != 0 && !(seatbeltFastened != 0)){
 174:	cc 23       	and	r28, r28
 176:	61 f0       	breq	.+24     	; 0x190 <main+0xc8>
 178:	d5 ff       	sbrs	r29, 5
 17a:	0a c0       	rjmp	.+20     	; 0x190 <main+0xc8>
 17c:	16 fd       	sbrc	r17, 6
 17e:	08 c0       	rjmp	.+16     	; 0x190 <main+0xc8>
			PORTB = PORTB | SetBit(PORTB, 7,1);
 180:	c5 b1       	in	r28, 0x05	; 5
 182:	85 b1       	in	r24, 0x05	; 5
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	67 e0       	ldi	r22, 0x07	; 7
 188:	8a df       	rcall	.-236    	; 0x9e <_Z6SetBithhh>
 18a:	8c 2b       	or	r24, r28
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	b8 cf       	rjmp	.-144    	; 0x100 <main+0x38>
		} else {
			PORTB = PORTB & SetBit(PORTB,7,0); 
 190:	c5 b1       	in	r28, 0x05	; 5
 192:	85 b1       	in	r24, 0x05	; 5
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	67 e0       	ldi	r22, 0x07	; 7
 198:	82 df       	rcall	.-252    	; 0x9e <_Z6SetBithhh>
 19a:	8c 23       	and	r24, r28
 19c:	85 b9       	out	0x05, r24	; 5
 19e:	b0 cf       	rjmp	.-160    	; 0x100 <main+0x38>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
