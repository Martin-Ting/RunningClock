
mting005_lab1_part7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000116  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000091e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015a  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b7  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000122  00000000  00000000  00000b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000134  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f9  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000ef5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	3b c0       	rjmp	.+118    	; 0x112 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
unsigned char GetBit(unsigned char x, unsigned char k){
	return ( (x&(0x01 << k)) != 0 );
}
int main(void)
{
	DDRA = 0x00; PORTA = 0x00; 
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0x00;
  a2:	14 b8       	out	0x04, r1	; 4
  a4:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; PORTC = 0x00;
  a6:	17 b8       	out	0x07, r1	; 7
  a8:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	1b b8       	out	0x0b, r1	; 11
			PORTD = PORTD | 0x02;
		} else {
			PORTD = PORTD & ~0x02;
		}
		if(totalWeight < MAXWEIGHT){
			shiftWeight = (MAXWEIGHT - totalWeight);
  b0:	7c e8       	ldi	r23, 0x8C	; 140
	//unsigned short avgWeight = 0;
	unsigned short balanceWeight = 0;
	unsigned char shiftWeight = 0;
    while(1)
    {
		PORTD = 0x0;
  b2:	1b b8       	out	0x0b, r1	; 11
		totalWeight = (PINA + PINB + PINC);
  b4:	90 b1       	in	r25, 0x00	; 0
  b6:	23 b1       	in	r18, 0x03	; 3
  b8:	86 b1       	in	r24, 0x06	; 6
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	29 0f       	add	r18, r25
  be:	31 1d       	adc	r19, r1
  c0:	28 0f       	add	r18, r24
  c2:	31 1d       	adc	r19, r1
  c4:	c9 01       	movw	r24, r18
		//avgWeight = totalWeight / 3;
		balanceWeight = (PINA > PINC) ? PINA - PINC : PINC - PINA;
  c6:	50 b1       	in	r21, 0x00	; 0
  c8:	46 b1       	in	r20, 0x06	; 6
  ca:	45 17       	cp	r20, r21
  cc:	30 f4       	brcc	.+12     	; 0xda <main+0x3c>
  ce:	40 b1       	in	r20, 0x00	; 0
  d0:	66 b1       	in	r22, 0x06	; 6
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	46 1b       	sub	r20, r22
  d6:	51 09       	sbc	r21, r1
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <main+0x46>
  da:	46 b1       	in	r20, 0x06	; 6
  dc:	60 b1       	in	r22, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	46 1b       	sub	r20, r22
  e2:	51 09       	sbc	r21, r1
		
		// set PD0 weight of three cars too heavy 
		if (totalWeight > MAXWEIGHT){
  e4:	8d 38       	cpi	r24, 0x8D	; 141
  e6:	91 05       	cpc	r25, r1
  e8:	10 f0       	brcs	.+4      	; 0xee <main+0x50>
			PORTD = PORTD | 0x01;
  ea:	58 9a       	sbi	0x0b, 0	; 11
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <main+0x52>
		} else {
			PORTD = PORTD & ~0x01;
  ee:	58 98       	cbi	0x0b, 0	; 11
		}
		// set PD1 if |A - C| > 80
		if(balanceWeight > MAXBALANCEDISPLACEMENT){
  f0:	41 35       	cpi	r20, 0x51	; 81
  f2:	51 05       	cpc	r21, r1
  f4:	10 f0       	brcs	.+4      	; 0xfa <main+0x5c>
			PORTD = PORTD | 0x02;
  f6:	59 9a       	sbi	0x0b, 1	; 11
  f8:	01 c0       	rjmp	.+2      	; 0xfc <main+0x5e>
		} else {
			PORTD = PORTD & ~0x02;
  fa:	59 98       	cbi	0x0b, 1	; 11
		}
		if(totalWeight < MAXWEIGHT){
  fc:	8c 38       	cpi	r24, 0x8C	; 140
  fe:	91 05       	cpc	r25, r1
 100:	c0 f6       	brcc	.-80     	; 0xb2 <main+0x14>
			shiftWeight = (MAXWEIGHT - totalWeight);
			PORTD = PORTD | (shiftWeight*4);
 102:	9b b1       	in	r25, 0x0b	; 11
			PORTD = PORTD | 0x02;
		} else {
			PORTD = PORTD & ~0x02;
		}
		if(totalWeight < MAXWEIGHT){
			shiftWeight = (MAXWEIGHT - totalWeight);
 104:	87 2f       	mov	r24, r23
 106:	82 1b       	sub	r24, r18
			PORTD = PORTD | (shiftWeight*4);
 108:	88 0f       	add	r24, r24
 10a:	88 0f       	add	r24, r24
 10c:	89 2b       	or	r24, r25
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	d0 cf       	rjmp	.-96     	; 0xb2 <main+0x14>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
